{"version":3,"file":"Step4CycleAndProgression-CAra6Ia_.js","sources":["../../src/lib/fiveThreeOne/progression.js","../../src/components/program/steps/Step4CycleAndProgression.jsx"],"sourcesContent":["// src/lib/fiveThreeOne/progression.js\r\nimport { roundToIncrement, classifyLift } from './compute531.js';\r\n\r\n/**\r\n * Apply standard TM increments across lifts (does not mutate input)\r\n * @param {object} lifts e.g. {squat:{tm:...}, bench:{tm:...}, deadlift:{tm:...}, press:{tm:...}}\r\n * @param {{upper:number,lower:number}} inc\r\n * @param {{increment:number,mode:'nearest'|'floor'|'ceiling'}} rounding\r\n */\r\nexport function applyIncrements(lifts, inc = { upper: 5, lower: 10 }, rounding = { increment: 5, mode: 'nearest' }) {\r\n    const next = { ...(lifts || {}) };\r\n    ['squat', 'deadlift', 'bench', 'press'].forEach(lift => {\r\n        if (!next[lift]) return;\r\n        const klass = classifyLift(lift);\r\n        const add = klass === 'upper' ? (inc.upper ?? 5) : (inc.lower ?? 10);\r\n        const tm = Number(next[lift].tm);\r\n        if (Number.isFinite(tm)) {\r\n            next[lift] = { ...(next[lift] || {}), tm: roundToIncrement(tm + add, rounding?.increment ?? 5, rounding?.mode ?? 'nearest') };\r\n        }\r\n    });\r\n    return next;\r\n}\r\n\r\n/**\r\n * Reset a TM by ratio (e.g. 0.9 for 90% standard reset)\r\n * @param {number} currentTM\r\n * @param {number} ratio 0.9 or 0.85\r\n * @param {{increment:number,mode:'nearest'|'floor'|'ceiling'}} rounding\r\n */\r\nexport function resetTM(currentTM, ratio = 0.9, rounding = { increment: 5, mode: 'nearest' }) {\r\n    if (!Number.isFinite(currentTM)) return currentTM;\r\n    const raw = currentTM * ratio;\r\n    return roundToIncrement(raw, rounding?.increment ?? 5, 'ceiling');\r\n}\r\n","// src/components/program/steps/Step4CycleAndProgression.jsx\r\nimport React, { useMemo, useState } from 'react';\r\nimport { Info, CheckCircle, Calculator, RefreshCcw, TrendingUp, Award } from 'lucide-react';\r\nimport StepStatusPill from './_shared/StepStatusPill.jsx';\r\nimport { STEP_IDS } from './_registry/stepRegistry.js';\r\nimport { LOADING_OPTIONS, calcMainSets, calcE1RM } from '../../../lib/fiveThreeOne/compute531.js';\r\nimport { applyIncrements, resetTM } from '../../../lib/fiveThreeOne/progression.js';\r\n\r\nexport default function Step4CycleAndProgression({ data, updateData }) {\r\n    const st = data || {};\r\n    const set = (patch) => updateData({ ...st, ...patch });\r\n\r\n    const loading = st.loading || { option: 1, previewWeek: 1 };\r\n    const rounding = st.rounding || { increment: 5, mode: 'nearest' };\r\n    const increments = st.increments || { upper: 5, lower: 10 };\r\n    const lifts = st.lifts || {};\r\n    const prs = st.prs || {};\r\n\r\n    const [prCalc, setPrCalc] = useState({ lift: 'bench', reps: 5 });\r\n\r\n    const setLoadingOption = (opt) => set({ loading: { ...loading, option: opt } });\r\n    const setPreviewWeek = (wk) => set({ loading: { ...loading, previewWeek: wk } });\r\n    const setRounding = (patch) => set({ rounding: { ...rounding, ...patch } });\r\n    const setIncrements = (patch) => set({ increments: { ...increments, ...patch } });\r\n\r\n    // Actions\r\n    const applyCycleIncrements = () => {\r\n        const next = applyIncrements(lifts, increments, rounding);\r\n        set({ lifts: next });\r\n    };\r\n\r\n    const doReset = (liftKey, mode) => {\r\n        const currentTM = Number(lifts?.[liftKey]?.tm);\r\n        if (!Number.isFinite(currentTM)) return;\r\n        const ratio = mode === 'conservative' ? 0.85 : 0.90;\r\n        const newTM = resetTM(currentTM, ratio, rounding);\r\n        const next = { ...(lifts || {}) };\r\n        next[liftKey] = { ...(next[liftKey] || {}), tm: newTM };\r\n        set({ lifts: next });\r\n    };\r\n\r\n    const savePR = (liftKey, e1rm) => {\r\n        const prev = prs?.[liftKey]?.bestE1RM || null;\r\n        if (prev && e1rm <= prev) return; // no downgrade\r\n        const next = { ...(prs || {}) };\r\n        next[liftKey] = { ...(next[liftKey] || {}), bestE1RM: e1rm };\r\n        set({ prs: next });\r\n    };\r\n\r\n    // Preview main sets for each lift using previewWeek\r\n    const previewRows = useMemo(() => {\r\n        const week = loading.previewWeek || 1;\r\n        const inc = rounding?.increment ?? 5;\r\n        const mode = rounding?.mode ?? 'nearest';\r\n        const mapLift = (key) => {\r\n            const tm = Number(lifts?.[key]?.tm);\r\n            if (!Number.isFinite(tm)) return { key, tm: null, sets: [] };\r\n            return {\r\n                key,\r\n                tm,\r\n                sets: calcMainSets(tm, loading.option, week, { increment: inc, mode })\r\n            };\r\n        };\r\n        return [mapLift('press'), mapLift('deadlift'), mapLift('bench'), mapLift('squat')];\r\n    }, [lifts, loading, rounding]);\r\n\r\n    // PR calculator (uses current preview week last set)\r\n    const prCalcResult = useMemo(() => {\r\n        const liftKey = prCalc.lift || 'bench';\r\n        const tm = Number(lifts?.[liftKey]?.tm);\r\n        if (!Number.isFinite(tm)) return { weight: 0, reps: prCalc.reps, e1rm: 0, isPR: false, best: 0 };\r\n        const sets = calcMainSets(tm, loading.option, loading.previewWeek || 1, rounding);\r\n        const last = sets[2];\r\n        const weight = last?.weight ?? 0;\r\n        const reps = Number(prCalc.reps) || 0;\r\n        const e1rm = calcE1RM(weight, reps);\r\n        const best = Number(prs?.[liftKey]?.bestE1RM) || 0;\r\n        return { weight, reps, e1rm, isPR: e1rm > best, best };\r\n    }, [prCalc, lifts, loading, rounding, prs]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <div className=\"flex items-start justify-between\">\r\n                <div>\r\n                    <h3 className=\"text-xl font-semibold text-white mb-1\">Step 4: Cycle & Progression</h3>\r\n                    <p className=\"text-gray-400 text-sm\">Select loading option, rounding, TM increments, and manage resets. Use the PR calculator to verify e1RM logic.</p>\r\n                </div>\r\n                <StepStatusPill stepId={STEP_IDS.CYCLE_AND_PROGRESSION} data={st} />\r\n            </div>\r\n\r\n            {/* Info */}\r\n            <div className=\"bg-blue-900/20 border border-blue-600 p-4 rounded\">\r\n                <div className=\"flex gap-3 items-start\">\r\n                    <Info className=\"w-5 h-5 text-blue-300 mt-0.5\" />\r\n                    <div className=\"text-blue-100 text-sm\">\r\n                        <div className=\"font-medium mb-1\">5/3/1 Guidance</div>\r\n                        <ul className=\"list-disc ml-5 space-y-1\">\r\n                            <li>All percentages are based on <b>Training Max (TM)</b>, not true 1RM.</li>\r\n                            <li>Week 1: 5+, Week 2: 3+, Week 3: 1+ on the 3rd set. Week 4 is a deload (no +).</li>\r\n                            <li>Standard increments per cycle: <b>+5 lbs upper</b> (Press/Bench), <b>+10 lbs lower</b> (Squat/Deadlift).</li>\r\n                            <li>When performance stalls, reset the TM (90% standard; 85% conservative).</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Loading option & preview week */}\r\n            <div className=\"bg-gray-900/60 border border-gray-700 rounded p-4\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div>\r\n                        <div className=\"text-white font-medium mb-2\">Loading Option</div>\r\n                        <div className=\"flex gap-2\">\r\n                            {[1, 2].map(opt => (\r\n                                <button key={opt} onClick={() => setLoadingOption(opt)} className={`px-3 py-1 rounded border ${loading.option === opt ? 'border-red-500 ring-2 ring-red-600' : 'border-gray-600 hover:bg-gray-700/40'} text-white`}>\r\n                                    Option {opt}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div className=\"text-white font-medium mb-2\">Preview Week</div>\r\n                        <div className=\"flex gap-2\">\r\n                            {[1, 2, 3, 4].map(wk => (\r\n                                <button key={wk} onClick={() => setPreviewWeek(wk)} className={`px-3 py-1 rounded border ${loading.previewWeek === wk ? 'border-red-500 ring-2 ring-red-600' : 'border-gray-600 hover:bg-gray-700/40'} text-white`}>\r\n                                    Week {wk}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-400 mt-2\">Week 4 is deload (no AMRAP).</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div className=\"text-white font-medium mb-2\">Rounding</div>\r\n                        <div className=\"grid grid-cols-2 gap-2\">\r\n                            <div>\r\n                                <label className=\"text-sm text-gray-300\">Increment</label>\r\n                                <input type=\"number\" min=\"1\" step=\"0.5\" value={rounding.increment ?? 5} onChange={e => setRounding({ increment: Number(e.target.value) })} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"text-sm text-gray-300\">Mode</label>\r\n                                <select value={rounding.mode ?? 'nearest'} onChange={e => setRounding({ mode: e.target.value })} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\">\r\n                                    <option value=\"nearest\">Nearest</option>\r\n                                    <option value=\"floor\">Floor</option>\r\n                                    <option value=\"ceiling\">Ceiling</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Percent table for current option */}\r\n                <div className=\"mt-4 overflow-x-auto\">\r\n                    <table className=\"min-w-full text-sm text-gray-200 border border-gray-700\">\r\n                        <thead className=\"bg-gray-800\">\r\n                            <tr>\r\n                                <th className=\"px-3 py-2 text-left\">Week</th>\r\n                                <th className=\"px-3 py-2 text-left\">Set 1</th>\r\n                                <th className=\"px-3 py-2 text-left\">Set 2</th>\r\n                                <th className=\"px-3 py-2 text-left\">Set 3</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {[1, 2, 3, 4].map(wk => (\r\n                                <tr key={wk} className=\"border-t border-gray-700\">\r\n                                    <td className=\"px-3 py-2\">Week {wk}</td>\r\n                                    {LOADING_OPTIONS[String(loading.option)][String(wk)].map((pct, i) => (\r\n                                        <td key={i} className=\"px-3 py-2\">{pct}%{(wk < 4 && i === 2) ? '+' : ''}</td>\r\n                                    ))}\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n            {/* TM increments & resets */}\r\n            <div className=\"bg-gray-900/60 border border-gray-700 rounded p-4\">\r\n                <div className=\"text-white font-medium mb-2\">TM Progression & Resets</div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                    <div className=\"bg-gray-800/50 border border-gray-700 rounded p-3\">\r\n                        <div className=\"text-gray-200 font-medium mb-2\">Cycle Increments</div>\r\n                        <div className=\"grid grid-cols-2 gap-2\">\r\n                            <div>\r\n                                <label className=\"text-sm text-gray-300\">Upper (+lbs)</label>\r\n                                <input type=\"number\" min=\"1\" step=\"1\" value={increments.upper ?? 5} onChange={e => setIncrements({ upper: Number(e.target.value) })} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"text-sm text-gray-300\">Lower (+lbs)</label>\r\n                                <input type=\"number\" min=\"1\" step=\"1\" value={increments.lower ?? 10} onChange={e => setIncrements({ lower: Number(e.target.value) })} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\" />\r\n                            </div>\r\n                        </div>\r\n                        <button onClick={applyCycleIncrements} className=\"mt-3 inline-flex items-center gap-2 px-3 py-1 border border-gray-500 rounded hover:bg-gray-700/40 text-gray-100\">\r\n                            <TrendingUp className=\"w-4 h-4\" /> Apply increments to all TMs\r\n                        </button>\r\n                        <p className=\"text-xs text-gray-400 mt-2\">Adds +Upper to Press/Bench; +Lower to Squat/Deadlift. Respects rounding.</p>\r\n                    </div>\r\n\r\n                    <div className=\"bg-gray-800/50 border border-gray-700 rounded p-3 md:col-span-2\">\r\n                        <div className=\"text-gray-200 font-medium mb-2\">Reset a Lift</div>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\r\n                            {['press', 'bench', 'deadlift', 'squat'].map(liftKey => (\r\n                                <div key={liftKey} className=\"bg-gray-900/50 border border-gray-700 rounded p-3\">\r\n                                    <div className=\"flex items-center justify-between mb-2\">\r\n                                        <div className=\"text-gray-200 capitalize\">{liftKey}</div>\r\n                                        <div className=\"text-xs text-gray-400\">TM: {Number.isFinite(Number(lifts?.[liftKey]?.tm)) ? lifts[liftKey].tm : '-'}</div>\r\n                                    </div>\r\n                                    <div className=\"flex gap-2\">\r\n                                        <button onClick={() => doReset(liftKey, 'standard')} className=\"px-3 py-1 rounded border border-gray-600 hover:bg-gray-700/40 text-white\" title=\"Reset to 90% of current TM (ceiling to increment)\">90% Reset</button>\r\n                                        <button onClick={() => doReset(liftKey, 'conservative')} className=\"px-3 py-1 rounded border border-gray-600 hover:bg-gray-700/40 text-white\" title=\"Reset to 85% of current TM (ceiling to increment)\">85% Reset</button>\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                        <p className=\"text-xs text-gray-400 mt-2\">Use resets when AMRAPs are consistently at minimums or reps are missed.</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* PR calculator */}\r\n            <div className=\"bg-gray-900/60 border border-gray-700 rounded p-4\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"text-white font-medium\">e1RM / PR Calculator (uses Week {loading.previewWeek} last set)</div>\r\n                    <Award className=\"w-4 h-4 text-yellow-400\" />\r\n                </div>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\r\n                    <div>\r\n                        <label className=\"text-sm text-gray-300\">Lift</label>\r\n                        <select value={prCalc.lift} onChange={e => setPrCalc(p => ({ ...p, lift: e.target.value }))} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\">\r\n                            <option value=\"press\">Overhead Press</option>\r\n                            <option value=\"bench\">Bench Press</option>\r\n                            <option value=\"deadlift\">Deadlift</option>\r\n                            <option value=\"squat\">Squat</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <label className=\"text-sm text-gray-300\">Reps on + set</label>\r\n                        <input type=\"number\" min=\"1\" step=\"1\" value={prCalc.reps} onChange={e => setPrCalc(p => ({ ...p, reps: Number(e.target.value) }))} className=\"w-full bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\" />\r\n                    </div>\r\n                    <div className=\"md:col-span-2\">\r\n                        <div className=\"text-xs text-gray-400 mb-1\">Computed</div>\r\n                        <div className=\"bg-gray-800/50 border border-gray-700 rounded p-2 text-gray-200\">\r\n                            Weight on + set: <span className=\"font-mono\">{Math.round((calcMainSets(Number(lifts?.[prCalc.lift]?.tm) || 0, loading.option, loading.previewWeek, rounding)[2]?.weight) || 0)}</span> ·\r\n                            e1RM: <span className=\"font-mono\">{Math.round(calcE1RM(calcMainSets(Number(lifts?.[prCalc.lift]?.tm) || 0, loading.option, loading.previewWeek, rounding)[2]?.weight || 0, prCalc.reps) || 0)}</span> ·\r\n                            Best: <span className=\"font-mono\">{Math.round((prs?.[prCalc.lift]?.bestE1RM) || 0)}</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"mt-2 flex items-center gap-3\">\r\n                    {prCalcResult.isPR ? (\r\n                        <div className=\"inline-flex items-center gap-2 text-green-300 text-sm\">\r\n                            <CheckCircle className=\"w-4 h-4\" /> New PR detected — save it.\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"inline-flex items-center gap-2 text-gray-300 text-sm\">\r\n                            <Calculator className=\"w-4 h-4\" /> Enter reps to evaluate e1RM vs best.\r\n                        </div>\r\n                    )}\r\n                    <button onClick={() => savePR(prCalc.lift, Math.round(prCalcResult.e1rm))} className={`px-3 py-1 rounded border ${prCalcResult.isPR ? 'border-green-500 text-green-200 hover:bg-green-900/20' : 'border-gray-600 text-gray-200 hover:bg-gray-700/40'}`}>\r\n                        Save as PR\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n"],"names":["applyIncrements","lifts","inc","rounding","next","lift","add","classifyLift","tm","roundToIncrement","resetTM","currentTM","ratio","raw","Step4CycleAndProgression","data","updateData","st","set","patch","loading","increments","prs","prCalc","setPrCalc","useState","setLoadingOption","opt","setPreviewWeek","wk","setRounding","setIncrements","applyCycleIncrements","doReset","liftKey","mode","_a","newTM","savePR","e1rm","prev","useMemo","week","mapLift","key","calcMainSets","prCalcResult","last","weight","reps","calcE1RM","best","_b","jsxs","jsx","StepStatusPill","STEP_IDS","Info","e","LOADING_OPTIONS","pct","i","TrendingUp","Award","p","_d","_c","_e","CheckCircle","Calculator"],"mappings":"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"}