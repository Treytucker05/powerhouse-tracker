{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECGC,IAAA,EAAA,EAAA,kD,E,iB,C,GAwhBD,EAAA,MAAA,CAAA,EAAA,qBAAA,IACE,GADF,EAAA,MAAA,CAAA,EAAA,sBAAA,IAEE,GAFF,EAAA,MAAA,CAAA,EAAA,uBAAA,IAGE,GAHF,EAAA,MAAA,CAAA,EAAA,yBAAA,IAIE,GAJF,EAAA,MAAA,CAAA,EAAA,0BAAA,IAKE,GALF,EAAA,MAAA,CAAA,EAAA,kBAAA,IAME,GANF,EAAA,MAAA,CAAA,EAAA,+BAAA,IAOE,GAPF,EAAA,MAAA,CAAA,EAAA,qBAAA,IAQE,GARF,EAAA,MAAA,CAAA,EAAA,4BAAA,IASE,GA/hBF,IAAA,EAAA,EAAA,4B,E,E,c,C,GAMA,IAAM,EAAe,CACnB,EAAG,CAAC,EA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","sources":["<anon>","js/algorithms/effort.js"],"sourcesContent":["// modules are defined as an array\r\n// [ module function, map of requires ]\r\n//\r\n// map of requires is short require name -> numeric require\r\n//\r\n// anything defined in a previous bundle is accessed via the\r\n// orig method which is the require for previous bundles\r\n\r\n(function (\r\n  modules,\r\n  entry,\r\n  mainEntry,\r\n  parcelRequireName,\r\n  externals,\r\n  distDir,\r\n  publicUrl,\r\n  devServer\r\n) {\r\n  /* eslint-disable no-undef */\r\n  var globalObject =\r\n    typeof globalThis !== 'undefined'\r\n      ? globalThis\r\n      : typeof self !== 'undefined'\r\n      ? self\r\n      : typeof window !== 'undefined'\r\n      ? window\r\n      : typeof global !== 'undefined'\r\n      ? global\r\n      : {};\r\n  /* eslint-enable no-undef */\r\n\r\n  // Save the require from previous bundle to this closure if any\r\n  var previousRequire =\r\n    typeof globalObject[parcelRequireName] === 'function' &&\r\n    globalObject[parcelRequireName];\r\n\r\n  var importMap = previousRequire.i || {};\r\n  var cache = previousRequire.cache || {};\r\n  // Do not use `require` to prevent Webpack from trying to bundle this call\r\n  var nodeRequire =\r\n    typeof module !== 'undefined' &&\r\n    typeof module.require === 'function' &&\r\n    module.require.bind(module);\r\n\r\n  function newRequire(name, jumped) {\r\n    if (!cache[name]) {\r\n      if (!modules[name]) {\r\n        if (externals[name]) {\r\n          return externals[name];\r\n        }\r\n        // if we cannot find the module within our internal map or\r\n        // cache jump to the current global require ie. the last bundle\r\n        // that was added to the page.\r\n        var currentRequire =\r\n          typeof globalObject[parcelRequireName] === 'function' &&\r\n          globalObject[parcelRequireName];\r\n        if (!jumped && currentRequire) {\r\n          return currentRequire(name, true);\r\n        }\r\n\r\n        // If there are other bundles on this page the require from the\r\n        // previous one is saved to 'previousRequire'. Repeat this as\r\n        // many times as there are bundles until the module is found or\r\n        // we exhaust the require chain.\r\n        if (previousRequire) {\r\n          return previousRequire(name, true);\r\n        }\r\n\r\n        // Try the node require function if it exists.\r\n        if (nodeRequire && typeof name === 'string') {\r\n          return nodeRequire(name);\r\n        }\r\n\r\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\r\n        err.code = 'MODULE_NOT_FOUND';\r\n        throw err;\r\n      }\r\n\r\n      localRequire.resolve = resolve;\r\n      localRequire.cache = {};\r\n\r\n      var module = (cache[name] = new newRequire.Module(name));\r\n\r\n      modules[name][0].call(\r\n        module.exports,\r\n        localRequire,\r\n        module,\r\n        module.exports,\r\n        globalObject\r\n      );\r\n    }\r\n\r\n    return cache[name].exports;\r\n\r\n    function localRequire(x) {\r\n      var res = localRequire.resolve(x);\r\n      return res === false ? {} : newRequire(res);\r\n    }\r\n\r\n    function resolve(x) {\r\n      var id = modules[name][1][x];\r\n      return id != null ? id : x;\r\n    }\r\n  }\r\n\r\n  function Module(moduleName) {\r\n    this.id = moduleName;\r\n    this.bundle = newRequire;\r\n    this.require = nodeRequire;\r\n    this.exports = {};\r\n  }\r\n\r\n  newRequire.isParcelRequire = true;\r\n  newRequire.Module = Module;\r\n  newRequire.modules = modules;\r\n  newRequire.cache = cache;\r\n  newRequire.parent = previousRequire;\r\n  newRequire.distDir = distDir;\r\n  newRequire.publicUrl = publicUrl;\r\n  newRequire.devServer = devServer;\r\n  newRequire.i = importMap;\r\n  newRequire.register = function (id, exports) {\r\n    modules[id] = [\r\n      function (require, module) {\r\n        module.exports = exports;\r\n      },\r\n      {},\r\n    ];\r\n  };\r\n\r\n  // Only insert newRequire.load when it is actually used.\r\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\r\n  // INSERT_LOAD_HERE\r\n\r\n  Object.defineProperty(newRequire, 'root', {\r\n    get: function () {\r\n      return globalObject[parcelRequireName];\r\n    },\r\n  });\r\n\r\n  globalObject[parcelRequireName] = newRequire;\r\n\r\n  for (var i = 0; i < entry.length; i++) {\r\n    newRequire(entry[i]);\r\n  }\r\n\r\n  if (mainEntry) {\r\n    // Expose entry point to Node, AMD or browser globals\r\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\r\n    var mainExports = newRequire(mainEntry);\r\n\r\n    // CommonJS\r\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\r\n      module.exports = mainExports;\r\n\r\n      // RequireJS\r\n    } else if (typeof define === 'function' && define.amd) {\r\n      define(function () {\r\n        return mainExports;\r\n      });\r\n    }\r\n  }\r\n})({\"hZYkR\":[function(require,module,exports,__globalThis) {\n/**\r\n * Renaissance Periodization Effort Management\r\n * Handles RIR (Reps In Reserve) calculations and effort progression\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"calculateTargetRIR\", ()=>calculateTargetRIR);\nparcelHelpers.export(exports, \"validateEffortLevel\", ()=>validateEffortLevel);\nparcelHelpers.export(exports, \"getEffortProgression\", ()=>getEffortProgression);\nparcelHelpers.export(exports, \"getWeeklyEffortSummary\", ()=>getWeeklyEffortSummary);\nparcelHelpers.export(exports, \"getAutoregulationAdvice\", ()=>getAutoregulationAdvice);\nparcelHelpers.export(exports, \"getScheduledRIR\", ()=>getScheduledRIR);\nparcelHelpers.export(exports, \"processWeeklyLoadAdjustments\", ()=>processWeeklyLoadAdjustments);\nparcelHelpers.export(exports, \"getLoadProgression\", ()=>getLoadProgression);\nparcelHelpers.export(exports, \"simulateWeeklyRIRFeedback\", ()=>simulateWeeklyRIRFeedback);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Weekly RIR Schedule for Mesocycle Progression\r\n * Standard RP approach: [3, 2, 1, 0] across 4-6 week mesocycle\r\n */ const RIR_SCHEDULE = {\n    4: [\n        3,\n        2,\n        1,\n        0\n    ],\n    5: [\n        3,\n        2.5,\n        2,\n        1,\n        0\n    ],\n    6: [\n        3,\n        2.5,\n        2,\n        1.5,\n        1,\n        0\n    ] // 6-week meso\n};\n/**\r\n * Calculate target RIR based on meso progression\r\n * @param {number} weekNumber - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @param {number} startRIR - Starting RIR (default 3)\r\n * @param {number} endRIR - Ending RIR (default 0.5)\r\n * @returns {Object} - RIR calculation result\r\n */ function calculateTargetRIR(weekNumber = null, mesoLength = null, startRIR = 3, endRIR = 0.5) {\n    const week = weekNumber || (0, _trainingStateJsDefault.default).weekNo;\n    const mesoLen = mesoLength || (0, _trainingStateJsDefault.default).mesoLen;\n    if (week > mesoLen) return {\n        targetRIR: startRIR,\n        warning: 'Week exceeds mesocycle length',\n        progression: 0\n    };\n    // Linear progression from start to end RIR\n    const progressionRate = (startRIR - endRIR) / (mesoLen - 1);\n    const targetRIR = startRIR - progressionRate * (week - 1);\n    const clampedRIR = Math.max(endRIR, Math.min(startRIR, targetRIR));\n    // Calculate progression percentage\n    const progression = (week - 1) / (mesoLen - 1) * 100;\n    let intensityLevel = 'moderate';\n    let advice = '';\n    if (clampedRIR >= 2.5) {\n        intensityLevel = 'low';\n        advice = 'Focus on form and mind-muscle connection';\n    } else if (clampedRIR >= 2.0) {\n        intensityLevel = 'moderate';\n        advice = 'Balanced effort - challenge without excessive fatigue';\n    } else if (clampedRIR >= 1.0) {\n        intensityLevel = 'high';\n        advice = 'High effort - monitor recovery closely';\n    } else {\n        intensityLevel = 'maximum';\n        advice = 'Maximum effort - deload approaching';\n    }\n    return {\n        targetRIR: Math.round(clampedRIR * 2) / 2,\n        intensityLevel,\n        advice,\n        progression: Math.round(progression),\n        week,\n        mesoLength: mesoLen\n    };\n}\n/**\r\n * Get scheduled RIR for specific week based on mesocycle length\r\n * @param {number} week - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @returns {number} - Target RIR for the week\r\n */ function getScheduledRIR(week, mesoLength) {\n    const schedule = RIR_SCHEDULE[mesoLength];\n    if (!schedule) {\n        // Fallback to linear progression for non-standard lengths\n        const startRIR = 3;\n        const endRIR = 0;\n        const progressionRate = (startRIR - endRIR) / (mesoLength - 1);\n        return Math.max(endRIR, startRIR - progressionRate * (week - 1));\n    }\n    // Return scheduled RIR, clamping to valid week range\n    const weekIndex = Math.min(week - 1, schedule.length - 1);\n    return schedule[weekIndex];\n}\n/**\r\n * Validate actual RIR against target\r\n * @param {number} actualRIR - Actual RIR reported\r\n * @param {number} targetRIR - Target RIR for the week\r\n * @param {number} tolerance - Acceptable deviation (default ±1)\r\n * @returns {Object} - Validation result\r\n */ function validateEffortLevel(actualRIR, targetRIR = null, tolerance = 1) {\n    const target = targetRIR || (0, _trainingStateJsDefault.default).getTargetRIR();\n    const deviation = Math.abs(actualRIR - target);\n    const isWithinTolerance = deviation <= tolerance;\n    let feedback = '';\n    let recommendation = '';\n    let urgency = 'normal';\n    if (isWithinTolerance) {\n        feedback = `On target (${actualRIR} vs ${target} RIR)`;\n        recommendation = 'Continue current effort level';\n        urgency = 'normal';\n    } else if (actualRIR > target) {\n        const difference = actualRIR - target;\n        feedback = `Too easy (${difference} RIR above target)`;\n        recommendation = difference > 2 ? 'Increase weight significantly' : 'Increase weight moderately';\n        urgency = difference > 2 ? 'high' : 'medium';\n    } else {\n        const difference = target - actualRIR;\n        feedback = `Too hard (${difference} RIR below target)`;\n        recommendation = difference > 2 ? 'Reduce weight significantly' : 'Reduce weight slightly';\n        urgency = difference > 2 ? 'high' : 'medium';\n    }\n    return {\n        actualRIR,\n        targetRIR: target,\n        deviation,\n        isWithinTolerance,\n        feedback,\n        recommendation,\n        urgency\n    };\n}\n/**\r\n * Calculate effort progression for next session\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} lastSession - Last session data\r\n * @returns {Object} - Effort progression recommendation\r\n */ function getEffortProgression(muscle, lastSession) {\n    const currentRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n    let weightRecommendation = 'maintain';\n    let rirAdjustment = 0;\n    let advice = '';\n    // Base progression on last session performance\n    if (lastSession.actualRIR < lastSession.targetRIR - 1.5) {\n        // Too hard last time\n        weightRecommendation = 'decrease';\n        rirAdjustment = 0.5;\n        advice = 'Reduce weight to hit target RIR';\n    } else if (lastSession.actualRIR > lastSession.targetRIR + 1.5) {\n        // Too easy last time\n        weightRecommendation = 'increase';\n        rirAdjustment = -0.5;\n        advice = 'Increase weight to hit target RIR';\n    } else // On target\n    if (volumeStatus === 'maximum') advice = 'Maintain weight - at volume limit';\n    else advice = 'Good effort level - continue progression';\n    // Adjust based on volume status\n    if (volumeStatus === 'maximum' && weightRecommendation === 'increase') {\n        weightRecommendation = 'maintain';\n        advice = 'At MRV - avoid adding intensity stress';\n    }\n    const projectedRIR = Math.max(0, currentRIR + rirAdjustment);\n    return {\n        muscle,\n        currentTargetRIR: currentRIR,\n        projectedRIR,\n        weightRecommendation,\n        advice,\n        volumeStatus\n    };\n}\n/**\r\n * Process weekly load adjustments based on RIR feedback\r\n * @param {Object} weeklyFeedback - Feedback data for all muscles\r\n * @returns {Object} - Load adjustment recommendations\r\n */ function processWeeklyLoadAdjustments(weeklyFeedback) {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const targetRIR = getScheduledRIR(currentWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const adjustments = {};\n    let totalMusclesAdjusted = 0;\n    Object.keys(weeklyFeedback).forEach((muscle)=>{\n        const feedback = weeklyFeedback[muscle];\n        const avgActualRIR = feedback.averageRIR || targetRIR;\n        const rirDeviation = avgActualRIR - targetRIR;\n        let loadAdjustment = 0; // Percentage change\n        let reason = '';\n        // Determine load adjustment based on RIR deviation\n        if (Math.abs(rirDeviation) <= 0.5) {\n            // On target - small progressive increase\n            loadAdjustment = 2.5; // 2.5% increase\n            reason = 'On target - progressive overload';\n        } else if (rirDeviation > 0.5) {\n            // Too easy - increase load significantly\n            if (rirDeviation > 2) {\n                loadAdjustment = 10; // 10% increase\n                reason = 'Too easy - major increase needed';\n            } else if (rirDeviation > 1) {\n                loadAdjustment = 7.5; // 7.5% increase\n                reason = 'Too easy - moderate increase';\n            } else {\n                loadAdjustment = 5; // 5% increase\n                reason = 'Slightly easy - small increase';\n            }\n        } else {\n            // Too hard - decrease load\n            if (rirDeviation < -2) {\n                loadAdjustment = -10; // 10% decrease\n                reason = 'Too hard - major decrease needed';\n            } else if (rirDeviation < -1) {\n                loadAdjustment = -5; // 5% decrease\n                reason = 'Too hard - moderate decrease';\n            } else {\n                loadAdjustment = -2.5; // 2.5% decrease\n                reason = 'Slightly hard - small decrease';\n            }\n        }\n        // Factor in performance trends\n        const performanceTrend = feedback.performanceTrend || 0; // -1, 0, 1\n        if (performanceTrend < 0) {\n            loadAdjustment -= 2.5; // Reduce load if performance declining\n            reason += ' (performance declining)';\n        } else if (performanceTrend > 0 && rirDeviation >= 0) {\n            loadAdjustment += 2.5; // Increase more if performance improving\n            reason += ' (performance improving)';\n        }\n        // Cap adjustments at ±15%\n        loadAdjustment = Math.max(-15, Math.min(15, loadAdjustment));\n        adjustments[muscle] = {\n            currentRIR: avgActualRIR,\n            targetRIR,\n            deviation: rirDeviation,\n            loadAdjustment,\n            reason,\n            urgency: Math.abs(rirDeviation) > 1.5 ? 'high' : Math.abs(rirDeviation) > 1 ? 'medium' : 'low'\n        };\n        if (Math.abs(loadAdjustment) > 2.5) totalMusclesAdjusted++;\n    });\n    return {\n        week: currentWeek,\n        targetRIR,\n        adjustments,\n        summary: {\n            totalMuscles: Object.keys(weeklyFeedback).length,\n            musclesAdjusted: totalMusclesAdjusted,\n            avgLoadChange: Object.values(adjustments).reduce((sum, adj)=>sum + adj.loadAdjustment, 0) / Object.keys(adjustments).length\n        }\n    };\n}\n/**\r\n * Generate load progression recommendations for next week\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} sessionHistory - Recent session data\r\n * @returns {Object} - Load progression recommendation\r\n */ function getLoadProgression(muscle, sessionHistory = {}) {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const nextWeek = currentWeek + 1;\n    const currentRIR = getScheduledRIR(currentWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const nextRIR = getScheduledRIR(nextWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const rirDrop = currentRIR - nextRIR;\n    const recentPerformance = sessionHistory.averageRIR || currentRIR;\n    const performanceDeviation = recentPerformance - currentRIR;\n    let loadIncrease = 0;\n    let recommendation = '';\n    if (rirDrop > 0) {\n        // RIR is dropping - need to increase intensity\n        const baseIncrease = rirDrop * 5; // ~5% per RIR drop\n        // Adjust based on recent performance\n        if (performanceDeviation > 1) {\n            // Performing too easy - can increase more aggressively\n            loadIncrease = baseIncrease + 5;\n            recommendation = `Increase load ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - currently too easy`;\n        } else if (performanceDeviation < -1) {\n            // Struggling - increase more conservatively\n            loadIncrease = baseIncrease * 0.5;\n            recommendation = `Conservative increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - struggling with current load`;\n        } else {\n            // On target - standard progression\n            loadIncrease = baseIncrease;\n            recommendation = `Standard increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\n        }\n    } else if (rirDrop === 0) {\n        // Same RIR - small progressive overload\n        loadIncrease = 2.5;\n        recommendation = `Small progressive overload ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\n    } else {\n        // RIR increasing (shouldn't happen in normal progression)\n        loadIncrease = 0;\n        recommendation = `Maintain current load for Week ${nextWeek} (RIR ${nextRIR})`;\n    }\n    // Volume status considerations\n    const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n    if (volumeStatus === 'maximum') {\n        loadIncrease *= 0.75; // Reduce load increases when at MRV\n        recommendation += ' (reduced due to MRV)';\n    }\n    return {\n        muscle,\n        currentWeek,\n        nextWeek,\n        currentRIR,\n        nextRIR,\n        rirDrop,\n        loadIncrease: Math.round(loadIncrease * 10) / 10,\n        recommendation,\n        volumeStatus\n    };\n}\n/**\r\n * Calculate autoregulation recommendations\r\n * @param {Object} sessionFeedback - Real-time session feedback\r\n * @returns {Object} - Autoregulation advice\r\n */ function getAutoregulationAdvice(sessionFeedback) {\n    const { actualRIR, plannedRIR, setNumber, totalPlannedSets, muscle } = sessionFeedback;\n    const deviation = actualRIR - plannedRIR;\n    let advice = '';\n    let action = 'continue';\n    let weightAdjustment = 0; // Percentage\n    // Early sets (first 1/3)\n    if (setNumber <= Math.ceil(totalPlannedSets / 3)) {\n        if (deviation > 1.5) {\n            advice = 'Weight too light - increase by 5-10%';\n            action = 'increase_weight';\n            weightAdjustment = 7.5;\n        } else if (deviation < -1.5) {\n            advice = 'Weight too heavy - decrease by 5-10%';\n            action = 'decrease_weight';\n            weightAdjustment = -7.5;\n        } else advice = 'Weight appropriate - continue';\n    } else if (setNumber <= Math.ceil(totalPlannedSets * 2 / 3)) {\n        if (deviation > 2) {\n            advice = 'Still too easy - increase weight';\n            action = 'increase_weight';\n            weightAdjustment = 5;\n        } else if (deviation < -2) {\n            advice = 'Too fatiguing - consider stopping early';\n            action = 'consider_stopping';\n            weightAdjustment = 0;\n        } else advice = 'Good progression - continue';\n    } else {\n        if (deviation < -1) {\n            advice = 'Very fatiguing - consider stopping to preserve recovery';\n            action = 'consider_stopping';\n        } else if (deviation > 2) {\n            advice = 'Could push harder - add 1-2 sets if recovering well';\n            action = 'consider_adding_sets';\n        } else advice = 'Appropriate fatigue for final sets';\n    }\n    return {\n        setNumber,\n        totalPlannedSets,\n        actualRIR,\n        plannedRIR,\n        deviation,\n        advice,\n        action,\n        weightAdjustment\n    };\n}\n/**\r\n * Generate weekly effort summary\r\n * @returns {Object} - Weekly effort analysis\r\n */ function getWeeklyEffortSummary() {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const mesoLength = (0, _trainingStateJsDefault.default).mesoLen;\n    const targetRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const weeklyAdvice = [];\n    // Week-specific advice\n    if (currentWeek === 1) {\n        weeklyAdvice.push('Focus on technique and mind-muscle connection');\n        weeklyAdvice.push('Establish baseline weights for the mesocycle');\n    } else if (currentWeek === mesoLength) {\n        weeklyAdvice.push('Peak intensity week - push close to failure');\n        weeklyAdvice.push('Prepare for upcoming deload');\n    } else if (currentWeek > mesoLength * 0.75) {\n        weeklyAdvice.push('High intensity phase - monitor recovery closely');\n        weeklyAdvice.push('Focus on performance over volume additions');\n    } else {\n        weeklyAdvice.push('Progressive overload phase - gradually increase demands');\n        weeklyAdvice.push('Balance volume and intensity progression');\n    }\n    return {\n        currentWeek,\n        mesoLength,\n        targetRIR,\n        weeklyAdvice,\n        phaseDescription: getPhaseDescription(currentWeek, mesoLength)\n    };\n}\n/**\r\n * Get phase description based on week\r\n * @param {number} week - Current week\r\n * @param {number} mesoLength - Total meso length\r\n * @returns {string} - Phase description\r\n */ function getPhaseDescription(week, mesoLength) {\n    const percentage = week / mesoLength * 100;\n    if (percentage <= 25) return 'Accumulation Phase - Building foundation';\n    else if (percentage <= 60) return 'Progression Phase - Steady overload';\n    else if (percentage <= 85) return 'Intensification Phase - High demands';\n    else return 'Peak Phase - Maximum effort';\n}\n/**\r\n * Simulate weekly feedback for auto-progression demo\r\n * @param {Array} muscles - List of muscle groups\r\n * @param {number} week - Current week\r\n * @returns {Object} - Simulated weekly feedback\r\n */ function simulateWeeklyRIRFeedback(muscles, week) {\n    const targetRIR = getScheduledRIR(week, (0, _trainingStateJsDefault.default).mesoLen);\n    const feedback = {};\n    muscles.forEach((muscle)=>{\n        const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n        // Simulate realistic RIR deviation based on volume status and week\n        let rirDeviation = 0;\n        if (volumeStatus === 'maximum') // At MRV - likely struggling more\n        rirDeviation = Math.random() * 1.5 - 0.5; // -0.5 to +1.0\n        else if (week <= 2) // Early weeks - usually easier\n        rirDeviation = Math.random() * 1.5 + 0.5; // +0.5 to +2.0\n        else if (week >= (0, _trainingStateJsDefault.default).mesoLen - 1) // Late weeks - getting harder\n        rirDeviation = Math.random() * 1.5 - 1.0; // -1.0 to +0.5\n        else // Middle weeks - more variable\n        rirDeviation = Math.random() * 2 - 1; // -1.0 to +1.0\n        const simulatedRIR = Math.max(0, targetRIR + rirDeviation);\n        // Generate enhanced fatigue indicators based on volume status\n        let jointAche = 0;\n        let perfChange = 0;\n        let lastLoad = 100; // Default baseline\n        let soreness = 1; // Default mild soreness\n        if (volumeStatus === 'maximum') {\n            jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\n            perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 0.95; // 5% strength drop\n            soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\n        } else if (volumeStatus === 'high') {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.8 ? -1 : Math.random() > 0.5 ? 0 : 1; // Mixed performance\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 0.98; // 2% strength drop\n            soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\n        } else {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 1.02; // 2% strength increase\n            soreness = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n        }\n        feedback[muscle] = {\n            actualRIR: simulatedRIR,\n            targetRIR,\n            averageRIR: Math.round(simulatedRIR * 10) / 10,\n            performanceTrend: week > 1 ? Math.random() > 0.7 ? Math.random() > 0.5 ? 1 : -1 : 0 : 0,\n            sessions: 2,\n            volumeStatus,\n            // Enhanced fatigue detection fields\n            soreness,\n            jointAche,\n            perfChange,\n            lastLoad: Math.round(lastLoad * 10) / 10,\n            pump: Math.min(3, Math.floor(Math.random() * 3) + 1),\n            disruption: Math.min(3, Math.floor(Math.random() * 3) + 1)\n        };\n    });\n    return feedback;\n}\n\n},{\"../core/trainingState.js\":\"e7afj\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}]},[], null, \"parcelRequire66c8\", {})\n\n//# sourceMappingURL=ProgramDesignWorkspace.c610cf48.js.map\n","/**\r\n * Renaissance Periodization Effort Management\r\n * Handles RIR (Reps In Reserve) calculations and effort progression\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Weekly RIR Schedule for Mesocycle Progression\r\n * Standard RP approach: [3, 2, 1, 0] across 4-6 week mesocycle\r\n */\r\nconst RIR_SCHEDULE = {\r\n  4: [3, 2, 1, 0],        // 4-week meso\r\n  5: [3, 2.5, 2, 1, 0],   // 5-week meso  \r\n  6: [3, 2.5, 2, 1.5, 1, 0] // 6-week meso\r\n};\r\n\r\n/**\r\n * Calculate target RIR based on meso progression\r\n * @param {number} weekNumber - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @param {number} startRIR - Starting RIR (default 3)\r\n * @param {number} endRIR - Ending RIR (default 0.5)\r\n * @returns {Object} - RIR calculation result\r\n */\r\nfunction calculateTargetRIR(weekNumber = null, mesoLength = null, startRIR = 3, endRIR = 0.5) {\r\n  const week = weekNumber || trainingState.weekNo;\r\n  const mesoLen = mesoLength || trainingState.mesoLen;\r\n  \r\n  if (week > mesoLen) {\r\n    return {\r\n      targetRIR: startRIR,\r\n      warning: 'Week exceeds mesocycle length',\r\n      progression: 0\r\n    };\r\n  }\r\n  \r\n  // Linear progression from start to end RIR\r\n  const progressionRate = (startRIR - endRIR) / (mesoLen - 1);\r\n  const targetRIR = startRIR - (progressionRate * (week - 1));\r\n  const clampedRIR = Math.max(endRIR, Math.min(startRIR, targetRIR));\r\n  \r\n  // Calculate progression percentage\r\n  const progression = ((week - 1) / (mesoLen - 1)) * 100;\r\n    let intensityLevel = 'moderate';\r\n  let advice = '';\r\n  \r\n  if (clampedRIR >= 2.5) {\r\n    intensityLevel = 'low';\r\n    advice = 'Focus on form and mind-muscle connection';\r\n  } else if (clampedRIR >= 2.0) {\r\n    intensityLevel = 'moderate';\r\n    advice = 'Balanced effort - challenge without excessive fatigue';\r\n  } else if (clampedRIR >= 1.0) {\r\n    intensityLevel = 'high';\r\n    advice = 'High effort - monitor recovery closely';\r\n  } else {\r\n    intensityLevel = 'maximum';\r\n    advice = 'Maximum effort - deload approaching';\r\n  }\r\n  \r\n  return {\r\n    targetRIR: Math.round(clampedRIR * 2) / 2, // Round to nearest 0.5\r\n    intensityLevel,\r\n    advice,\r\n    progression: Math.round(progression),\r\n    week,\r\n    mesoLength: mesoLen\r\n  };\r\n}\r\n\r\n/**\r\n * Get scheduled RIR for specific week based on mesocycle length\r\n * @param {number} week - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @returns {number} - Target RIR for the week\r\n */\r\nfunction getScheduledRIR(week, mesoLength) {\r\n  const schedule = RIR_SCHEDULE[mesoLength];\r\n  if (!schedule) {\r\n    // Fallback to linear progression for non-standard lengths\r\n    const startRIR = 3;\r\n    const endRIR = 0;\r\n    const progressionRate = (startRIR - endRIR) / (mesoLength - 1);\r\n    return Math.max(endRIR, startRIR - (progressionRate * (week - 1)));\r\n  }\r\n  \r\n  // Return scheduled RIR, clamping to valid week range\r\n  const weekIndex = Math.min(week - 1, schedule.length - 1);\r\n  return schedule[weekIndex];\r\n}\r\n\r\n/**\r\n * Validate actual RIR against target\r\n * @param {number} actualRIR - Actual RIR reported\r\n * @param {number} targetRIR - Target RIR for the week\r\n * @param {number} tolerance - Acceptable deviation (default ±1)\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateEffortLevel(actualRIR, targetRIR = null, tolerance = 1) {\r\n  const target = targetRIR || trainingState.getTargetRIR();\r\n  const deviation = Math.abs(actualRIR - target);\r\n  const isWithinTolerance = deviation <= tolerance;\r\n  \r\n  let feedback = '';\r\n  let recommendation = '';\r\n  let urgency = 'normal';\r\n  \r\n  if (isWithinTolerance) {\r\n    feedback = `On target (${actualRIR} vs ${target} RIR)`;\r\n    recommendation = 'Continue current effort level';\r\n    urgency = 'normal';\r\n  } else if (actualRIR > target) {\r\n    const difference = actualRIR - target;\r\n    feedback = `Too easy (${difference} RIR above target)`;\r\n    recommendation = difference > 2 ? 'Increase weight significantly' : 'Increase weight moderately';\r\n    urgency = difference > 2 ? 'high' : 'medium';\r\n  } else {\r\n    const difference = target - actualRIR;\r\n    feedback = `Too hard (${difference} RIR below target)`;\r\n    recommendation = difference > 2 ? 'Reduce weight significantly' : 'Reduce weight slightly';\r\n    urgency = difference > 2 ? 'high' : 'medium';\r\n  }\r\n  \r\n  return {\r\n    actualRIR,\r\n    targetRIR: target,\r\n    deviation,\r\n    isWithinTolerance,\r\n    feedback,\r\n    recommendation,\r\n    urgency\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate effort progression for next session\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} lastSession - Last session data\r\n * @returns {Object} - Effort progression recommendation\r\n */\r\nfunction getEffortProgression(muscle, lastSession) {\r\n  const currentRIR = trainingState.getTargetRIR();\r\n  const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n  \r\n  let weightRecommendation = 'maintain';\r\n  let rirAdjustment = 0;\r\n  let advice = '';\r\n  \r\n  // Base progression on last session performance\r\n  if (lastSession.actualRIR < lastSession.targetRIR - 1.5) {\r\n    // Too hard last time\r\n    weightRecommendation = 'decrease';\r\n    rirAdjustment = 0.5;\r\n    advice = 'Reduce weight to hit target RIR';\r\n  } else if (lastSession.actualRIR > lastSession.targetRIR + 1.5) {\r\n    // Too easy last time\r\n    weightRecommendation = 'increase';\r\n    rirAdjustment = -0.5;\r\n    advice = 'Increase weight to hit target RIR';\r\n  } else {\r\n    // On target\r\n    if (volumeStatus === 'maximum') {\r\n      advice = 'Maintain weight - at volume limit';\r\n    } else {\r\n      advice = 'Good effort level - continue progression';\r\n    }\r\n  }\r\n  \r\n  // Adjust based on volume status\r\n  if (volumeStatus === 'maximum' && weightRecommendation === 'increase') {\r\n    weightRecommendation = 'maintain';\r\n    advice = 'At MRV - avoid adding intensity stress';\r\n  }\r\n  \r\n  const projectedRIR = Math.max(0, currentRIR + rirAdjustment);\r\n  \r\n  return {\r\n    muscle,\r\n    currentTargetRIR: currentRIR,\r\n    projectedRIR,\r\n    weightRecommendation,\r\n    advice,\r\n    volumeStatus\r\n  };\r\n}\r\n\r\n/**\r\n * Process weekly load adjustments based on RIR feedback\r\n * @param {Object} weeklyFeedback - Feedback data for all muscles\r\n * @returns {Object} - Load adjustment recommendations\r\n */\r\nfunction processWeeklyLoadAdjustments(weeklyFeedback) {\r\n  const currentWeek = trainingState.weekNo;\r\n  const targetRIR = getScheduledRIR(currentWeek, trainingState.mesoLen);\r\n  const adjustments = {};\r\n  let totalMusclesAdjusted = 0;\r\n  \r\n  Object.keys(weeklyFeedback).forEach(muscle => {\r\n    const feedback = weeklyFeedback[muscle];\r\n    const avgActualRIR = feedback.averageRIR || targetRIR;\r\n    const rirDeviation = avgActualRIR - targetRIR;\r\n    \r\n    let loadAdjustment = 0; // Percentage change\r\n    let reason = '';\r\n    \r\n    // Determine load adjustment based on RIR deviation\r\n    if (Math.abs(rirDeviation) <= 0.5) {\r\n      // On target - small progressive increase\r\n      loadAdjustment = 2.5; // 2.5% increase\r\n      reason = 'On target - progressive overload';\r\n    } else if (rirDeviation > 0.5) {\r\n      // Too easy - increase load significantly\r\n      if (rirDeviation > 2) {\r\n        loadAdjustment = 10; // 10% increase\r\n        reason = 'Too easy - major increase needed';\r\n      } else if (rirDeviation > 1) {\r\n        loadAdjustment = 7.5; // 7.5% increase\r\n        reason = 'Too easy - moderate increase';\r\n      } else {\r\n        loadAdjustment = 5; // 5% increase\r\n        reason = 'Slightly easy - small increase';\r\n      }\r\n    } else {\r\n      // Too hard - decrease load\r\n      if (rirDeviation < -2) {\r\n        loadAdjustment = -10; // 10% decrease\r\n        reason = 'Too hard - major decrease needed';\r\n      } else if (rirDeviation < -1) {\r\n        loadAdjustment = -5; // 5% decrease\r\n        reason = 'Too hard - moderate decrease';\r\n      } else {\r\n        loadAdjustment = -2.5; // 2.5% decrease\r\n        reason = 'Slightly hard - small decrease';\r\n      }\r\n    }\r\n    \r\n    // Factor in performance trends\r\n    const performanceTrend = feedback.performanceTrend || 0; // -1, 0, 1\r\n    if (performanceTrend < 0) {\r\n      loadAdjustment -= 2.5; // Reduce load if performance declining\r\n      reason += ' (performance declining)';\r\n    } else if (performanceTrend > 0 && rirDeviation >= 0) {\r\n      loadAdjustment += 2.5; // Increase more if performance improving\r\n      reason += ' (performance improving)';\r\n    }\r\n    \r\n    // Cap adjustments at ±15%\r\n    loadAdjustment = Math.max(-15, Math.min(15, loadAdjustment));\r\n    \r\n    adjustments[muscle] = {\r\n      currentRIR: avgActualRIR,\r\n      targetRIR,\r\n      deviation: rirDeviation,\r\n      loadAdjustment,\r\n      reason,\r\n      urgency: Math.abs(rirDeviation) > 1.5 ? 'high' : \r\n               Math.abs(rirDeviation) > 1 ? 'medium' : 'low'\r\n    };\r\n    \r\n    if (Math.abs(loadAdjustment) > 2.5) {\r\n      totalMusclesAdjusted++;\r\n    }\r\n  });\r\n  \r\n  return {\r\n    week: currentWeek,\r\n    targetRIR,\r\n    adjustments,\r\n    summary: {\r\n      totalMuscles: Object.keys(weeklyFeedback).length,\r\n      musclesAdjusted: totalMusclesAdjusted,\r\n      avgLoadChange: Object.values(adjustments).reduce((sum, adj) => sum + adj.loadAdjustment, 0) / Object.keys(adjustments).length\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Generate load progression recommendations for next week\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} sessionHistory - Recent session data\r\n * @returns {Object} - Load progression recommendation\r\n */\r\nfunction getLoadProgression(muscle, sessionHistory = {}) {\r\n  const currentWeek = trainingState.weekNo;\r\n  const nextWeek = currentWeek + 1;\r\n  const currentRIR = getScheduledRIR(currentWeek, trainingState.mesoLen);\r\n  const nextRIR = getScheduledRIR(nextWeek, trainingState.mesoLen);\r\n  \r\n  const rirDrop = currentRIR - nextRIR;\r\n  const recentPerformance = sessionHistory.averageRIR || currentRIR;\r\n  const performanceDeviation = recentPerformance - currentRIR;\r\n  \r\n  let loadIncrease = 0;\r\n  let recommendation = '';\r\n  \r\n  if (rirDrop > 0) {\r\n    // RIR is dropping - need to increase intensity\r\n    const baseIncrease = rirDrop * 5; // ~5% per RIR drop\r\n    \r\n    // Adjust based on recent performance\r\n    if (performanceDeviation > 1) {\r\n      // Performing too easy - can increase more aggressively\r\n      loadIncrease = baseIncrease + 5;\r\n      recommendation = `Increase load ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - currently too easy`;\r\n    } else if (performanceDeviation < -1) {\r\n      // Struggling - increase more conservatively\r\n      loadIncrease = baseIncrease * 0.5;\r\n      recommendation = `Conservative increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - struggling with current load`;\r\n    } else {\r\n      // On target - standard progression\r\n      loadIncrease = baseIncrease;\r\n      recommendation = `Standard increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\r\n    }\r\n  } else if (rirDrop === 0) {\r\n    // Same RIR - small progressive overload\r\n    loadIncrease = 2.5;\r\n    recommendation = `Small progressive overload ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\r\n  } else {\r\n    // RIR increasing (shouldn't happen in normal progression)\r\n    loadIncrease = 0;\r\n    recommendation = `Maintain current load for Week ${nextWeek} (RIR ${nextRIR})`;\r\n  }\r\n  \r\n  // Volume status considerations\r\n  const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n  if (volumeStatus === 'maximum') {\r\n    loadIncrease *= 0.75; // Reduce load increases when at MRV\r\n    recommendation += ' (reduced due to MRV)';\r\n  }\r\n  \r\n  return {\r\n    muscle,\r\n    currentWeek,\r\n    nextWeek,\r\n    currentRIR,\r\n    nextRIR,\r\n    rirDrop,\r\n    loadIncrease: Math.round(loadIncrease * 10) / 10, // Round to 1 decimal\r\n    recommendation,\r\n    volumeStatus\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate autoregulation recommendations\r\n * @param {Object} sessionFeedback - Real-time session feedback\r\n * @returns {Object} - Autoregulation advice\r\n */\r\nfunction getAutoregulationAdvice(sessionFeedback) {\r\n  const { actualRIR, plannedRIR, setNumber, totalPlannedSets, muscle } = sessionFeedback;\r\n  const deviation = actualRIR - plannedRIR;\r\n  \r\n  let advice = '';\r\n  let action = 'continue';\r\n  let weightAdjustment = 0; // Percentage\r\n  \r\n  // Early sets (first 1/3)\r\n  if (setNumber <= Math.ceil(totalPlannedSets / 3)) {\r\n    if (deviation > 1.5) {\r\n      advice = 'Weight too light - increase by 5-10%';\r\n      action = 'increase_weight';\r\n      weightAdjustment = 7.5;\r\n    } else if (deviation < -1.5) {\r\n      advice = 'Weight too heavy - decrease by 5-10%';\r\n      action = 'decrease_weight';\r\n      weightAdjustment = -7.5;\r\n    } else {\r\n      advice = 'Weight appropriate - continue';\r\n    }\r\n  }\r\n  // Middle sets (middle 1/3)\r\n  else if (setNumber <= Math.ceil(totalPlannedSets * 2 / 3)) {\r\n    if (deviation > 2) {\r\n      advice = 'Still too easy - increase weight';\r\n      action = 'increase_weight';\r\n      weightAdjustment = 5;\r\n    } else if (deviation < -2) {\r\n      advice = 'Too fatiguing - consider stopping early';\r\n      action = 'consider_stopping';\r\n      weightAdjustment = 0;\r\n    } else {\r\n      advice = 'Good progression - continue';\r\n    }\r\n  }\r\n  // Final sets (last 1/3)\r\n  else {\r\n    if (deviation < -1) {\r\n      advice = 'Very fatiguing - consider stopping to preserve recovery';\r\n      action = 'consider_stopping';\r\n    } else if (deviation > 2) {\r\n      advice = 'Could push harder - add 1-2 sets if recovering well';\r\n      action = 'consider_adding_sets';\r\n    } else {\r\n      advice = 'Appropriate fatigue for final sets';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    setNumber,\r\n    totalPlannedSets,\r\n    actualRIR,\r\n    plannedRIR,\r\n    deviation,\r\n    advice,\r\n    action,\r\n    weightAdjustment\r\n  };\r\n}\r\n\r\n/**\r\n * Generate weekly effort summary\r\n * @returns {Object} - Weekly effort analysis\r\n */\r\nfunction getWeeklyEffortSummary() {\r\n  const currentWeek = trainingState.weekNo;\r\n  const mesoLength = trainingState.mesoLen;\r\n  const targetRIR = trainingState.getTargetRIR();\r\n  \r\n  const weeklyAdvice = [];\r\n  \r\n  // Week-specific advice\r\n  if (currentWeek === 1) {\r\n    weeklyAdvice.push('Focus on technique and mind-muscle connection');\r\n    weeklyAdvice.push('Establish baseline weights for the mesocycle');\r\n  } else if (currentWeek === mesoLength) {\r\n    weeklyAdvice.push('Peak intensity week - push close to failure');\r\n    weeklyAdvice.push('Prepare for upcoming deload');\r\n  } else if (currentWeek > mesoLength * 0.75) {\r\n    weeklyAdvice.push('High intensity phase - monitor recovery closely');\r\n    weeklyAdvice.push('Focus on performance over volume additions');\r\n  } else {\r\n    weeklyAdvice.push('Progressive overload phase - gradually increase demands');\r\n    weeklyAdvice.push('Balance volume and intensity progression');\r\n  }\r\n  \r\n  return {\r\n    currentWeek,\r\n    mesoLength,\r\n    targetRIR,\r\n    weeklyAdvice,\r\n    phaseDescription: getPhaseDescription(currentWeek, mesoLength)\r\n  };\r\n}\r\n\r\n/**\r\n * Get phase description based on week\r\n * @param {number} week - Current week\r\n * @param {number} mesoLength - Total meso length\r\n * @returns {string} - Phase description\r\n */\r\nfunction getPhaseDescription(week, mesoLength) {\r\n  const percentage = (week / mesoLength) * 100;\r\n  \r\n  if (percentage <= 25) {\r\n    return 'Accumulation Phase - Building foundation';\r\n  } else if (percentage <= 60) {\r\n    return 'Progression Phase - Steady overload';\r\n  } else if (percentage <= 85) {\r\n    return 'Intensification Phase - High demands';\r\n  } else {\r\n    return 'Peak Phase - Maximum effort';\r\n  }\r\n}\r\n\r\n/**\r\n * Simulate weekly feedback for auto-progression demo\r\n * @param {Array} muscles - List of muscle groups\r\n * @param {number} week - Current week\r\n * @returns {Object} - Simulated weekly feedback\r\n */\r\nfunction simulateWeeklyRIRFeedback(muscles, week) {\r\n  const targetRIR = getScheduledRIR(week, trainingState.mesoLen);\r\n  const feedback = {};\r\n  \r\n  muscles.forEach(muscle => {\r\n    const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n    \r\n    // Simulate realistic RIR deviation based on volume status and week\r\n    let rirDeviation = 0;\r\n    \r\n    if (volumeStatus === 'maximum') {\r\n      // At MRV - likely struggling more\r\n      rirDeviation = Math.random() * 1.5 - 0.5; // -0.5 to +1.0\r\n    } else if (week <= 2) {\r\n      // Early weeks - usually easier\r\n      rirDeviation = Math.random() * 1.5 + 0.5; // +0.5 to +2.0\r\n    } else if (week >= trainingState.mesoLen - 1) {\r\n      // Late weeks - getting harder\r\n      rirDeviation = Math.random() * 1.5 - 1.0; // -1.0 to +0.5\r\n    } else {\r\n      // Middle weeks - more variable\r\n      rirDeviation = Math.random() * 2 - 1; // -1.0 to +1.0\r\n    }\r\n      const simulatedRIR = Math.max(0, targetRIR + rirDeviation);\r\n    \r\n    // Generate enhanced fatigue indicators based on volume status\r\n    let jointAche = 0;\r\n    let perfChange = 0;\r\n    let lastLoad = 100; // Default baseline\r\n    let soreness = 1; // Default mild soreness\r\n    \r\n    if (volumeStatus === 'maximum') {\r\n      jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\r\n      perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\r\n      lastLoad = trainingState.baselineStrength[muscle] * 0.95; // 5% strength drop\r\n      soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\r\n    } else if (volumeStatus === 'high') {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.8 ? -1 : (Math.random() > 0.5 ? 0 : 1); // Mixed performance\r\n      lastLoad = trainingState.baselineStrength[muscle] * 0.98; // 2% strength drop\r\n      soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\r\n    } else {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\r\n      lastLoad = trainingState.baselineStrength[muscle] * 1.02; // 2% strength increase\r\n      soreness = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n    }\r\n    \r\n    feedback[muscle] = {\r\n      actualRIR: simulatedRIR,\r\n      targetRIR,\r\n      averageRIR: Math.round(simulatedRIR * 10) / 10,\r\n      performanceTrend: week > 1 ? (Math.random() > 0.7 ? (Math.random() > 0.5 ? 1 : -1) : 0) : 0,\r\n      sessions: 2, // Assume 2 sessions per week\r\n      volumeStatus,\r\n      // Enhanced fatigue detection fields\r\n      soreness,\r\n      jointAche,\r\n      perfChange,\r\n      lastLoad: Math.round(lastLoad * 10) / 10,\r\n      pump: Math.min(3, Math.floor(Math.random() * 3) + 1),\r\n      disruption: Math.min(3, Math.floor(Math.random() * 3) + 1)\r\n    };\r\n  });\r\n  \r\n  return feedback;\r\n}\r\n\r\nexport {\r\n  calculateTargetRIR,\r\n  validateEffortLevel,\r\n  getEffortProgression,\r\n  getWeeklyEffortSummary,\r\n  getAutoregulationAdvice,\r\n  getScheduledRIR,\r\n  processWeeklyLoadAdjustments,\r\n  getLoadProgression,\r\n  simulateWeeklyRIRFeedback\r\n};\r\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","__globalThis","parcelHelpers","defineInteropFlag","export","calculateTargetRIR","validateEffortLevel","getEffortProgression","getWeeklyEffortSummary","getAutoregulationAdvice","getScheduledRIR","processWeeklyLoadAdjustments","getLoadProgression","simulateWeeklyRIRFeedback","_trainingStateJs","_trainingStateJsDefault","interopDefault","RIR_SCHEDULE","weekNumber","mesoLength","startRIR","endRIR","week","default","weekNo","mesoLen","targetRIR","warning","progression","clampedRIR","Math","max","min","progressionRate","intensityLevel","advice","round","schedule","weekIndex","actualRIR","tolerance","target","getTargetRIR","deviation","abs","isWithinTolerance","feedback","recommendation","urgency","difference","muscle","lastSession","currentRIR","volumeStatus","getVolumeStatus","weightRecommendation","rirAdjustment","projectedRIR","currentTargetRIR","weeklyFeedback","currentWeek","adjustments","totalMusclesAdjusted","keys","forEach","avgActualRIR","averageRIR","rirDeviation","loadAdjustment","reason","performanceTrend","summary","totalMuscles","musclesAdjusted","avgLoadChange","values","reduce","sum","adj","sessionHistory","nextWeek","nextRIR","rirDrop","performanceDeviation","recentPerformance","loadIncrease","baseIncrease","toFixed","sessionFeedback","plannedRIR","setNumber","totalPlannedSets","action","weightAdjustment","ceil","weeklyAdvice","push","phaseDescription","getPhaseDescription","percentage","muscles","simulatedRIR","random","jointAche","perfChange","lastLoad","soreness","floor","baselineStrength","sessions","pump","disruption"],"version":3,"file":"ProgramDesignWorkspace.c610cf48.js.map"}