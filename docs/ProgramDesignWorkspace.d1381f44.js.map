{"mappings":"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","sources":["<anon>","js/ui/globals.js"],"sourcesContent":["import \"./ProgramDesignWorkspace.c2156b3c.js\";\n\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire66c8\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire66c8\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\n/*  Maps module functions onto window so legacy inline onclick=\"\" handlers keep working */ \nvar $e8wst = parcelRequire(\"e8wst\");\n\nvar $jlKM8 = parcelRequire(\"jlKM8\");\n\nvar $9Ev1P = parcelRequire(\"9Ev1P\");\n\nvar $76QZC = parcelRequire(\"76QZC\");\n\nvar $b3qqF = parcelRequire(\"b3qqF\");\n\nvar $gBc5V = parcelRequire(\"gBc5V\");\n/* ----- expose key objects ----- */ window.trainingState = (0, $gBc5V.default);\n/* ----- expose chart functions ----- */ window.updateChart = (0, $e8wst.updateChart);\nwindow.resetWeeklyData = (0, $e8wst.resetChart);\nwindow.showVolumeLandmarks = (0, $e8wst.addVolumeLandmarks);\nwindow.exportSummary = (0, $e8wst.exportChartImage);\n/* ----- expose section toggle (basic implementation) ----- */ window.toggleSection = function(sectionId) {\n    const content = document.getElementById(sectionId + '-content');\n    const banner = content.previousElementSibling;\n    const icon = banner.querySelector('.expand-icon');\n    if (content.classList.contains('expanded')) {\n        content.classList.remove('expanded');\n        banner.classList.remove('expanded');\n        icon.style.transform = 'rotate(0deg)';\n    } else {\n        content.classList.add('expanded');\n        banner.classList.add('expanded');\n        icon.style.transform = 'rotate(180deg)';\n    }\n};\n/* ----- expose RP algorithm functions ----- */ window.scoreStimulus = (0, $jlKM8.scoreStimulus);\nwindow.setProgressionAlgorithm = (0, $jlKM8.setProgressionAlgorithm);\nwindow.getVolumeProgression = (0, $jlKM8.getVolumeProgression);\nwindow.analyzeDeloadNeed = (0, $jlKM8.analyzeDeloadNeed);\nwindow.calculateTargetRIR = (0, $9Ev1P.calculateTargetRIR);\nwindow.validateEffortLevel = (0, $9Ev1P.validateEffortLevel);\nwindow.analyzeFrequency = (0, $76QZC.analyzeFrequency);\nwindow.calculateOptimalFrequency = (0, $76QZC.calculateOptimalFrequency);\nwindow.validateLoad = (0, $b3qqF.validateLoad);\nwindow.validateSets = (0, $b3qqF.validateSets);\nwindow.validateMesocycleLength = (0, $b3qqF.validateMesocycleLength);\n/* ----- main UI handlers for buttons ----- */ window.submitFeedback = function() {\n    const muscle = document.getElementById('muscleSelect').value;\n    const mmc = parseInt(document.getElementById('mmc').value, 10);\n    const pump = parseInt(document.getElementById('pump').value, 10);\n    const disruption = parseInt(document.getElementById('dis').value, 10);\n    const soreness = parseInt(document.getElementById('sore').value, 10);\n    const actualRIR = document.getElementById('actualRIR').value;\n    const perfRadio = document.querySelector('input[name=\"perf\"]:checked');\n    const performance = perfRadio ? parseInt(perfRadio.value, 10) : 2;\n    // Validate inputs\n    if (!muscle || isNaN(mmc) || isNaN(pump) || isNaN(disruption)) {\n        alert('Please fill in all required fields');\n        return;\n    }\n    // Process with RP algorithms\n    const stimulusResult = (0, $jlKM8.scoreStimulus)({\n        mmc: mmc,\n        pump: pump,\n        disruption: disruption\n    });\n    const progressionResult = (0, $jlKM8.setProgressionAlgorithm)(soreness, performance);\n    const volumeProgression = (0, $jlKM8.getVolumeProgression)(muscle, {\n        stimulus: {\n            mmc: mmc,\n            pump: pump,\n            disruption: disruption\n        },\n        soreness: soreness,\n        performance: performance,\n        hasIllness: false\n    });\n    // Validate RIR if provided\n    let rirValidation = null;\n    if (actualRIR) rirValidation = (0, $9Ev1P.validateEffortLevel)(parseFloat(actualRIR));\n    // Apply changes\n    if (progressionResult.setChange !== -99) (0, $gBc5V.default).addSets(muscle, progressionResult.setChange);\n    // Display results\n    const output = document.getElementById('mevOut');\n    let html = `\n    <div class=\"feedback-results\">\n      <div class=\"main-recommendation\">\n        <h4>${muscle} Recommendation</h4>\n        <p class=\"advice\">${volumeProgression.advice}</p>\n        <p class=\"sets-info\">\n          ${volumeProgression.currentSets} \\u{2192} ${volumeProgression.projectedSets} sets\n          ${volumeProgression.setChange !== 0 ? `(${volumeProgression.setChange > 0 ? '+' : ''}${volumeProgression.setChange})` : ''}\n        </p>\n      </div>\n      \n      <div class=\"algorithm-details\">\n        <div>\n          <strong>Stimulus:</strong> ${stimulusResult.score}/9 \n          <span class=\"stimulus-${stimulusResult.action}\">(${stimulusResult.action.replace('_', ' ')})</span>\n        </div>\n        <div>\n          <strong>Volume Status:</strong> ${volumeProgression.volumeStatus}\n        </div>\n        <div>\n          <strong>RP Progression:</strong> ${progressionResult.advice}\n        </div>\n      </div>\n    </div>\n  `;\n    if (rirValidation) html += `\n      <div class=\"rir-feedback ${rirValidation.urgency}\">\n        <strong>RIR Check:</strong> ${rirValidation.feedback}<br>\n        <em>${rirValidation.recommendation}</em>\n      </div>\n    `;\n    if (volumeProgression.deloadRecommended) html += `\n      <div class=\"deload-warning\">\n        \\u{26A0}\\u{FE0F} <strong>Deload Recommended</strong>\n      </div>\n    `;\n    output.innerHTML = html;\n    output.className = 'result success active';\n    (0, $e8wst.updateChart)();\n};\nwindow.analyzeDeload = function() {\n    const halfMuscles = document.getElementById('halfMuscles').checked;\n    const mrvBreach = document.getElementById('mrvBreach').checked;\n    const illness = document.getElementById('illness').checked;\n    const lowMotivation = document.getElementById('lowMotivation').checked;\n    const analysis = (0, $jlKM8.analyzeDeloadNeed)();\n    // Override with manual inputs\n    if (halfMuscles) analysis.reasons.push('Most muscles need recovery (manual check)');\n    if (mrvBreach) analysis.reasons.push('Hit MRV twice consecutively (manual check)');\n    if (illness) analysis.reasons.push('Illness/injury present');\n    if (lowMotivation) analysis.reasons.push('Low motivation levels');\n    const shouldDeload = analysis.shouldDeload || halfMuscles || mrvBreach || illness || lowMotivation;\n    const output = document.getElementById('deloadOut');\n    if (shouldDeload) {\n        output.innerHTML = `\n      <strong>Deload Recommended</strong><br>\n      Reasons: ${analysis.reasons.join(', ')}<br>\n      <em>Take 1 week at 50% volume + 25-50% load reduction</em>\n    `;\n        output.className = 'result warning active';\n        // Offer to start deload\n        setTimeout(()=>{\n            if (confirm('Start deload phase now? This will reduce all muscle volumes to 50% of MEV.')) {\n                (0, $gBc5V.default).startDeload();\n                (0, $e8wst.updateChart)();\n            }\n        }, 1000);\n    } else {\n        output.innerHTML = 'No deload needed - continue current program';\n        output.className = 'result success active';\n    }\n};\nwindow.analyzeFrequency = function() {\n    const soreDays = parseInt(document.getElementById('soreDays').value, 10);\n    const sessionGap = parseInt(document.getElementById('sessionGap').value, 10);\n    const trainingAge = document.getElementById('trainingAge').value;\n    const muscle = document.getElementById('muscleSelect').value;\n    const analysis = (0, $76QZC.analyzeFrequency)(soreDays, sessionGap, muscle);\n    const optimal = (0, $76QZC.calculateOptimalFrequency)(muscle, {\n        trainingAge: trainingAge,\n        currentVolume: (0, $gBc5V.default).currentWeekSets[muscle]\n    });\n    const output = document.getElementById('freqOut');\n    output.innerHTML = `\n    <strong>${analysis.recommendation}</strong><br>\n    Current: ${sessionGap} days between sessions<br>\n    Recovery: ${soreDays} days<br>\n    Optimal frequency: ${optimal.recommendedFrequency}x/week (${optimal.setsPerSession} sets/session)\n  `;\n    const type = analysis.urgency === 'high' ? 'warning' : analysis.urgency === 'medium' ? 'warning' : 'success';\n    output.className = `result ${type} active`;\n};\nwindow.saveLandmarks = function() {\n    const muscle = document.getElementById('landmarkMuscle').value;\n    const mv = parseInt(document.getElementById('mv').value, 10);\n    const mev = parseInt(document.getElementById('mev').value, 10);\n    const mav = parseInt(document.getElementById('mav').value, 10);\n    const mrv = parseInt(document.getElementById('mrv').value, 10);\n    // Validate relationships\n    if (mv > mev || mev > mav || mav > mrv) {\n        alert(\"Invalid landmark relationship (MV \\u2264 MEV \\u2264 MAV \\u2264 MRV)\");\n        return;\n    }\n    (0, $gBc5V.default).updateVolumeLandmarks(muscle, {\n        MV: mv,\n        MEV: mev,\n        MAV: mav,\n        MRV: mrv\n    });\n    (0, $e8wst.updateChart)();\n    const output = document.getElementById('volumeOut');\n    output.innerHTML = `Landmarks saved for ${muscle}: MV:${mv}, MEV:${mev}, MAV:${mav}, MRV:${mrv}`;\n    output.className = 'result success active';\n};\nwindow.applyVolumePreset = function(level) {\n    const muscle = document.getElementById('landmarkMuscle').value;\n    const multipliers = {\n        beginner: 0.8,\n        intermediate: 1.0,\n        advanced: 1.2\n    };\n    const mult = multipliers[level];\n    const baseLandmarks = (0, $gBc5V.default).volumeLandmarks[muscle];\n    document.getElementById('mv').value = Math.round(baseLandmarks.MV * mult);\n    document.getElementById('mev').value = Math.round(baseLandmarks.MEV * mult);\n    document.getElementById('mav').value = Math.round(baseLandmarks.MAV * mult);\n    document.getElementById('mrv').value = Math.round(baseLandmarks.MRV * mult);\n};\nwindow.setupMeso = function() {\n    const length = parseInt(document.getElementById('mesoLength').value, 10);\n    const week = parseInt(document.getElementById('currentWeekNum').value, 10);\n    const goal = document.getElementById('trainingGoal').value;\n    const validation = (0, $b3qqF.validateMesocycleLength)(length, goal);\n    if (!validation.isValid) {\n        alert(validation.warning);\n        return;\n    }\n    (0, $gBc5V.default).mesoLen = length;\n    (0, $gBc5V.default).weekNo = week;\n    (0, $gBc5V.default).saveState();\n    const output = document.getElementById('mesoOut');\n    output.innerHTML = `\n    Mesocycle configured: ${length} weeks for ${goal}<br>\n    Currently week ${week} (Target RIR: ${(0, $gBc5V.default).getTargetRIR().toFixed(1)})<br>\n    ${validation.recommendation}\n  `;\n    output.className = 'result success active';\n};\n\n\n//# sourceMappingURL=ProgramDesignWorkspace.d1381f44.js.map\n","/*  Maps module functions onto window so legacy inline onclick=\"\" handlers keep working */\r\n\r\nimport { \r\n  initChart, \r\n  updateChart, \r\n  addVolumeLandmarks, \r\n  resetChart, \r\n  exportChartImage \r\n} from './chartManager.js';\r\n\r\nimport { \r\n  scoreStimulus, \r\n  setProgressionAlgorithm, \r\n  getVolumeProgression,\r\n  analyzeDeloadNeed \r\n} from '../algorithms/volume.js';\r\n\r\nimport { \r\n  calculateTargetRIR, \r\n  validateEffortLevel \r\n} from '../algorithms/effort.js';\r\n\r\nimport { \r\n  analyzeFrequency, \r\n  calculateOptimalFrequency \r\n} from '../algorithms/fatigue.js';\r\n\r\nimport { \r\n  validateLoad, \r\n  validateSets, \r\n  validateMesocycleLength \r\n} from '../algorithms/validation.js';\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/* ----- expose key objects ----- */\r\nwindow.trainingState = trainingState;\r\n\r\n/* ----- expose chart functions ----- */\r\nwindow.updateChart = updateChart;\r\nwindow.resetWeeklyData = resetChart;\r\nwindow.showVolumeLandmarks = addVolumeLandmarks;\r\nwindow.exportSummary = exportChartImage;\r\n\r\n/* ----- expose section toggle (basic implementation) ----- */\r\nwindow.toggleSection = function(sectionId) {\r\n  const content = document.getElementById(sectionId + '-content');\r\n  const banner = content.previousElementSibling;\r\n  const icon = banner.querySelector('.expand-icon');\r\n  \r\n  if (content.classList.contains('expanded')) {\r\n    content.classList.remove('expanded');\r\n    banner.classList.remove('expanded');\r\n    icon.style.transform = 'rotate(0deg)';\r\n  } else {\r\n    content.classList.add('expanded');\r\n    banner.classList.add('expanded');\r\n    icon.style.transform = 'rotate(180deg)';\r\n  }\r\n};\r\n\r\n/* ----- expose RP algorithm functions ----- */\r\nwindow.scoreStimulus = scoreStimulus;\r\nwindow.setProgressionAlgorithm = setProgressionAlgorithm;\r\nwindow.getVolumeProgression = getVolumeProgression;\r\nwindow.analyzeDeloadNeed = analyzeDeloadNeed;\r\nwindow.calculateTargetRIR = calculateTargetRIR;\r\nwindow.validateEffortLevel = validateEffortLevel;\r\nwindow.analyzeFrequency = analyzeFrequency;\r\nwindow.calculateOptimalFrequency = calculateOptimalFrequency;\r\nwindow.validateLoad = validateLoad;\r\nwindow.validateSets = validateSets;\r\nwindow.validateMesocycleLength = validateMesocycleLength;\r\n\r\n/* ----- main UI handlers for buttons ----- */\r\nwindow.submitFeedback = function() {\r\n  const muscle = document.getElementById('muscleSelect').value;\r\n  const mmc = parseInt(document.getElementById('mmc').value, 10);\r\n  const pump = parseInt(document.getElementById('pump').value, 10);\r\n  const disruption = parseInt(document.getElementById('dis').value, 10);\r\n  const soreness = parseInt(document.getElementById('sore').value, 10);\r\n  const actualRIR = document.getElementById('actualRIR').value;\r\n  \r\n  const perfRadio = document.querySelector('input[name=\"perf\"]:checked');\r\n  const performance = perfRadio ? parseInt(perfRadio.value, 10) : 2;\r\n  \r\n  // Validate inputs\r\n  if (!muscle || isNaN(mmc) || isNaN(pump) || isNaN(disruption)) {\r\n    alert('Please fill in all required fields');\r\n    return;\r\n  }\r\n  \r\n  // Process with RP algorithms\r\n  const stimulusResult = scoreStimulus({ mmc, pump, disruption });\r\n  const progressionResult = setProgressionAlgorithm(soreness, performance);\r\n  \r\n  const volumeProgression = getVolumeProgression(muscle, {\r\n    stimulus: { mmc, pump, disruption },\r\n    soreness,\r\n    performance,\r\n    hasIllness: false\r\n  });\r\n  \r\n  // Validate RIR if provided\r\n  let rirValidation = null;\r\n  if (actualRIR) {\r\n    rirValidation = validateEffortLevel(parseFloat(actualRIR));\r\n  }\r\n  \r\n  // Apply changes\r\n  if (progressionResult.setChange !== -99) {\r\n    trainingState.addSets(muscle, progressionResult.setChange);\r\n  }\r\n  \r\n  // Display results\r\n  const output = document.getElementById('mevOut');\r\n  let html = `\r\n    <div class=\"feedback-results\">\r\n      <div class=\"main-recommendation\">\r\n        <h4>${muscle} Recommendation</h4>\r\n        <p class=\"advice\">${volumeProgression.advice}</p>\r\n        <p class=\"sets-info\">\r\n          ${volumeProgression.currentSets} → ${volumeProgression.projectedSets} sets\r\n          ${volumeProgression.setChange !== 0 ? `(${volumeProgression.setChange > 0 ? '+' : ''}${volumeProgression.setChange})` : ''}\r\n        </p>\r\n      </div>\r\n      \r\n      <div class=\"algorithm-details\">\r\n        <div>\r\n          <strong>Stimulus:</strong> ${stimulusResult.score}/9 \r\n          <span class=\"stimulus-${stimulusResult.action}\">(${stimulusResult.action.replace('_', ' ')})</span>\r\n        </div>\r\n        <div>\r\n          <strong>Volume Status:</strong> ${volumeProgression.volumeStatus}\r\n        </div>\r\n        <div>\r\n          <strong>RP Progression:</strong> ${progressionResult.advice}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  if (rirValidation) {\r\n    html += `\r\n      <div class=\"rir-feedback ${rirValidation.urgency}\">\r\n        <strong>RIR Check:</strong> ${rirValidation.feedback}<br>\r\n        <em>${rirValidation.recommendation}</em>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  if (volumeProgression.deloadRecommended) {\r\n    html += `\r\n      <div class=\"deload-warning\">\r\n        ⚠️ <strong>Deload Recommended</strong>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  output.innerHTML = html;\r\n  output.className = 'result success active';\r\n  \r\n  updateChart();\r\n};\r\n\r\nwindow.analyzeDeload = function() {\r\n  const halfMuscles = document.getElementById('halfMuscles').checked;\r\n  const mrvBreach = document.getElementById('mrvBreach').checked;\r\n  const illness = document.getElementById('illness').checked;\r\n  const lowMotivation = document.getElementById('lowMotivation').checked;\r\n  \r\n  const analysis = analyzeDeloadNeed();\r\n  \r\n  // Override with manual inputs\r\n  if (halfMuscles) analysis.reasons.push('Most muscles need recovery (manual check)');\r\n  if (mrvBreach) analysis.reasons.push('Hit MRV twice consecutively (manual check)');\r\n  if (illness) analysis.reasons.push('Illness/injury present');\r\n  if (lowMotivation) analysis.reasons.push('Low motivation levels');\r\n  \r\n  const shouldDeload = analysis.shouldDeload || halfMuscles || mrvBreach || illness || lowMotivation;\r\n  \r\n  const output = document.getElementById('deloadOut');\r\n  \r\n  if (shouldDeload) {\r\n    output.innerHTML = `\r\n      <strong>Deload Recommended</strong><br>\r\n      Reasons: ${analysis.reasons.join(', ')}<br>\r\n      <em>Take 1 week at 50% volume + 25-50% load reduction</em>\r\n    `;\r\n    output.className = 'result warning active';\r\n    \r\n    // Offer to start deload\r\n    setTimeout(() => {\r\n      if (confirm('Start deload phase now? This will reduce all muscle volumes to 50% of MEV.')) {\r\n        trainingState.startDeload();\r\n        updateChart();\r\n      }\r\n    }, 1000);\r\n  } else {\r\n    output.innerHTML = 'No deload needed - continue current program';\r\n    output.className = 'result success active';\r\n  }\r\n};\r\n\r\nwindow.analyzeFrequency = function() {\r\n  const soreDays = parseInt(document.getElementById('soreDays').value, 10);\r\n  const sessionGap = parseInt(document.getElementById('sessionGap').value, 10);\r\n  const trainingAge = document.getElementById('trainingAge').value;\r\n  const muscle = document.getElementById('muscleSelect').value;\r\n  \r\n  const analysis = analyzeFrequency(soreDays, sessionGap, muscle);\r\n  const optimal = calculateOptimalFrequency(muscle, {\r\n    trainingAge,\r\n    currentVolume: trainingState.currentWeekSets[muscle]\r\n  });\r\n  \r\n  const output = document.getElementById('freqOut');\r\n  output.innerHTML = `\r\n    <strong>${analysis.recommendation}</strong><br>\r\n    Current: ${sessionGap} days between sessions<br>\r\n    Recovery: ${soreDays} days<br>\r\n    Optimal frequency: ${optimal.recommendedFrequency}x/week (${optimal.setsPerSession} sets/session)\r\n  `;\r\n  \r\n  const type = analysis.urgency === 'high' ? 'warning' : \r\n               analysis.urgency === 'medium' ? 'warning' : 'success';\r\n  output.className = `result ${type} active`;\r\n};\r\n\r\nwindow.saveLandmarks = function() {\r\n  const muscle = document.getElementById('landmarkMuscle').value;\r\n  const mv = parseInt(document.getElementById('mv').value, 10);\r\n  const mev = parseInt(document.getElementById('mev').value, 10);\r\n  const mav = parseInt(document.getElementById('mav').value, 10);\r\n  const mrv = parseInt(document.getElementById('mrv').value, 10);\r\n  \r\n  // Validate relationships\r\n  if (mv > mev || mev > mav || mav > mrv) {\r\n    alert('Invalid landmark relationship (MV ≤ MEV ≤ MAV ≤ MRV)');\r\n    return;\r\n  }\r\n  \r\n  trainingState.updateVolumeLandmarks(muscle, { MV: mv, MEV: mev, MAV: mav, MRV: mrv });\r\n  updateChart();\r\n  \r\n  const output = document.getElementById('volumeOut');\r\n  output.innerHTML = `Landmarks saved for ${muscle}: MV:${mv}, MEV:${mev}, MAV:${mav}, MRV:${mrv}`;\r\n  output.className = 'result success active';\r\n};\r\n\r\nwindow.applyVolumePreset = function(level) {\r\n  const muscle = document.getElementById('landmarkMuscle').value;\r\n  const multipliers = {\r\n    beginner: 0.8,\r\n    intermediate: 1.0,\r\n    advanced: 1.2\r\n  };\r\n  \r\n  const mult = multipliers[level];\r\n  const baseLandmarks = trainingState.volumeLandmarks[muscle];\r\n  \r\n  document.getElementById('mv').value = Math.round(baseLandmarks.MV * mult);\r\n  document.getElementById('mev').value = Math.round(baseLandmarks.MEV * mult);\r\n  document.getElementById('mav').value = Math.round(baseLandmarks.MAV * mult);\r\n  document.getElementById('mrv').value = Math.round(baseLandmarks.MRV * mult);\r\n};\r\n\r\nwindow.setupMeso = function() {\r\n  const length = parseInt(document.getElementById('mesoLength').value, 10);\r\n  const week = parseInt(document.getElementById('currentWeekNum').value, 10);\r\n  const goal = document.getElementById('trainingGoal').value;\r\n  \r\n  const validation = validateMesocycleLength(length, goal);\r\n  \r\n  if (!validation.isValid) {\r\n    alert(validation.warning);\r\n    return;\r\n  }\r\n  \r\n  trainingState.mesoLen = length;\r\n  trainingState.weekNo = week;\r\n  trainingState.saveState();\r\n  \r\n  const output = document.getElementById('mesoOut');\r\n  output.innerHTML = `\r\n    Mesocycle configured: ${length} weeks for ${goal}<br>\r\n    Currently week ${week} (Target RIR: ${trainingState.getTargetRIR().toFixed(1)})<br>\r\n    ${validation.recommendation}\r\n  `;\r\n  output.className = 'result success active';\r\n};\r\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$e8wst","$jlKM8","$9Ev1P","$76QZC","$b3qqF","$gBc5V","window","trainingState","default","updateChart","resetWeeklyData","resetChart","showVolumeLandmarks","addVolumeLandmarks","exportSummary","exportChartImage","toggleSection","sectionId","content","document","getElementById","banner","previousElementSibling","icon","querySelector","classList","contains","remove","style","transform","add","scoreStimulus","setProgressionAlgorithm","getVolumeProgression","analyzeDeloadNeed","calculateTargetRIR","validateEffortLevel","analyzeFrequency","calculateOptimalFrequency","validateLoad","validateSets","validateMesocycleLength","submitFeedback","muscle","value","mmc","parseInt","pump","disruption","soreness","actualRIR","perfRadio","performance","isNaN","alert","stimulusResult","progressionResult","volumeProgression","stimulus","hasIllness","rirValidation","parseFloat","setChange","addSets","output","html","advice","currentSets","projectedSets","score","action","replace","volumeStatus","urgency","feedback","recommendation","deloadRecommended","innerHTML","className","analyzeDeload","halfMuscles","checked","mrvBreach","illness","lowMotivation","analysis","reasons","push","shouldDeload","join","setTimeout","confirm","startDeload","soreDays","sessionGap","trainingAge","optimal","currentVolume","currentWeekSets","recommendedFrequency","setsPerSession","type","saveLandmarks","mv","mev","mav","mrv","updateVolumeLandmarks","MV","MEV","MAV","MRV","applyVolumePreset","level","mult","multipliers","beginner","intermediate","advanced","baseLandmarks","volumeLandmarks","Math","round","setupMeso","length","week","goal","validation","isValid","warning","mesoLen","weekNo","saveState","getTargetRIR","toFixed"],"version":3,"file":"ProgramDesignWorkspace.d1381f44.js.map"}