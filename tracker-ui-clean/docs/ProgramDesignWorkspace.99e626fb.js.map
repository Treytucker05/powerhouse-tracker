{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECAA,IAAA,EAAA,EAAA,kDAEA,EAAA,EAAA,qBAQA,EAAA,EAAA,2BASA,EAAA,EAAA,2BASA,EAAA,EAAA,4BAMA,EAAA,EAAA,+BAMA,EAAA,EAAA,4B,E,E,c,C,GA+EA,EAAA,EAAA,8BAQA,EAAA,EAAA,sCAKA,EAAA,EAAA,oCACA,EAAA,EAAA,oCAEA,EAAA,EAAA,sCAEA,EAAA,EAAA,wCACA,EAAA,EAAA,wCAEA,EAAA,EAAA,0BAEA,EAAA,EAAA,4BACA,EAAA,EAAA,0BApGA,CAAA,OAAO,aAAa,CAAG,EAAA,OAAa,CAGpC,OAAO,WAAW,CAAG,EAAA,WAAW,C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","sources":["<anon>","js/ui/globals.js","js/ui/chartManager.js","js/core/trainingState.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","js/algorithms/volume.js","js/algorithms/fatigue.js","js/algorithms/effort.js","js/algorithms/validation.js","js/algorithms/analytics.js","js/algorithms/exerciseSelection.js","js/algorithms/livePerformance.js","js/algorithms/intelligenceHub.js","js/algorithms/dataVisualization.js","js/algorithms/wellnessIntegration.js","js/algorithms/periodizationSystem.js","js/utils/dataExport.js","js/utils/userFeedback.js","js/utils/performance.js","node_modules/@parcel/runtime-js/lib/runtime-54189b5a3bc18733.js","node_modules/@parcel/runtime-js/lib/runtime-c256ec69ca385e80.js","node_modules/@parcel/runtime-js/lib/runtime-b361468803afb9b5.js","node_modules/@parcel/runtime-js/lib/runtime-99d05a99247e5a01.js"],"sourcesContent":["// modules are defined as an array\r\n// [ module function, map of requires ]\r\n//\r\n// map of requires is short require name -> numeric require\r\n//\r\n// anything defined in a previous bundle is accessed via the\r\n// orig method which is the require for previous bundles\r\n\r\n(function (\r\n  modules,\r\n  entry,\r\n  mainEntry,\r\n  parcelRequireName,\r\n  externals,\r\n  distDir,\r\n  publicUrl,\r\n  devServer\r\n) {\r\n  /* eslint-disable no-undef */\r\n  var globalObject =\r\n    typeof globalThis !== 'undefined'\r\n      ? globalThis\r\n      : typeof self !== 'undefined'\r\n      ? self\r\n      : typeof window !== 'undefined'\r\n      ? window\r\n      : typeof global !== 'undefined'\r\n      ? global\r\n      : {};\r\n  /* eslint-enable no-undef */\r\n\r\n  // Save the require from previous bundle to this closure if any\r\n  var previousRequire =\r\n    typeof globalObject[parcelRequireName] === 'function' &&\r\n    globalObject[parcelRequireName];\r\n\r\n  var importMap = previousRequire.i || {};\r\n  var cache = previousRequire.cache || {};\r\n  // Do not use `require` to prevent Webpack from trying to bundle this call\r\n  var nodeRequire =\r\n    typeof module !== 'undefined' &&\r\n    typeof module.require === 'function' &&\r\n    module.require.bind(module);\r\n\r\n  function newRequire(name, jumped) {\r\n    if (!cache[name]) {\r\n      if (!modules[name]) {\r\n        if (externals[name]) {\r\n          return externals[name];\r\n        }\r\n        // if we cannot find the module within our internal map or\r\n        // cache jump to the current global require ie. the last bundle\r\n        // that was added to the page.\r\n        var currentRequire =\r\n          typeof globalObject[parcelRequireName] === 'function' &&\r\n          globalObject[parcelRequireName];\r\n        if (!jumped && currentRequire) {\r\n          return currentRequire(name, true);\r\n        }\r\n\r\n        // If there are other bundles on this page the require from the\r\n        // previous one is saved to 'previousRequire'. Repeat this as\r\n        // many times as there are bundles until the module is found or\r\n        // we exhaust the require chain.\r\n        if (previousRequire) {\r\n          return previousRequire(name, true);\r\n        }\r\n\r\n        // Try the node require function if it exists.\r\n        if (nodeRequire && typeof name === 'string') {\r\n          return nodeRequire(name);\r\n        }\r\n\r\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\r\n        err.code = 'MODULE_NOT_FOUND';\r\n        throw err;\r\n      }\r\n\r\n      localRequire.resolve = resolve;\r\n      localRequire.cache = {};\r\n\r\n      var module = (cache[name] = new newRequire.Module(name));\r\n\r\n      modules[name][0].call(\r\n        module.exports,\r\n        localRequire,\r\n        module,\r\n        module.exports,\r\n        globalObject\r\n      );\r\n    }\r\n\r\n    return cache[name].exports;\r\n\r\n    function localRequire(x) {\r\n      var res = localRequire.resolve(x);\r\n      return res === false ? {} : newRequire(res);\r\n    }\r\n\r\n    function resolve(x) {\r\n      var id = modules[name][1][x];\r\n      return id != null ? id : x;\r\n    }\r\n  }\r\n\r\n  function Module(moduleName) {\r\n    this.id = moduleName;\r\n    this.bundle = newRequire;\r\n    this.require = nodeRequire;\r\n    this.exports = {};\r\n  }\r\n\r\n  newRequire.isParcelRequire = true;\r\n  newRequire.Module = Module;\r\n  newRequire.modules = modules;\r\n  newRequire.cache = cache;\r\n  newRequire.parent = previousRequire;\r\n  newRequire.distDir = distDir;\r\n  newRequire.publicUrl = publicUrl;\r\n  newRequire.devServer = devServer;\r\n  newRequire.i = importMap;\r\n  newRequire.register = function (id, exports) {\r\n    modules[id] = [\r\n      function (require, module) {\r\n        module.exports = exports;\r\n      },\r\n      {},\r\n    ];\r\n  };\r\n\r\n  // Only insert newRequire.load when it is actually used.\r\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\r\n  // INSERT_LOAD_HERE\r\n\r\n  Object.defineProperty(newRequire, 'root', {\r\n    get: function () {\r\n      return globalObject[parcelRequireName];\r\n    },\r\n  });\r\n\r\n  globalObject[parcelRequireName] = newRequire;\r\n\r\n  for (var i = 0; i < entry.length; i++) {\r\n    newRequire(entry[i]);\r\n  }\r\n\r\n  if (mainEntry) {\r\n    // Expose entry point to Node, AMD or browser globals\r\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\r\n    var mainExports = newRequire(mainEntry);\r\n\r\n    // CommonJS\r\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\r\n      module.exports = mainExports;\r\n\r\n      // RequireJS\r\n    } else if (typeof define === 'function' && define.amd) {\r\n      define(function () {\r\n        return mainExports;\r\n      });\r\n    }\r\n  }\r\n})({\"lEf4n\":[function(require,module,exports,__globalThis) {\n/*  Maps module functions onto window so legacy inline onclick=\"\" handlers keep working */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nvar _chartManagerJs = require(\"./chartManager.js\");\nvar _volumeJs = require(\"../algorithms/volume.js\");\nvar _effortJs = require(\"../algorithms/effort.js\");\nvar _fatigueJs = require(\"../algorithms/fatigue.js\");\nvar _validationJs = require(\"../algorithms/validation.js\");\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/* ----- expose advanced intelligence functions ----- */ var _analyticsJs = require(\"../algorithms/analytics.js\");\nvar _exerciseSelectionJs = require(\"../algorithms/exerciseSelection.js\");\nvar _livePerformanceJs = require(\"../algorithms/livePerformance.js\");\nvar _intelligenceHubJs = require(\"../algorithms/intelligenceHub.js\");\n/* ----- expose next-generation features ----- */ var _dataVisualizationJs = require(\"../algorithms/dataVisualization.js\");\nvar _wellnessIntegrationJs = require(\"../algorithms/wellnessIntegration.js\");\nvar _periodizationSystemJs = require(\"../algorithms/periodizationSystem.js\");\n/* ----- expose new utility features ----- */ var _dataExportJs = require(\"../utils/dataExport.js\");\nvar _userFeedbackJs = require(\"../utils/userFeedback.js\");\nvar _performanceJs = require(\"../utils/performance.js\");\n/* ----- expose key objects ----- */ window.trainingState = (0, _trainingStateJsDefault.default);\n/* ----- expose chart functions ----- */ window.updateChart = (0, _chartManagerJs.updateChart);\nwindow.resetWeeklyData = (0, _chartManagerJs.resetChart);\nwindow.showVolumeLandmarks = (0, _chartManagerJs.addVolumeLandmarks);\nwindow.exportSummary = (0, _chartManagerJs.exportChartImage);\n/* ----- expose section toggle (enhanced with display:none) ----- */ window.toggleSection = function(sectionId) {\n    const content = document.getElementById(sectionId + '-content');\n    const banner = content.previousElementSibling;\n    const icon = banner.querySelector('.expand-icon');\n    const opening = !content.classList.contains('expanded');\n    // ------- EXPAND -------\n    if (opening) {\n        content.style.display = 'block'; // back in flow\n        // allow next paint, then add class so CSS transition plays\n        requestAnimationFrame(()=>{\n            content.classList.add('expanded');\n            banner.classList.add('expanded');\n            // Update icon rotation\n            if (icon) icon.style.transform = 'rotate(180deg)';\n            postHeight(); // send new tall height\n        });\n    } else {\n        content.classList.remove('expanded'); // start transition\n        banner.classList.remove('expanded');\n        // Update icon rotation\n        if (icon) icon.style.transform = 'rotate(0deg)';\n        // when transition ends hide element to drop layout height\n        content.addEventListener('transitionend', function handler() {\n            content.style.display = 'none';\n            content.removeEventListener('transitionend', handler);\n            postHeight(); // send shorter height\n        });\n    }\n    // helper sends current height to parent iframe\n    function postHeight() {\n        if (!window.parent) return;\n        const h = document.documentElement.getBoundingClientRect().height;\n        window.parent.postMessage({\n            phxHeight: h\n        }, '*');\n    }\n};\n/* ----- expose RP algorithm functions ----- */ window.scoreStimulus = (0, _volumeJs.scoreStimulus);\nwindow.setProgressionAlgorithm = (0, _volumeJs.setProgressionAlgorithm);\nwindow.getVolumeProgression = (0, _volumeJs.getVolumeProgression);\nwindow.analyzeDeloadNeed = (0, _volumeJs.analyzeDeloadNeed);\nwindow.autoSetIncrement = (0, _volumeJs.autoSetIncrement);\nwindow.processWeeklyVolumeProgression = (0, _volumeJs.processWeeklyVolumeProgression);\nwindow.calculateTargetRIR = (0, _effortJs.calculateTargetRIR);\nwindow.validateEffortLevel = (0, _effortJs.validateEffortLevel);\nwindow.getScheduledRIR = (0, _effortJs.getScheduledRIR);\nwindow.processWeeklyLoadAdjustments = (0, _effortJs.processWeeklyLoadAdjustments);\nwindow.getLoadProgression = (0, _effortJs.getLoadProgression);\nwindow.simulateWeeklyRIRFeedback = (0, _effortJs.simulateWeeklyRIRFeedback);\nwindow.analyzeFrequency = (0, _fatigueJs.analyzeFrequency);\nwindow.calculateOptimalFrequency = (0, _fatigueJs.calculateOptimalFrequency);\nwindow.isHighFatigue = (0, _fatigueJs.isHighFatigue);\nwindow.validateLoad = (0, _validationJs.validateLoad);\nwindow.validateSets = (0, _validationJs.validateSets);\nwindow.validateMesocycleLength = (0, _validationJs.validateMesocycleLength);\nwindow.optimizeVolumeLandmarks = (0, _analyticsJs.optimizeVolumeLandmarks);\nwindow.predictDeloadTiming = (0, _analyticsJs.predictDeloadTiming);\nwindow.adaptiveRIRRecommendations = (0, _analyticsJs.adaptiveRIRRecommendations);\nwindow.detectTrainingPlateaus = (0, _analyticsJs.detectTrainingPlateaus);\nwindow.selectOptimalExercises = (0, _exerciseSelectionJs.selectOptimalExercises);\nwindow.generateWeeklyProgram = (0, _exerciseSelectionJs.generateWeeklyProgram);\nwindow.dataVisualizer = (0, _dataVisualizationJs.dataVisualizer);\nwindow.wellnessSystem = (0, _wellnessIntegrationJs.wellnessSystem);\nwindow.periodizationSystem = (0, _periodizationSystemJs.periodizationSystem);\nwindow.liveMonitor = (0, _livePerformanceJs.liveMonitor);\nwindow.advancedIntelligence = (0, _intelligenceHubJs.advancedIntelligence);\n/* ----- expose new utility systems ----- */ window.dataExportManager = (0, _dataExportJs.dataExportManager);\nwindow.userFeedbackManager = (0, _userFeedbackJs.userFeedbackManager);\nwindow.performanceManager = (0, _performanceJs.performanceManager);\n/* ----- main UI handlers for buttons ----- */ window.submitFeedback = function() {\n    const muscle = document.getElementById('muscleSelect').value;\n    const mmc = parseInt(document.getElementById('mmc').value, 10);\n    const pump = parseInt(document.getElementById('pump').value, 10);\n    const disruption = parseInt(document.getElementById('dis').value, 10);\n    const soreness = parseInt(document.getElementById('sore').value, 10);\n    const actualRIR = document.getElementById('actualRIR').value;\n    const perfRadio = document.querySelector('input[name=\"perf\"]:checked');\n    const performance = perfRadio ? parseInt(perfRadio.value, 10) : 2;\n    // Validate inputs\n    if (!muscle || isNaN(mmc) || isNaN(pump) || isNaN(disruption)) {\n        alert('Please fill in all required fields');\n        return;\n    }\n    // Process with RP algorithms\n    const stimulusResult = (0, _volumeJs.scoreStimulus)({\n        mmc,\n        pump,\n        disruption\n    });\n    const progressionResult = (0, _volumeJs.setProgressionAlgorithm)(soreness, performance);\n    const volumeProgression = (0, _volumeJs.getVolumeProgression)(muscle, {\n        stimulus: {\n            mmc,\n            pump,\n            disruption\n        },\n        soreness,\n        performance,\n        hasIllness: false\n    });\n    // Validate RIR if provided\n    let rirValidation = null;\n    if (actualRIR) rirValidation = (0, _effortJs.validateEffortLevel)(parseFloat(actualRIR));\n    // Apply changes\n    if (progressionResult.setChange !== -99) (0, _trainingStateJsDefault.default).addSets(muscle, progressionResult.setChange);\n    // Display results\n    const output = document.getElementById('mevOut');\n    let html = `\n    <div class=\"feedback-results\">\n      <div class=\"main-recommendation\">\n        <h4>${muscle} Recommendation</h4>\n        <p class=\"advice\">${volumeProgression.advice}</p>\n        <p class=\"sets-info\">\n          ${volumeProgression.currentSets} \\u{2192} ${volumeProgression.projectedSets} sets\n          ${volumeProgression.setChange !== 0 ? `(${volumeProgression.setChange > 0 ? '+' : ''}${volumeProgression.setChange})` : ''}\n        </p>\n      </div>\n      \n      <div class=\"algorithm-details\">\n        <div>\n          <strong>Stimulus:</strong> ${stimulusResult.score}/9 \n          <span class=\"stimulus-${stimulusResult.action}\">(${stimulusResult.action.replace('_', ' ')})</span>\n        </div>\n        <div>\n          <strong>Volume Status:</strong> ${volumeProgression.volumeStatus}\n        </div>\n        <div>\n          <strong>RP Progression:</strong> ${progressionResult.advice}\n        </div>\n      </div>\n    </div>\n  `;\n    if (rirValidation) html += `\n      <div class=\"rir-feedback ${rirValidation.urgency}\">\n        <strong>RIR Check:</strong> ${rirValidation.feedback}<br>\n        <em>${rirValidation.recommendation}</em>\n      </div>\n    `;\n    if (volumeProgression.deloadRecommended) html += `\n      <div class=\"deload-warning\">\n        \\u{26A0}\\u{FE0F} <strong>Deload Recommended</strong>\n      </div>\n    `;\n    output.innerHTML = html;\n    output.className = 'result success active';\n    (0, _chartManagerJs.updateChart)();\n};\nwindow.analyzeDeload = function() {\n    const halfMuscles = document.getElementById('halfMuscles').checked;\n    const mrvBreach = document.getElementById('mrvBreach').checked;\n    const illness = document.getElementById('illness').checked;\n    const lowMotivation = document.getElementById('lowMotivation').checked;\n    const analysis = (0, _volumeJs.analyzeDeloadNeed)();\n    // Override with manual inputs\n    if (halfMuscles) analysis.reasons.push('Most muscles need recovery (manual check)');\n    if (mrvBreach) analysis.reasons.push('Hit MRV twice consecutively (manual check)');\n    if (illness) analysis.reasons.push('Illness/injury present');\n    if (lowMotivation) analysis.reasons.push('Low motivation levels');\n    const shouldDeload = analysis.shouldDeload || halfMuscles || mrvBreach || illness || lowMotivation;\n    const output = document.getElementById('deloadOut');\n    if (shouldDeload) {\n        output.innerHTML = `\n      <strong>Deload Recommended</strong><br>\n      Reasons: ${analysis.reasons.join(', ')}<br>\n      <em>Take 1 week at 50% volume + 25-50% load reduction</em>\n    `;\n        output.className = 'result warning active';\n        // Offer to start deload\n        setTimeout(()=>{\n            if (confirm('Start deload phase now? This will reduce all muscle volumes to 50% of MEV.')) {\n                (0, _trainingStateJsDefault.default).startDeload();\n                (0, _chartManagerJs.updateChart)();\n            }\n        }, 1000);\n    } else {\n        output.innerHTML = 'No deload needed - continue current program';\n        output.className = 'result success active';\n    }\n};\nwindow.analyzeFrequency = function() {\n    const soreDays = parseInt(document.getElementById('soreDays').value, 10);\n    const sessionGap = parseInt(document.getElementById('sessionGap').value, 10);\n    const trainingAge = document.getElementById('trainingAge').value;\n    const muscle = document.getElementById('muscleSelect').value;\n    const analysis = (0, _fatigueJs.analyzeFrequency)(soreDays, sessionGap, muscle);\n    const optimal = (0, _fatigueJs.calculateOptimalFrequency)(muscle, {\n        trainingAge,\n        currentVolume: (0, _trainingStateJsDefault.default).currentWeekSets[muscle]\n    });\n    const output = document.getElementById('freqOut');\n    output.innerHTML = `\n    <strong>${analysis.recommendation}</strong><br>\n    Current: ${sessionGap} days between sessions<br>\n    Recovery: ${soreDays} days<br>\n    Optimal frequency: ${optimal.recommendedFrequency}x/week (${optimal.setsPerSession} sets/session)\n  `;\n    const type = analysis.urgency === 'high' ? 'warning' : analysis.urgency === 'medium' ? 'warning' : 'success';\n    output.className = `result ${type} active`;\n};\nwindow.saveLandmarks = function() {\n    const muscle = document.getElementById('landmarkMuscle').value;\n    const mv = parseInt(document.getElementById('mv').value, 10);\n    const mev = parseInt(document.getElementById('mev').value, 10);\n    const mav = parseInt(document.getElementById('mav').value, 10);\n    const mrv = parseInt(document.getElementById('mrv').value, 10);\n    // Validate relationships\n    if (mv > mev || mev > mav || mav > mrv) {\n        alert(\"Invalid landmark relationship (MV \\u2264 MEV \\u2264 MAV \\u2264 MRV)\");\n        return;\n    }\n    (0, _trainingStateJsDefault.default).updateVolumeLandmarks(muscle, {\n        MV: mv,\n        MEV: mev,\n        MAV: mav,\n        MRV: mrv\n    });\n    (0, _chartManagerJs.updateChart)();\n    const output = document.getElementById('volumeOut');\n    output.innerHTML = `Landmarks saved for ${muscle}: MV:${mv}, MEV:${mev}, MAV:${mav}, MRV:${mrv}`;\n    output.className = 'result success active';\n};\nwindow.applyVolumePreset = function(level) {\n    const muscle = document.getElementById('landmarkMuscle').value;\n    const multipliers = {\n        beginner: 0.8,\n        intermediate: 1.0,\n        advanced: 1.2\n    };\n    const mult = multipliers[level];\n    const baseLandmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    document.getElementById('mv').value = Math.round(baseLandmarks.MV * mult);\n    document.getElementById('mev').value = Math.round(baseLandmarks.MEV * mult);\n    document.getElementById('mav').value = Math.round(baseLandmarks.MAV * mult);\n    document.getElementById('mrv').value = Math.round(baseLandmarks.MRV * mult);\n};\nwindow.setupMeso = function() {\n    const length = parseInt(document.getElementById('mesoLength').value, 10);\n    const week = parseInt(document.getElementById('currentWeekNum').value, 10);\n    const goal = document.getElementById('trainingGoal').value;\n    const validation = (0, _validationJs.validateMesocycleLength)(length, goal);\n    if (!validation.isValid) {\n        alert(validation.warning);\n        return;\n    }\n    (0, _trainingStateJsDefault.default).mesoLen = length;\n    (0, _trainingStateJsDefault.default).weekNo = week;\n    (0, _trainingStateJsDefault.default).saveState();\n    const output = document.getElementById('mesoOut');\n    output.innerHTML = `\n    Mesocycle configured: ${length} weeks for ${goal}<br>\n    Currently week ${week} (Target RIR: ${(0, _trainingStateJsDefault.default).getTargetRIR().toFixed(1)})<br>\n    ${validation.recommendation}\n  `;\n    output.className = 'result success active';\n};\n/* ----- week progression helpers ----- */ window.advanceToNextWeek = function() {\n    (0, _trainingStateJsDefault.default).nextWeek();\n    (0, _chartManagerJs.updateChart)();\n    updateAllDisplays();\n    const summary = (0, _trainingStateJsDefault.default).getStateSummary();\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut');\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>\\u{1F4C5} Advanced to Week ${summary.week}</h4>\n      <div class=\"progression-details\">\n        <div>Week: ${summary.week} of ${summary.meso}</div>\n        <div>Block: ${summary.block}</div>\n        <div>Target RIR: ${summary.targetRIR.toFixed(1)}</div>\n        <div>Phase: ${summary.currentPhase}</div>\n      </div>\n    </div>\n  `;\n    output.className = 'result success active';\n    console.log('Advanced to next week:', summary);\n};\n/* ----- initialization helpers ----- */ window.initializeAllMusclesAtMEV = function() {\n    const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n    muscles.forEach((muscle)=>{\n        (0, _trainingStateJsDefault.default).initializeMuscleAtMEV(muscle);\n    });\n    (0, _chartManagerJs.updateChart)();\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut');\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>\\u{1F3AF} All muscles initialized at MEV</h4>\n      <div class=\"progression-details\">\n        ${muscles.map((muscle)=>`<div>${muscle}: ${(0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MEV} sets (MEV)</div>`).join('')}\n      </div>\n    </div>\n  `;\n    output.className = 'result success active';\n    console.log('All muscles initialized at MEV');\n};\n/* ----- auto-volume progression demo function ----- */ window.runAutoVolumeProgression = function() {\n    // Demo: simulate weekly feedback for all muscles\n    const weeklyFeedback = {};\n    const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n    muscles.forEach((muscle)=>{\n        const currentSets = (0, _trainingStateJsDefault.default).getWeeklySets(muscle);\n        const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n        const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n        // Generate adaptive feedback based on volume status\n        let stimulus, soreness, perf;\n        if (volumeStatus === 'under-minimum' || volumeStatus === 'maintenance') {\n            // Low volume = good recovery, potentially low stimulus\n            stimulus = Math.floor(Math.random() * 4) + 2; // 2-5 (moderate to low)\n            soreness = Math.floor(Math.random() * 2); // 0-1 (low)\n            perf = Math.floor(Math.random() * 2) + 1; // 1-2 (same to better)\n        } else if (volumeStatus === 'optimal') {\n            // Optimal volume = moderate stimulus, manageable fatigue\n            stimulus = Math.floor(Math.random() * 3) + 4; // 4-6 (moderate)\n            soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\n            perf = Math.floor(Math.random() * 2) + 1; // 1-2 (same to better)\n        } else if (volumeStatus === 'high') {\n            // High volume = good stimulus but building fatigue\n            stimulus = Math.floor(Math.random() * 3) + 5; // 5-7 (moderate to high)\n            soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\n            perf = Math.floor(Math.random() * 3); // 0-2 (worse to better)    } else { // maximum\n            // At MRV = high fatigue, may need recovery\n            stimulus = Math.floor(Math.random() * 4) + 4; // 4-7 (variable)\n            soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\n            perf = Math.floor(Math.random() * 2); // 0-1 (worse to same)\n        }\n        // Generate enhanced fatigue indicators\n        let jointAche = 0;\n        let perfChange = 0;\n        let lastLoad = 100; // Default baseline\n        // Higher volume status = more likely to have joint issues and performance drops\n        if (volumeStatus === 'maximum') {\n            jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\n            perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\n            lastLoad = 95; // Simulate strength drop\n        } else if (volumeStatus === 'high') {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.8 ? -1 : Math.random() > 0.5 ? 0 : 1; // Mixed performance\n            lastLoad = 98; // Slight strength drop\n        } else {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\n            lastLoad = 102; // Strength increase\n        }\n        weeklyFeedback[muscle] = {\n            stimulus,\n            soreness,\n            perf,\n            jointAche,\n            perfChange,\n            lastLoad,\n            pump: Math.floor(stimulus / 3),\n            disruption: Math.floor(stimulus / 3),\n            recoverySession: soreness >= 3 || volumeStatus === 'maximum' && Math.random() < 0.3\n        };\n    });\n    // Process auto-progression\n    const result = (0, _volumeJs.processWeeklyVolumeProgression)(weeklyFeedback, (0, _trainingStateJsDefault.default));\n    // Update chart\n    (0, _chartManagerJs.updateChart)();\n    // Show notification\n    const message = result.deloadTriggered ? `\\u{1F6D1} ${result.recommendation} (${result.mrvHits} muscles at MRV)` : `\\u{1F4C8} Auto-progression complete (+${Object.values(result.progressionLog).reduce((sum, log)=>sum + log.increment, 0)} total sets)`;\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\n    const progressionDetails = Object.entries(result.progressionLog).map(([muscle, log])=>`<div>${muscle}: ${log.previousSets} \\u{2192} ${log.currentSets} sets (${log.reason})</div>`).join('');\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>${message}</h4>\n      <div class=\"progression-details\">\n        ${progressionDetails}\n      </div>\n    </div>\n  `;\n    output.className = result.deloadTriggered ? 'result warning active' : 'result success active';\n    console.log('Auto-progression result:', result);\n};\n/* ----- RIR Schedule & Load Feedback Functions ----- */ window.runWeeklyLoadAdjustments = function() {\n    const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    // Simulate weekly RIR feedback\n    const weeklyRIRFeedback = (0, _effortJs.simulateWeeklyRIRFeedback)(muscles, currentWeek);\n    // Process load adjustments\n    const adjustmentResult = (0, _effortJs.processWeeklyLoadAdjustments)(weeklyRIRFeedback);\n    // Update display\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\n    const adjustmentDetails = Object.entries(adjustmentResult.adjustments).map(([muscle, adj])=>`<div class=\"load-adjustment ${adj.urgency}\">\n      <strong>${muscle}:</strong> ${adj.loadAdjustment > 0 ? '+' : ''}${adj.loadAdjustment.toFixed(1)}% \n      (${adj.currentRIR.toFixed(1)} vs ${adj.targetRIR.toFixed(1)} RIR)\n      <div class=\"adjustment-reason\">${adj.reason}</div>\n    </div>`).join('');\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>\\u{2696}\\u{FE0F} Weekly Load Adjustments - Week ${adjustmentResult.week}</h4>\n      <div class=\"rir-summary\">\n        <div>Target RIR: ${adjustmentResult.targetRIR.toFixed(1)}</div>\n        <div>Muscles Adjusted: ${adjustmentResult.summary.musclesAdjusted}/${adjustmentResult.summary.totalMuscles}</div>\n        <div>Avg Load Change: ${adjustmentResult.summary.avgLoadChange > 0 ? '+' : ''}${adjustmentResult.summary.avgLoadChange.toFixed(1)}%</div>\n      </div>\n      <div class=\"load-adjustments\">\n        ${adjustmentDetails}\n      </div>\n    </div>\n  `;\n    output.className = 'result success active';\n    console.log('Weekly load adjustments:', adjustmentResult);\n};\nwindow.showNextWeekLoadProgression = function() {\n    const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n    const progressions = [];\n    muscles.forEach((muscle)=>{\n        // Simulate session history for the muscle\n        const sessionHistory = {\n            averageRIR: (0, _effortJs.getScheduledRIR)((0, _trainingStateJsDefault.default).weekNo, (0, _trainingStateJsDefault.default).mesoLen) + (Math.random() * 2 - 1)\n        };\n        const progression = (0, _effortJs.getLoadProgression)(muscle, sessionHistory);\n        progressions.push(progression);\n    });\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\n    const progressionDetails = progressions.map((prog)=>`<div class=\"load-progression\">\n      <strong>${prog.muscle}:</strong> ${prog.loadIncrease > 0 ? '+' : ''}${prog.loadIncrease}% \n      (${prog.currentRIR.toFixed(1)} \\u{2192} ${prog.nextRIR.toFixed(1)} RIR)\n      <div class=\"progression-recommendation\">${prog.recommendation}</div>\n    </div>`).join('');\n    const nextWeek = (0, _trainingStateJsDefault.default).weekNo + 1;\n    const nextRIR = (0, _effortJs.getScheduledRIR)(nextWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>\\u{1F4C8} Load Progression for Week ${nextWeek}</h4>\n      <div class=\"rir-summary\">\n        <div>Next Week Target RIR: ${nextRIR.toFixed(1)}</div>\n        <div>Total Muscles: ${progressions.length}</div>\n        <div>Avg Load Increase: +${(progressions.reduce((sum, p)=>sum + p.loadIncrease, 0) / progressions.length).toFixed(1)}%</div>\n      </div>\n      <div class=\"load-progressions\">\n        ${progressionDetails}\n      </div>\n    </div>\n  `;\n    output.className = 'result success active';\n    console.log('Next week load progressions:', progressions);\n};\nwindow.showRIRSchedule = function() {\n    const mesoLength = (0, _trainingStateJsDefault.default).mesoLen;\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const schedule = [];\n    for(let week = 1; week <= mesoLength; week++){\n        const scheduledRIR = (0, _effortJs.getScheduledRIR)(week, mesoLength);\n        const isCurrent = week === currentWeek;\n        schedule.push({\n            week,\n            rir: scheduledRIR,\n            isCurrent,\n            intensity: scheduledRIR >= 2.5 ? 'Low' : scheduledRIR >= 2.0 ? 'Moderate' : scheduledRIR >= 1.0 ? 'High' : 'Maximum'\n        });\n    }\n    const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\n    const scheduleDisplay = schedule.map((item)=>`<div class=\"rir-week ${item.isCurrent ? 'current-week' : ''}\">\n      <strong>Week ${item.week}:</strong> ${item.rir.toFixed(1)} RIR (${item.intensity})\n      ${item.isCurrent ? \" \\u2190 Current\" : ''}\n    </div>`).join('');\n    output.innerHTML = `\n    <div class=\"auto-progression-result\">\n      <h4>\\u{1F4C5} RIR Schedule - ${mesoLength} Week Mesocycle</h4>\n      <div class=\"rir-schedule\">\n        ${scheduleDisplay}\n      </div>\n      <div class=\"schedule-notes\">\n        <div>\\u{2022} Scheduled progression follows RP guidelines</div>\n        <div>\\u{2022} Lower RIR = Higher intensity (closer to failure)</div>\n        <div>\\u{2022} Deload after final week</div>\n      </div>\n    </div>\n  `;\n    output.className = 'result success active';\n    console.log('RIR Schedule:', schedule);\n};\n/* ----- Advanced Intelligence UI Functions ----- */ // Live Performance Monitoring\nlet sessionActive = false;\nlet currentSetNumber = 0;\nwindow.startLiveSession = function() {\n    const exercise = document.getElementById('liveExercise').value;\n    const muscle = document.getElementById('liveMuscle').value;\n    const plannedSets = parseInt(document.getElementById('plannedSets').value);\n    const targetRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const result = (0, _livePerformanceJs.liveMonitor).startSession({\n        muscle: muscle,\n        exercise: exercise,\n        plannedSets: plannedSets,\n        targetRIR: targetRIR\n    });\n    sessionActive = true;\n    currentSetNumber = 0;\n    // Update UI\n    document.getElementById('startSessionBtn').style.display = 'none';\n    document.getElementById('logSetBtn').style.display = 'inline-block';\n    document.getElementById('endSessionBtn').style.display = 'inline-block';\n    document.getElementById('liveMonitor').style.display = 'block';\n    const output = document.getElementById('liveMonitorOut');\n    output.innerHTML = `<strong>\\u{1F3AE} Live Session Started!</strong><br>${result.message}<br><br>Target RIR: ${targetRIR}<br>Planned Sets: ${plannedSets}`;\n    output.className = 'result success active';\n};\nwindow.logTrainingSet = function() {\n    if (!sessionActive) {\n        alert('Please start a session first!');\n        return;\n    }\n    currentSetNumber++;\n    // Simulate realistic set data (in real app, this would come from user input)\n    const setData = {\n        weight: 80 + (Math.random() * 10 - 5),\n        reps: 8 + Math.floor(Math.random() * 3),\n        rir: 1.5 + Math.random() * 1,\n        rpe: null,\n        techniqueRating: 7 + Math.floor(Math.random() * 3),\n        notes: `Set ${currentSetNumber} - simulated`\n    };\n    const result = (0, _livePerformanceJs.liveMonitor).logSet(setData);\n    // Update live display\n    updateLiveDisplay({\n        sessionProgress: (0, _livePerformanceJs.liveMonitor).getSessionProgress(),\n        setInfo: {\n            rir: setData.rir\n        }\n    });\n    // Show feedback\n    showSetFeedback(result);\n};\nwindow.endLiveSession = function() {\n    if (!sessionActive) {\n        alert('No active session to end!');\n        return;\n    }\n    const summary = (0, _livePerformanceJs.liveMonitor).endSession();\n    sessionActive = false;\n    currentSetNumber = 0;\n    // Update UI\n    document.getElementById('startSessionBtn').style.display = 'inline-block';\n    document.getElementById('logSetBtn').style.display = 'none';\n    document.getElementById('endSessionBtn').style.display = 'none';\n    document.getElementById('liveMonitor').style.display = 'none';\n    showSessionSummary(summary);\n};\nfunction updateLiveDisplay(data) {\n    if (data.sessionProgress) {\n        document.getElementById('currentSet').textContent = data.sessionProgress.completedSets;\n        document.getElementById('sessionProgress').textContent = Math.round(data.sessionProgress.progressPercentage) + '%';\n        document.getElementById('totalLoad').textContent = data.sessionProgress.totalLoad;\n    }\n    if (data.setInfo) document.getElementById('currentRIR').textContent = data.setInfo.rir.toFixed(1);\n}\nfunction showSetFeedback(data) {\n    const output = document.getElementById('liveMonitorOut');\n    output.className = `result ${data.feedback.type} active`;\n    let html = `<strong>Set ${currentSetNumber} Feedback:</strong><br>`;\n    html += `${data.feedback.message}<br><br>`;\n    if (data.nextSetRecommendations.rationale.length > 0) {\n        html += `<strong>Next Set Recommendations:</strong><br>`;\n        html += `Weight: ${data.nextSetRecommendations.weight}kg<br>`;\n        html += `Rest: ${data.nextSetRecommendations.rest}<br>`;\n        html += `Strategy: ${data.nextSetRecommendations.strategy}<br>`;\n        html += `Rationale: ${data.nextSetRecommendations.rationale.join(', ')}<br>`;\n    }\n    output.innerHTML = html;\n}\nfunction showSessionSummary(data) {\n    const output = document.getElementById('liveMonitorOut');\n    output.className = 'result success active';\n    let html = `<strong>\\u{1F3AF} Session Complete!</strong><br><br>`;\n    html += `<strong>Performance Grade:</strong> ${data.performance.targetAchievement.grade}<br>`;\n    html += `<strong>Consistency Rating:</strong> ${data.performance.consistency.rating}<br>`;\n    html += `<strong>Total Load:</strong> ${data.progress.totalLoad}<br>`;\n    html += `<strong>Duration:</strong> ${data.progress.duration} minutes<br><br>`;\n    if (data.recommendations.length > 0) {\n        html += `<strong>Recommendations:</strong><br>`;\n        data.recommendations.forEach((rec)=>{\n            html += `\\u{2022} ${rec.message}<br>`;\n        });\n    }\n    output.innerHTML = html;\n}\n// Intelligence Hub Functions\nwindow.initializeIntelligence = function() {\n    const output = document.getElementById('intelligenceOut');\n    output.innerHTML = '<div class=\"loading\"></div> Initializing Advanced Training Intelligence...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const result = (0, _intelligenceHubJs.advancedIntelligence).initialize();\n        let html = \"<strong>\\uD83E\\uDDE0 Intelligence System Initialized!</strong><br><br>\";\n        html += `<strong>Analytics:</strong> ${result.analytics ? \"\\u2705 Enabled\" : \"\\u274C Disabled (need more data)\"}<br>`;\n        html += `<strong>Exercise Selection:</strong> ${result.exerciseSelection ? \"\\u2705 Enabled\" : \"\\u274C Disabled\"}<br>`;\n        html += `<strong>Live Monitoring:</strong> ${result.liveMonitoring ? \"\\u2705 Enabled\" : \"\\u274C Disabled\"}<br><br>`;\n        html += `<strong>Status:</strong> ${result.message}`;\n        // Update status indicators\n        document.getElementById('analyticsStatus').textContent = result.analytics ? \"\\u2705\" : \"\\u274C\";\n        document.getElementById('exerciseStatus').textContent = result.exerciseSelection ? \"\\u2705\" : \"\\u274C\";\n        document.getElementById('liveStatus').textContent = result.liveMonitoring ? \"\\u2705\" : \"\\u274C\";\n        document.getElementById('hubStatus').textContent = \"\\u2705\";\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 1500);\n};\nwindow.getWeeklyIntelligence = function() {\n    const output = document.getElementById('intelligenceOut');\n    output.innerHTML = '<div class=\"loading\"></div> Generating weekly intelligence report...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const intelligence = (0, _intelligenceHubJs.advancedIntelligence).getWeeklyIntelligence();\n        let html = \"<strong>\\uD83D\\uDCC8 Weekly Intelligence Report</strong><br><br>\";\n        html += `<strong>Week:</strong> ${intelligence.week}, Block: ${intelligence.block}<br><br>`;\n        if (intelligence.recommendations.length > 0) {\n            html += \"<strong>\\uD83C\\uDFAF Recommendations:</strong><br>\";\n            intelligence.recommendations.forEach((rec)=>{\n                html += `\\u{2022} [${rec.urgency.toUpperCase()}] ${rec.message}<br>`;\n            });\n            html += '<br>';\n        }\n        if (intelligence.optimizations.length > 0) {\n            html += \"<strong>\\uD83D\\uDD27 Available Optimizations:</strong><br>\";\n            intelligence.optimizations.forEach((opt)=>{\n                html += `\\u{2022} ${opt.type}: ${opt.recommendation || opt.muscle}<br>`;\n            });\n            html += '<br>';\n        }\n        if (intelligence.riskAssessment) {\n            html += `<strong>\\u{26A0}\\u{FE0F} Risk Level:</strong> ${intelligence.riskAssessment.riskLevel.toUpperCase()}<br>`;\n            html += `<strong>Risk Score:</strong> ${intelligence.riskAssessment.riskScore}/100<br>`;\n        }\n        // Show in intelligence panel\n        document.getElementById('intelligencePanel').style.display = 'block';\n        document.getElementById('intelligenceContent').innerHTML = `\n      <div class=\"recommendation\">\n        <strong>\\u{1F4CA} Current Assessment</strong><br>\n        Week ${intelligence.week} analysis shows ${intelligence.recommendations.length} active recommendations\n        and ${intelligence.optimizations.length} optimization opportunities.\n      </div>\n    `;\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 2000);\n};\nwindow.getOptimalExercises = function() {\n    const output = document.getElementById('intelligenceOut');\n    output.innerHTML = '<div class=\"loading\"></div> Analyzing optimal exercises for current training state...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const muscle = 'Chest'; // Example muscle\n        const exercises = (0, _exerciseSelectionJs.selectOptimalExercises)(muscle, {\n            availableEquipment: [\n                'barbell',\n                'dumbbells',\n                'cables'\n            ],\n            trainingGoal: 'hypertrophy',\n            experienceLevel: 'intermediate',\n            fatigueLevel: 4,\n            timeConstraint: 'moderate'\n        });\n        let html = \"<strong>\\uD83D\\uDCA1 Smart Exercise Recommendations</strong><br><br>\";\n        html += `<strong>For ${muscle}:</strong><br>`;\n        exercises.slice(0, 3).forEach((exercise, index)=>{\n            html += `${index + 1}. <strong>${exercise.name}</strong> (Score: ${exercise.score.toFixed(1)})<br>`;\n            html += `   Sets: ${exercise.sets}, Reps: ${exercise.repRange[0]}-${exercise.repRange[1]}<br>`;\n            html += `   ${exercise.reasoning}<br><br>`;\n        });\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 1500);\n};\nwindow.assessTrainingRisk = function() {\n    const output = document.getElementById('intelligenceOut');\n    output.innerHTML = '<div class=\"loading\"></div> Assessing training risk factors...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const riskAssessment = (0, _intelligenceHubJs.advancedIntelligence).assessTrainingRisk();\n        let html = \"<strong>\\u26A0\\uFE0F Training Risk Assessment</strong><br><br>\";\n        html += `<strong>Risk Score:</strong> ${riskAssessment.riskScore}/100<br>`;\n        html += `<strong>Risk Level:</strong> ${riskAssessment.riskLevel.toUpperCase()}<br><br>`;\n        if (riskAssessment.riskFactors.length > 0) {\n            html += '<strong>Risk Factors:</strong><br>';\n            riskAssessment.riskFactors.forEach((factor)=>{\n                html += `\\u{2022} ${factor}<br>`;\n            });\n            html += '<br>';\n        }\n        if (riskAssessment.recommendations.length > 0) {\n            html += '<strong>Recommendations:</strong><br>';\n            riskAssessment.recommendations.forEach((rec)=>{\n                html += `\\u{2022} ${rec}<br>`;\n            });\n        }\n        const urgency = riskAssessment.riskLevel === 'low' ? 'success' : riskAssessment.riskLevel === 'moderate' ? 'warning' : 'error';\n        output.className = `result ${urgency} active`;\n        output.innerHTML = html;\n    }, 2000);\n};\n// Analytics Functions\nwindow.optimizeVolumeLandmarks = function() {\n    const output = document.getElementById('analyticsOut');\n    output.innerHTML = '<div class=\"loading\"></div> Analyzing historical data for volume optimization...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        // Mock historical data for demo\n        const mockHistoricalData = [\n            {\n                sets: 8,\n                avgStimulus: 7,\n                avgFatigue: 2,\n                performanceChange: 1\n            },\n            {\n                sets: 10,\n                avgStimulus: 8,\n                avgFatigue: 3,\n                performanceChange: 1\n            },\n            {\n                sets: 12,\n                avgStimulus: 8,\n                avgFatigue: 4,\n                performanceChange: 0\n            },\n            {\n                sets: 14,\n                avgStimulus: 7,\n                avgFatigue: 6,\n                performanceChange: -1\n            }\n        ];\n        const optimized = (0, _analyticsJs.optimizeVolumeLandmarks)('Chest', mockHistoricalData);\n        let html = \"<strong>\\uD83D\\uDCCA Volume Landmark Optimization Results:</strong><br><br>\";\n        html += `<strong>Optimized Landmarks for Chest:</strong><br>`;\n        html += `MEV: ${optimized.MEV} sets<br>`;\n        html += `MAV: ${optimized.MAV} sets<br>`;\n        html += `MRV: ${optimized.MRV} sets<br><br>`;\n        html += `<strong>Confidence:</strong> ${optimized.confidence}%<br>`;\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 2000);\n};\nwindow.predictDeloadTiming = function() {\n    const output = document.getElementById('analyticsOut');\n    output.innerHTML = '<div class=\"loading\"></div> Analyzing fatigue patterns and performance trends...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const mockMetrics = {\n            weeklyFatigueScore: [\n                3,\n                4,\n                6,\n                7\n            ],\n            performanceTrend: [\n                85,\n                82,\n                78,\n                75\n            ],\n            volumeProgression: [\n                40,\n                44,\n                48,\n                52\n            ],\n            motivationLevel: 6,\n            sleepQuality: 7\n        };\n        const prediction = (0, _analyticsJs.predictDeloadTiming)(mockMetrics);\n        let html = \"<strong>\\uD83D\\uDD2E Deload Prediction Analysis:</strong><br><br>\";\n        html += `<strong>Weeks Until Deload:</strong> ${prediction.weeksUntilDeload}<br>`;\n        html += `<strong>Confidence:</strong> ${prediction.confidence}%<br>`;\n        html += `<strong>Primary Indicator:</strong> ${prediction.primaryIndicator}<br>`;\n        html += `<strong>Recommended Action:</strong> ${prediction.recommendedAction}<br>`;\n        const urgency = prediction.weeksUntilDeload <= 2 ? 'warning' : 'success';\n        output.className = `result ${urgency} active`;\n        output.innerHTML = html;\n    }, 2500);\n};\nwindow.detectPlateaus = function() {\n    const output = document.getElementById('analyticsOut');\n    output.innerHTML = '<div class=\"loading\"></div> Analyzing training plateaus and stagnation patterns...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const mockTrainingData = {\n            weeklyPerformance: [\n                85,\n                84,\n                83,\n                83,\n                82,\n                82\n            ],\n            weeklyVolume: [\n                45,\n                47,\n                48,\n                48,\n                48,\n                48\n            ],\n            weeklyIntensity: [\n                7,\n                7.5,\n                8,\n                8,\n                8,\n                8\n            ],\n            weeklyFatigue: [\n                3,\n                4,\n                5,\n                6,\n                7,\n                8\n            ]\n        };\n        const plateauAnalysis = (0, _analyticsJs.detectTrainingPlateaus)(mockTrainingData);\n        let html = \"<strong>\\uD83D\\uDCC8 Plateau Detection Results:</strong><br><br>\";\n        if (plateauAnalysis.plateauDetected) {\n            html += `<strong>\\u{1F6A8} Plateau Detected:</strong> ${plateauAnalysis.plateauType}<br>`;\n            html += `<strong>Urgency Level:</strong> ${plateauAnalysis.urgency}<br><br>`;\n            html += `<strong>\\u{1F4A1} Recommended Interventions:</strong><br>`;\n            plateauAnalysis.interventions.forEach((intervention)=>{\n                html += `\\u{2022} ${intervention}<br>`;\n            });\n            output.className = 'result warning active';\n        } else {\n            html += `<strong>\\u{2705} No Plateau Detected</strong><br>`;\n            html += `Training progression appears healthy.<br><br>`;\n            html += `Continue current program with monitoring.`;\n            output.className = 'result success active';\n        }\n        output.innerHTML = html;\n    }, 2000);\n};\nwindow.getAdaptiveRIR = function() {\n    const output = document.getElementById('analyticsOut');\n    output.innerHTML = '<div class=\"loading\"></div> Analyzing RIR patterns for personalized recommendations...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const mockRIRHistory = [\n            {\n                actualRIR: 2.5,\n                targetRIR: 2,\n                nextDayFatigue: 3,\n                recoveryDays: 2\n            },\n            {\n                actualRIR: 1.5,\n                targetRIR: 1,\n                nextDayFatigue: 4,\n                recoveryDays: 3\n            },\n            {\n                actualRIR: 3,\n                targetRIR: 2,\n                nextDayFatigue: 2,\n                recoveryDays: 1\n            }\n        ];\n        const adaptiveRIR = (0, _analyticsJs.adaptiveRIRRecommendations)('Chest', mockRIRHistory);\n        let html = \"<strong>\\uD83C\\uDF9B\\uFE0F Adaptive RIR Recommendations:</strong><br><br>\";\n        html += `<strong>Recommended RIR:</strong> ${adaptiveRIR.recommendedRIR}<br>`;\n        html += `<strong>Confidence:</strong> ${adaptiveRIR.confidence}%<br>`;\n        html += `<strong>Reasoning:</strong> ${adaptiveRIR.reasoning}<br><br>`;\n        html += `<strong>Personalization Notes:</strong><br>`;\n        adaptiveRIR.personalizedFactors.forEach((factor)=>{\n            html += `\\u{2022} ${factor}<br>`;\n        });\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 1500);\n};\n// Program Generator Function\nwindow.generateWeeklyProgram = function() {\n    const output = document.getElementById('programOut');\n    output.innerHTML = '<div class=\"loading\"></div> Generating intelligent weekly program...';\n    output.className = 'result active';\n    setTimeout(()=>{\n        const days = parseInt(document.getElementById('programDays').value);\n        const split = document.getElementById('programSplit').value;\n        const sessionTime = parseInt(document.getElementById('sessionTime').value);\n        const experience = document.getElementById('experienceLevel').value;\n        const program = (0, _exerciseSelectionJs.generateWeeklyProgram)({\n            daysPerWeek: days,\n            splitType: split,\n            experienceLevel: experience,\n            timePerSession: sessionTime\n        });\n        let html = \"<strong>\\uD83D\\uDCCB Generated Weekly Program:</strong><br><br>\";\n        html += `<strong>Split Type:</strong> ${program.splitType}<br>`;\n        html += `<strong>Days Per Week:</strong> ${program.daysPerWeek}<br><br>`;\n        program.sessions.forEach((session)=>{\n            html += `<strong>Day ${session.day}: ${session.name}</strong><br>`;\n            session.exercises.forEach((exercise)=>{\n                html += `\\u{2022} ${exercise.exercise} - ${exercise.sets} sets x ${exercise.reps[0]}-${exercise.reps[1]} reps<br>`;\n            });\n            html += '<br>';\n        });\n        output.className = 'result success active';\n        output.innerHTML = html;\n    }, 2000);\n};\n/* ----- new utility system functions ----- */ // Data Export Functions\nwindow.exportAllData = function(format = 'json') {\n    const result = (0, _dataExportJs.dataExportManager).exportAllData(format, {\n        includePersonalData: true,\n        includeAnalytics: true,\n        includeWellness: true\n    });\n    if (result.success) {\n        console.log(`\\u{2705} Data exported successfully: ${result.filename}`);\n        showSystemMessage(`\\u{1F4E4} Data exported: ${result.filename} (${(result.size / 1024).toFixed(1)}KB)`, 'success');\n    } else {\n        console.error(\"\\u274C Export failed:\", result.error);\n        showSystemMessage(`\\u{274C} Export failed: ${result.error}`, 'error');\n    }\n};\nwindow.createBackup = function() {\n    const result = (0, _dataExportJs.dataExportManager).createAutoBackup();\n    if (result.success) {\n        console.log(\"\\u2705 Backup created:\", result.backupKey);\n        showSystemMessage(`\\u{1F4BE} Backup created successfully (${result.dataPoints} data points)`, 'success');\n    } else {\n        console.error(\"\\u274C Backup failed:\", result.error);\n        showSystemMessage(`\\u{274C} Backup failed: ${result.error}`, 'error');\n    }\n};\nwindow.viewBackups = function() {\n    const backups = (0, _dataExportJs.dataExportManager).getAvailableBackups();\n    let html = \"<strong>\\uD83D\\uDCE6 Available Backups:</strong><br><br>\";\n    if (backups.length === 0) html += '<p>No backups available. Create your first backup!</p>';\n    else backups.forEach((backup)=>{\n        const date = new Date(backup.date).toLocaleString();\n        const size = (backup.size / 1024).toFixed(1);\n        html += `<div style=\"margin: 10px 0; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;\">`;\n        html += `<strong>\\u{1F4C5} ${date}</strong><br>`;\n        html += `\\u{1F4CA} ${backup.dataPoints} data points | \\u{1F4BE} ${size}KB<br>`;\n        html += `<button onclick=\"restoreBackup('${backup.key}')\" style=\"margin-top: 5px; padding: 5px 10px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;\">Restore</button>`;\n        html += `</div>`;\n    });\n    const output = document.getElementById('backupResults') || createSystemOutput('backupResults');\n    output.innerHTML = html;\n    output.className = 'result active';\n};\nwindow.restoreBackup = function(backupKey) {\n    if (confirm(\"\\u26A0\\uFE0F This will overwrite your current data. Are you sure?\")) {\n        const result = (0, _dataExportJs.dataExportManager).restoreFromBackup(backupKey);\n        if (result.success) {\n            showSystemMessage(\"\\u2705 Backup restored successfully! Refreshing page...\", 'success');\n            setTimeout(()=>location.reload(), 2000);\n        } else showSystemMessage(`\\u{274C} Restore failed: ${result.error}`, 'error');\n    }\n};\n// Performance Functions\nwindow.getPerformanceReport = function() {\n    const report = (0, _performanceJs.performanceManager).generatePerformanceReport();\n    let html = \"<strong>\\u26A1 Performance Report:</strong><br><br>\";\n    html += `<strong>\\u{1F4CA} Load Performance:</strong><br>`;\n    html += `\\u{2022} Average Load Time: ${Math.round(report.performance.averageLoadTime)}ms<br>`;\n    html += `\\u{2022} 95th Percentile: ${Math.round(report.performance.loadTimeP95)}ms<br><br>`;\n    html += `<strong>\\u{1F4BE} Memory Usage:</strong><br>`;\n    html += `\\u{2022} Current: ${report.memory.currentUsage.toFixed(1)}MB<br>`;\n    html += `\\u{2022} Peak: ${report.memory.peakUsage.toFixed(1)}MB<br><br>`;\n    html += `<strong>\\u{1F5B1}\\u{FE0F} Interactions:</strong><br>`;\n    html += `\\u{2022} Total: ${report.interactions.totalInteractions}<br>`;\n    html += `\\u{2022} Average Delay: ${Math.round(report.interactions.averageDelay)}ms<br><br>`;\n    if (report.recommendations.length > 0) {\n        html += `<strong>\\u{1F4A1} Recommendations:</strong><br>`;\n        report.recommendations.forEach((rec)=>{\n            const priority = rec.priority === 'high' ? \"\\uD83D\\uDD34\" : rec.priority === 'medium' ? \"\\uD83D\\uDFE1\" : \"\\uD83D\\uDFE2\";\n            html += `${priority} ${rec.message}<br>`;\n        });\n    }\n    const output = document.getElementById('performanceResults') || createSystemOutput('performanceResults');\n    output.innerHTML = html;\n    output.className = 'result active';\n};\nwindow.clearPerformanceData = function() {\n    if (confirm('Clear all performance monitoring data?')) {\n        (0, _performanceJs.performanceManager).clearOldMetrics();\n        localStorage.removeItem('performance-issues');\n        showSystemMessage(\"\\uD83E\\uDDF9 Performance data cleared\", 'success');\n    }\n};\n// User Feedback Functions  \nwindow.openFeedbackWidget = function() {\n    (0, _userFeedbackJs.userFeedbackManager).openFeedbackPanel();\n};\nwindow.getUserAnalytics = function() {\n    const analytics = (0, _userFeedbackJs.userFeedbackManager).generateAnalyticsDashboard();\n    let html = \"<strong>\\uD83D\\uDCC8 Usage Analytics:</strong><br><br>\";\n    html += `<strong>\\u{1F4F1} Usage Stats:</strong><br>`;\n    html += `\\u{2022} Total Sessions: ${analytics.usage.totalSessions}<br>`;\n    html += `\\u{2022} Average Duration: ${analytics.usage.averageSessionDuration} minutes<br>`;\n    html += `\\u{2022} Features Used: ${analytics.usage.featuresUsed}<br>`;\n    html += `\\u{2022} Most Used: ${analytics.usage.mostUsedFeature}<br><br>`;\n    if (analytics.feedback.totalFeedback > 0) {\n        html += `<strong>\\u{1F4AC} Feedback Summary:</strong><br>`;\n        html += `\\u{2022} Total Feedback: ${analytics.feedback.totalFeedback}<br>`;\n        html += `\\u{2022} Average Rating: ${analytics.feedback.averageRating}/5 \\u{2B50}<br><br>`;\n    }\n    if (analytics.insights.length > 0) {\n        html += `<strong>\\u{1F4A1} Insights:</strong><br>`;\n        analytics.insights.forEach((insight)=>{\n            const icon = insight.type === 'milestone' ? \"\\uD83C\\uDF89\" : insight.type === 'satisfaction' ? \"\\u2B50\" : insight.type === 'advanced' ? \"\\uD83E\\uDDE0\" : \"\\uD83D\\uDCA1\";\n            html += `${icon} ${insight.message}<br>`;\n        });\n    }\n    const output = document.getElementById('analyticsResults') || createSystemOutput('analyticsResults');\n    output.innerHTML = html;\n    output.className = 'result active';\n};\n// System utility functions\nfunction showSystemMessage(message, type = 'info') {\n    const existingMessage = document.querySelector('.system-message');\n    if (existingMessage) existingMessage.remove();\n    const messageEl = document.createElement('div');\n    messageEl.className = `system-message ${type}`;\n    messageEl.style.cssText = `\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    padding: 15px 20px;\n    border-radius: 8px;\n    font-weight: 600;\n    z-index: 1000;\n    max-width: 400px;\n    box-shadow: 0 4px 20px rgba(0,0,0,0.15);\n    ${type === 'success' ? 'background: #d1fae5; color: #065f46; border: 1px solid #10b981;' : ''}\n    ${type === 'error' ? 'background: #fee2e2; color: #991b1b; border: 1px solid #ef4444;' : ''}\n    ${type === 'info' ? 'background: #dbeafe; color: #1e40af; border: 1px solid #3b82f6;' : ''}\n  `;\n    messageEl.textContent = message;\n    document.body.appendChild(messageEl);\n    setTimeout(()=>messageEl.remove(), 5000);\n}\nfunction createSystemOutput(id) {\n    let output = document.getElementById(id);\n    if (!output) {\n        output = document.createElement('div');\n        output.id = id;\n        output.className = 'result';\n        // Try to append to appropriate section\n        const sections = [\n            'advanced-content',\n            'setup-content',\n            'feedback-content'\n        ];\n        for (const sectionId of sections){\n            const section = document.getElementById(sectionId);\n            if (section) {\n                section.appendChild(output);\n                break;\n            }\n        }\n        if (!output.parentNode) document.body.appendChild(output);\n    }\n    return output;\n}\n\n},{\"./chartManager.js\":\"kLZpA\",\"../algorithms/volume.js\":\"1HfJW\",\"../algorithms/effort.js\":\"dELBV\",\"../algorithms/fatigue.js\":\"5s7BT\",\"../algorithms/validation.js\":\"cOYv8\",\"../core/trainingState.js\":\"iohWK\",\"../algorithms/analytics.js\":\"5eA0i\",\"../algorithms/exerciseSelection.js\":\"gGpfv\",\"../algorithms/livePerformance.js\":\"6qXhO\",\"../algorithms/intelligenceHub.js\":\"bDUtg\",\"../algorithms/dataVisualization.js\":\"ewacr\",\"../algorithms/wellnessIntegration.js\":\"baIS0\",\"../algorithms/periodizationSystem.js\":\"gvkvx\",\"../utils/dataExport.js\":\"iZ0Js\",\"../utils/userFeedback.js\":\"4cMS8\",\"../utils/performance.js\":\"5E6aE\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"kLZpA\":[function(require,module,exports,__globalThis) {\n/**\r\n * Chart Management UI\r\n * Handles all chart rendering and interactions\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// --- consolidated exports ---\nparcelHelpers.export(exports, \"initChart\", ()=>initChart);\nparcelHelpers.export(exports, \"updateChart\", ()=>updateChart);\nparcelHelpers.export(exports, \"resetChart\", ()=>resetChart);\nparcelHelpers.export(exports, \"addVolumeLandmarks\", ()=>addVolumeLandmarks);\nparcelHelpers.export(exports, \"exportChartImage\", ()=>exportChartImage);\nparcelHelpers.export(exports, \"showDeloadVisualization\", ()=>showDeloadVisualization);\nparcelHelpers.export(exports, \"weeklyChart\", ()=>weeklyChart);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nlet weeklyChart = null;\nconst muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n/**\r\n * Initialize the weekly volume chart\r\n */ function initChart() {\n    const canvas = document.getElementById('weeklyChart');\n    if (!canvas) {\n        console.error('Chart canvas not found');\n        return null;\n    }\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        console.error('Cannot get canvas context');\n        return null;\n    }\n    if (typeof Chart === 'undefined') {\n        console.error('Chart.js not loaded');\n        return null;\n    }\n    const chartData = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).currentWeekSets[muscle] || 0);\n    const backgroundColors = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).getVolumeColor(muscle));\n    weeklyChart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: muscles,\n            datasets: [\n                {\n                    label: 'Current Sets',\n                    data: chartData,\n                    backgroundColor: backgroundColors,\n                    borderColor: backgroundColors.map((color)=>color.replace('0.6', '1')),\n                    borderWidth: 2\n                },\n                {\n                    label: 'MEV',\n                    data: muscles.map((muscle)=>(0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MEV),\n                    type: 'line',\n                    borderColor: 'rgba(255, 255, 0, 0.8)',\n                    backgroundColor: 'transparent',\n                    borderWidth: 2,\n                    pointRadius: 3,\n                    pointBackgroundColor: 'rgba(255, 255, 0, 1)',\n                    borderDash: [\n                        5,\n                        5\n                    ]\n                },\n                {\n                    label: 'MRV',\n                    data: muscles.map((muscle)=>(0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MRV),\n                    type: 'line',\n                    borderColor: 'rgba(255, 0, 0, 0.8)',\n                    backgroundColor: 'transparent',\n                    borderWidth: 2,\n                    pointRadius: 3,\n                    pointBackgroundColor: 'rgba(255, 0, 0, 1)',\n                    borderDash: [\n                        10,\n                        5\n                    ]\n                }\n            ]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    labels: {\n                        color: '#fff'\n                    }\n                },\n                tooltip: {\n                    callbacks: {\n                        afterLabel: function(context) {\n                            const muscle = context.label;\n                            const sets = context.parsed.y;\n                            const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n                            const status = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle, sets);\n                            return [\n                                `Status: ${status}`,\n                                `MEV: ${landmarks.MEV} | MRV: ${landmarks.MRV}`,\n                                `Target RIR: ${(0, _trainingStateJsDefault.default).getTargetRIR()}`\n                            ];\n                        }\n                    }\n                }\n            },\n            scales: {\n                y: {\n                    beginAtZero: true,\n                    grid: {\n                        color: 'rgba(255, 255, 255, 0.1)'\n                    },\n                    ticks: {\n                        color: '#fff',\n                        stepSize: 1 // Show every 1 set on Y-axis\n                    }\n                },\n                x: {\n                    grid: {\n                        color: 'rgba(255, 255, 255, 0.1)'\n                    },\n                    ticks: {\n                        color: '#fff'\n                    }\n                }\n            }\n        }\n    });\n    return weeklyChart;\n}\n/**\r\n * Update chart with current data\r\n */ function updateChart() {\n    if (!weeklyChart) return;\n    const newData = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).currentWeekSets[muscle] || 0);\n    const newColors = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).getVolumeColor(muscle));\n    // Update current sets data\n    weeklyChart.data.datasets[0].data = newData;\n    weeklyChart.data.datasets[0].backgroundColor = newColors;\n    weeklyChart.data.datasets[0].borderColor = newColors.map((color)=>color.replace('0.6', '1'));\n    // Update landmark lines\n    weeklyChart.data.datasets[1].data = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MEV);\n    weeklyChart.data.datasets[2].data = muscles.map((muscle)=>(0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MRV);\n    weeklyChart.update();\n}\n/**\r\n * Reset chart data\r\n */ function resetChart() {\n    muscles.forEach((muscle)=>{\n        (0, _trainingStateJsDefault.default).updateWeeklySets(muscle, (0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MEV);\n    });\n    updateChart();\n}\n/**\r\n * Show deload visualization\r\n */ function showDeloadVisualization() {\n    if (!weeklyChart) return;\n    // Temporarily show 50% volume\n    const deloadData = muscles.map((muscle)=>Math.round((0, _trainingStateJsDefault.default).volumeLandmarks[muscle].MEV * 0.5));\n    weeklyChart.data.datasets[0].data = deloadData;\n    weeklyChart.data.datasets[0].backgroundColor = muscles.map(()=>'rgba(100, 100, 100, 0.6)');\n    weeklyChart.update();\n    // Reset after 3 seconds\n    setTimeout(()=>{\n        updateChart();\n    }, 3000);\n}\n/**\r\n * Add volume landmarks overlay to chart\r\n */ function addVolumeLandmarks() {\n    if (!weeklyChart) return;\n    // Landmarks are already built into the chart\n    // This function maintains compatibility with existing code\n    console.log('Volume landmarks are permanently displayed on chart');\n}\n/**\r\n * Export chart as image for reports\r\n */ function exportChartImage() {\n    if (!weeklyChart) {\n        console.warn('No chart available for export');\n        return null;\n    }\n    try {\n        // Get chart as base64 image\n        const base64Image = weeklyChart.toBase64Image('image/png', 1);\n        // Create download link\n        const link = document.createElement('a');\n        link.download = `workout-volume-chart-week-${(0, _trainingStateJsDefault.default).weekNo}.png`;\n        link.href = base64Image;\n        // Trigger download\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        // Show success message\n        const notification = document.createElement('div');\n        notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #4CAF50;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 8px;\n      z-index: 10000;\n      font-weight: 600;\n    `;\n        notification.textContent = 'Chart exported successfully!';\n        document.body.appendChild(notification);\n        setTimeout(()=>{\n            document.body.removeChild(notification);\n        }, 3000);\n        return base64Image;\n    } catch (e) {\n        console.error('Chart export failed:', e);\n        // Show error message\n        const notification = document.createElement('div');\n        notification.style.cssText = `\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      background: #f44336;\n      color: white;\n      padding: 12px 20px;\n      border-radius: 8px;\n      z-index: 10000;\n      font-weight: 600;\n    `;\n        notification.textContent = 'Export failed. Please try again.';\n        document.body.appendChild(notification);\n        setTimeout(()=>{\n            document.body.removeChild(notification);\n        }, 3000);\n        return null;\n    }\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"iohWK\":[function(require,module,exports,__globalThis) {\n/**\r\n * TrainingState Singleton - Renaissance Periodization Implementation\r\n * Manages all training state including volume landmarks, meso progression, and deload logic\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nclass TrainingState {\n    constructor(){\n        if (TrainingState.instance) return TrainingState.instance;\n        // Core RP Volume Landmarks (defaults from RP literature)\n        this.volumeLandmarks = {\n            'Chest': {\n                MV: 4,\n                MEV: 8,\n                MAV: 16,\n                MRV: 22\n            },\n            'Back': {\n                MV: 6,\n                MEV: 10,\n                MAV: 20,\n                MRV: 25\n            },\n            'Quads': {\n                MV: 6,\n                MEV: 10,\n                MAV: 20,\n                MRV: 25\n            },\n            'Hamstrings': {\n                MV: 4,\n                MEV: 6,\n                MAV: 16,\n                MRV: 20\n            },\n            'Shoulders': {\n                MV: 4,\n                MEV: 8,\n                MAV: 16,\n                MRV: 20\n            },\n            'Biceps': {\n                MV: 4,\n                MEV: 6,\n                MAV: 14,\n                MRV: 20\n            },\n            'Triceps': {\n                MV: 4,\n                MEV: 6,\n                MAV: 14,\n                MRV: 18\n            },\n            'Calves': {\n                MV: 6,\n                MEV: 8,\n                MAV: 16,\n                MRV: 22\n            },\n            'Abs': {\n                MV: 0,\n                MEV: 6,\n                MAV: 16,\n                MRV: 25\n            },\n            'Forearms': {\n                MV: 2,\n                MEV: 4,\n                MAV: 10,\n                MRV: 16\n            },\n            'Neck': {\n                MV: 0,\n                MEV: 2,\n                MAV: 8,\n                MRV: 12\n            },\n            'Traps': {\n                MV: 2,\n                MEV: 4,\n                MAV: 12,\n                MRV: 16\n            }\n        };\n        // Training progression state\n        this.weekNo = 1;\n        this.mesoLen = 4;\n        this.blockNo = 1;\n        this.deloadPhase = false;\n        this.resensitizationPhase = false;\n        // Current week data\n        this.currentWeekSets = {};\n        this.lastWeekSets = {};\n        // Baseline strength tracking for fatigue detection\n        this.baselineStrength = {};\n        // Initialize current week sets at MEV and baseline strength\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n            this.lastWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n            this.baselineStrength[muscle] = 100; // Default baseline load (kg)\n        });\n        // Performance tracking for deload detection\n        this.consecutiveMRVWeeks = 0;\n        this.recoverySessionsThisWeek = 0;\n        this.totalMusclesNeedingRecovery = 0;\n        TrainingState.instance = this;\n        this.loadState();\n    }\n    // Calculate target RIR based on meso progression\n    getTargetRIR() {\n        const startRIR = 3.0;\n        const endRIR = 0.5;\n        const progressionRate = (startRIR - endRIR) / (this.mesoLen - 1);\n        const targetRIR = startRIR - progressionRate * (this.weekNo - 1);\n        return Math.max(endRIR, Math.min(startRIR, targetRIR));\n    }\n    // Get volume status for a muscle\n    getVolumeStatus(muscle, sets = null) {\n        const currentSets = sets !== null ? sets : this.currentWeekSets[muscle];\n        const landmarks = this.volumeLandmarks[muscle];\n        if (currentSets < landmarks.MV) return 'under-minimum';\n        if (currentSets < landmarks.MEV) return 'maintenance';\n        if (currentSets < landmarks.MAV) return 'optimal';\n        if (currentSets < landmarks.MRV) return 'high';\n        return 'maximum';\n    }\n    // Get volume zone color for charting\n    getVolumeColor(muscle, sets = null) {\n        const status = this.getVolumeStatus(muscle, sets);\n        const colors = {\n            'under-minimum': '#ff4444',\n            'maintenance': '#ffaa00',\n            'optimal': '#44ff44',\n            'high': '#ffff44',\n            'maximum': '#ff4444' // Red\n        };\n        return colors[status];\n    }\n    // Update weekly sets for a muscle\n    updateWeeklySets(muscle, sets) {\n        this.currentWeekSets[muscle] = Math.max(0, sets);\n        this.saveState();\n    }\n    // Add sets to a muscle\n    addSets(muscle, additionalSets) {\n        this.currentWeekSets[muscle] += additionalSets;\n        this.currentWeekSets[muscle] = Math.max(0, this.currentWeekSets[muscle]);\n        this.saveState();\n    }\n    // Check if deload is needed\n    shouldDeload() {\n        // Check 1: Consecutive weeks at MRV\n        if (this.consecutiveMRVWeeks >= 2) return true;\n        // Check 2: Most muscles need recovery\n        const totalMuscles = Object.keys(this.volumeLandmarks).length;\n        if (this.totalMusclesNeedingRecovery >= Math.ceil(totalMuscles / 2)) return true;\n        // Check 3: Enhanced fatigue detection - if ≥1 major muscle hit MRV via fatigue this week\n        const majorMuscles = [\n            'Chest',\n            'Back',\n            'Quads',\n            'Shoulders'\n        ];\n        const fatigueBasedMRV = majorMuscles.some((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV && this.totalMusclesNeedingRecovery > 0);\n        if (fatigueBasedMRV) return true;\n        // Check 4: End of meso\n        if (this.weekNo >= this.mesoLen) return true;\n        return false;\n    }\n    // Check if resensitization is needed (every 3-6 mesos)\n    shouldResensitize() {\n        return this.blockNo % 4 === 0; // Every 4 blocks (adjustable)\n    }\n    // Start deload phase\n    startDeload() {\n        this.deloadPhase = true;\n        // Reduce all sets to 50% of MEV\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            const deloadSets = Math.round(this.volumeLandmarks[muscle].MEV * 0.5);\n            this.currentWeekSets[muscle] = deloadSets;\n        });\n        this.saveState();\n    }\n    // Start resensitization phase\n    startResensitization() {\n        this.resensitizationPhase = true;\n        // Set all muscles to MV\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MV;\n        });\n        this.saveState();\n    }\n    // Progress to next week\n    nextWeek() {\n        // Store last week's data\n        this.lastWeekSets = {\n            ...this.currentWeekSets\n        };\n        // Check for MRV breach\n        const mrvBreaches = Object.keys(this.volumeLandmarks).filter((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV);\n        if (mrvBreaches.length > 0) this.consecutiveMRVWeeks++;\n        else this.consecutiveMRVWeeks = 0;\n        // Progress week\n        this.weekNo++;\n        // Check for meso completion\n        if (this.weekNo > this.mesoLen) {\n            this.weekNo = 1;\n            this.blockNo++;\n            this.consecutiveMRVWeeks = 0;\n        }\n        // Reset weekly counters\n        this.recoverySessionsThisWeek = 0;\n        this.totalMusclesNeedingRecovery = 0;\n        this.saveState();\n    }\n    // Reset week (for testing/corrections)\n    resetWeek() {\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n        });\n        this.saveState();\n    }\n    // Auto-progression methods\n    // Mark muscle as hitting MRV for deload tracking\n    hitMRV(muscle) {\n        this.totalMusclesNeedingRecovery++;\n        // Check if this muscle has been at MRV for consecutive weeks\n        const atMRV = this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV;\n        if (atMRV) this.consecutiveMRVWeeks++;\n        this.saveState();\n    }\n    // Get current weekly sets for a muscle\n    getWeeklySets(muscle) {\n        return this.currentWeekSets[muscle] || this.volumeLandmarks[muscle].MEV;\n    }\n    // Initialize muscle at MEV (for new week or reset)\n    initializeMuscleAtMEV(muscle) {\n        this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n        this.saveState();\n    }\n    // Check if most muscles are at MRV (deload trigger)\n    mostMusclesAtMRV() {\n        const muscles = Object.keys(this.volumeLandmarks);\n        const mrvCount = muscles.filter((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV).length;\n        return mrvCount >= Math.ceil(muscles.length * 0.5);\n    }\n    // Set baseline strength for a muscle (typically week 1 top set)\n    setBaselineStrength(muscle, load) {\n        this.baselineStrength[muscle] = load;\n        this.saveState();\n    }\n    // Check for rep strength drop (fatigue indicator)\n    repStrengthDrop(muscle, lastLoad) {\n        const baseline = this.baselineStrength[muscle];\n        if (!baseline || !lastLoad) return false;\n        // Consider significant drop if last load < 97% of baseline\n        const strengthDropThreshold = 0.97;\n        return lastLoad < baseline * strengthDropThreshold;\n    }\n    // Update volume landmarks for a muscle\n    updateVolumeLandmarks(muscle, landmarks) {\n        this.volumeLandmarks[muscle] = {\n            ...this.volumeLandmarks[muscle],\n            ...landmarks\n        };\n        this.saveState();\n    }\n    // Calculate recovery volume\n    getRecoveryVolume(muscle, hasIllness = false) {\n        const landmarks = this.volumeLandmarks[muscle];\n        const midpoint = Math.round((landmarks.MEV + landmarks.MRV) / 2);\n        const adjustment = hasIllness ? 2 : 1;\n        const recoveryVolume = midpoint - adjustment;\n        return Math.max(recoveryVolume, Math.ceil(landmarks.MEV * 0.5));\n    }\n    // Save state to localStorage\n    saveState() {\n        const state = {\n            volumeLandmarks: this.volumeLandmarks,\n            weekNo: this.weekNo,\n            mesoLen: this.mesoLen,\n            blockNo: this.blockNo,\n            deloadPhase: this.deloadPhase,\n            resensitizationPhase: this.resensitizationPhase,\n            currentWeekSets: this.currentWeekSets,\n            lastWeekSets: this.lastWeekSets,\n            consecutiveMRVWeeks: this.consecutiveMRVWeeks,\n            recoverySessionsThisWeek: this.recoverySessionsThisWeek,\n            totalMusclesNeedingRecovery: this.totalMusclesNeedingRecovery\n        };\n        localStorage.setItem('rp-training-state', JSON.stringify(state));\n    }\n    // Load state from localStorage\n    loadState() {\n        const saved = localStorage.getItem('rp-training-state');\n        if (saved) try {\n            const state = JSON.parse(saved);\n            Object.assign(this, state);\n        } catch (e) {\n            console.warn('Failed to load training state, using defaults');\n        }\n    }\n    // Migrate legacy localStorage data\n    migrateLegacyData() {\n        const muscles = Object.keys(this.volumeLandmarks);\n        let hasLegacyData = false;\n        muscles.forEach((muscle)=>{\n            // Check for old format keys\n            const oldKey = `week-1-${muscle}`;\n            const oldValue = localStorage.getItem(oldKey);\n            if (oldValue) {\n                this.currentWeekSets[muscle] = parseInt(oldValue, 10);\n                localStorage.removeItem(oldKey);\n                hasLegacyData = true;\n            }\n            // Migrate MEV/MRV settings\n            const mevKey = `${muscle}-MEV`;\n            const mrvKey = `${muscle}-MRV`;\n            const mevValue = localStorage.getItem(mevKey);\n            const mrvValue = localStorage.getItem(mrvKey);\n            if (mevValue || mrvValue) {\n                this.volumeLandmarks[muscle] = {\n                    ...this.volumeLandmarks[muscle],\n                    MEV: mevValue ? parseInt(mevValue, 10) : this.volumeLandmarks[muscle].MEV,\n                    MRV: mrvValue ? parseInt(mrvValue, 10) : this.volumeLandmarks[muscle].MRV\n                };\n                if (mevValue) localStorage.removeItem(mevKey);\n                if (mrvValue) localStorage.removeItem(mrvKey);\n                hasLegacyData = true;\n            }\n        });\n        if (hasLegacyData) {\n            this.saveState();\n            console.log('Legacy data migrated to new RP training state');\n        }\n    }\n    // Get current state summary\n    getStateSummary() {\n        return {\n            week: this.weekNo,\n            meso: this.mesoLen,\n            block: this.blockNo,\n            targetRIR: this.getTargetRIR(),\n            deloadRecommended: this.shouldDeload(),\n            resensitizationRecommended: this.shouldResensitize(),\n            currentPhase: this.deloadPhase ? 'deload' : this.resensitizationPhase ? 'resensitization' : 'accumulation'\n        };\n    }\n}\n// Export singleton instance\nconst trainingState = new TrainingState();\nexports.default = trainingState;\n// Also make available globally for legacy compatibility\nif (typeof window !== 'undefined') window.trainingState = trainingState;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"91HVb\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}],\"1HfJW\":[function(require,module,exports,__globalThis) {\n/**\r\n * Renaissance Periodization Volume Algorithms\r\n * Implements RP Table 2.2 (MEV Stimulus Estimator) and Table 2.3 (Set Progression Algorithm)\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Export all functions\nparcelHelpers.export(exports, \"scoreStimulus\", ()=>scoreStimulus);\nparcelHelpers.export(exports, \"mevStimulusEstimator\", ()=>scoreStimulus);\nparcelHelpers.export(exports, \"setProgressionAlgorithm\", ()=>setProgressionAlgorithm);\nparcelHelpers.export(exports, \"rpSetProgression\", ()=>setProgressionAlgorithm);\nparcelHelpers.export(exports, \"analyzeVolumeStatus\", ()=>analyzeVolumeStatus);\nparcelHelpers.export(exports, \"calculateRecoveryVolume\", ()=>calculateRecoveryVolume);\nparcelHelpers.export(exports, \"validateVolumeInput\", ()=>validateVolumeInput);\nparcelHelpers.export(exports, \"getVolumeProgression\", ()=>getVolumeProgression);\nparcelHelpers.export(exports, \"analyzeDeloadNeed\", ()=>analyzeDeloadNeed);\nparcelHelpers.export(exports, \"autoSetIncrement\", ()=>autoSetIncrement);\nparcelHelpers.export(exports, \"processWeeklyVolumeProgression\", ()=>processWeeklyVolumeProgression);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nvar _fatigueJs = require(\"./fatigue.js\");\n/**\r\n * RP Table 2.2: MEV Stimulus Estimator\r\n * Scores stimulus quality based on mind-muscle connection, pump, and disruption\r\n * @param {Object} feedback - {mmc: 0-3, pump: 0-3, disruption: 0-3}\r\n * @returns {Object} - {score: 0-9, advice: string, action: string}\r\n */ function scoreStimulus({ mmc, pump, disruption }) {\n    // Validate inputs\n    const clamp = (val, min, max)=>Math.max(min, Math.min(max, val));\n    const clampedMmc = clamp(mmc, 0, 3);\n    const clampedPump = clamp(pump, 0, 3);\n    const clampedDisruption = clamp(disruption, 0, 3);\n    const totalScore = clampedMmc + clampedPump + clampedDisruption;\n    let advice, action, setChange;\n    if (totalScore <= 3) {\n        advice = `Stimulus too low (${totalScore}/9) \\u{2192} Add 2 sets next session`;\n        action = 'add_sets';\n        setChange = 2;\n    } else if (totalScore <= 6) {\n        advice = `Stimulus adequate (${totalScore}/9) \\u{2192} Keep sets the same`;\n        action = 'maintain';\n        setChange = 0;\n    } else {\n        advice = `Stimulus excessive (${totalScore}/9) \\u{2192} Remove 1-2 sets next session`;\n        action = 'reduce_sets';\n        setChange = -1;\n    }\n    return {\n        score: totalScore,\n        advice,\n        action,\n        setChange,\n        breakdown: {\n            mmc: clampedMmc,\n            pump: clampedPump,\n            disruption: clampedDisruption\n        }\n    };\n}\n/**\r\n * Auto-Volume Progression System\r\n * Automatically increments sets based on MEV/MRV status and recovery feedback\r\n * @param {string} muscle - Target muscle group\r\n * @param {Object} feedback - {stimulus: 0-9, soreness: 0-3, perf: -1 to 2, recoverySession: boolean}\r\n * @param {Object} state - Training state singleton\r\n * @returns {Object} - {add: boolean, delta: number, reason: string}\r\n */ function autoSetIncrement(muscle, feedback, state) {\n    const { MEV, MRV } = state.volumeLandmarks[muscle];\n    const currentSets = state.currentWeekSets[muscle] || MEV;\n    const atMEV = currentSets <= MEV;\n    const atMRV = currentSets >= MRV;\n    const lowStimulus = feedback.stimulus <= 3;\n    const goodRecovery = feedback.soreness <= 1 && feedback.perf >= 0;\n    // Don't add if at MRV or recovery session needed\n    if (atMRV || feedback.recoverySession) return {\n        add: false,\n        delta: 0,\n        reason: atMRV ? 'At MRV - holding volume' : 'Recovery session needed'\n    };\n    // Add sets if at MEV or if low stimulus with good recovery\n    if (atMEV || lowStimulus && goodRecovery) {\n        const baseDelta = 1;\n        const mevBonus = atMEV ? 1 : 0; // Extra set boost when starting from MEV\n        const totalDelta = Math.min(baseDelta + mevBonus, 2); // Cap at +2 sets max\n        return {\n            add: true,\n            delta: totalDelta,\n            reason: atMEV ? 'Starting from MEV - aggressive progression' : 'Low stimulus with good recovery'\n        };\n    }\n    return {\n        add: false,\n        delta: 0,\n        reason: 'Maintaining current volume'\n    };\n}\n/**\r\n * Process weekly auto-volume progression for all muscles\r\n * @param {Object} weeklyFeedback - {muscle: {stimulus, soreness, perf, recoverySession}}\r\n * @param {Object} state - Training state singleton\r\n * @returns {Object} - Progression summary and deload recommendation\r\n */ function processWeeklyVolumeProgression(weeklyFeedback, state) {\n    const progressionLog = {};\n    let deloadTriggered = false;\n    let mrvHits = 0;\n    // Process each muscle's auto-progression\n    Object.keys(weeklyFeedback).forEach((muscle)=>{\n        const feedback = weeklyFeedback[muscle];\n        // Check for high fatigue using enhanced detection\n        const high = (0, _fatigueJs.isHighFatigue)(muscle, feedback, state);\n        if (high) {\n            // Treat like MRV - trigger recovery\n            state.hitMRV(muscle);\n            mrvHits++;\n            console.log(`hitMRV: true (fatigue) - ${muscle}`);\n            // Force recovery session\n            feedback.recoverySession = true;\n        }\n        const increment = autoSetIncrement(muscle, feedback, state);\n        // Apply set changes\n        if (increment.add) state.addSets(muscle, increment.delta);\n        // Track MRV hits for deload logic\n        if (state.getWeeklySets(muscle) >= state.volumeLandmarks[muscle].MRV) {\n            state.hitMRV(muscle);\n            mrvHits++;\n        }\n        progressionLog[muscle] = {\n            previousSets: state.lastWeekSets[muscle] || state.volumeLandmarks[muscle].MEV,\n            currentSets: state.getWeeklySets(muscle),\n            increment: increment.delta,\n            reason: increment.reason,\n            status: state.getVolumeStatus(muscle)\n        };\n    });\n    // Check deload conditions\n    if (state.shouldDeload()) {\n        state.startDeload();\n        deloadTriggered = true;\n    }\n    return {\n        progressionLog,\n        deloadTriggered,\n        mrvHits,\n        weekComplete: true,\n        recommendation: deloadTriggered ? 'Deload phase initiated' : 'Continue progression'\n    };\n}\n/**\r\n * RP Table 2.3: Set Progression Algorithm\r\n * Matrix lookup based on soreness level and performance vs last session\r\n * @param {number} soreness - 0-3 (0=none, 1=mild, 2=moderate, 3=high)\r\n * @param {number} performance - 0-3 (0=worse, 1=same, 2=better, 3=much better)\r\n * @returns {Object} - {advice: string, action: string, setChange: number}\r\n */ function setProgressionAlgorithm(soreness, performance) {\n    // Clamp inputs to valid ranges\n    const clamp = (val, min, max)=>Math.max(min, Math.min(max, val));\n    const s = clamp(soreness, 0, 3);\n    const p = clamp(performance, 0, 3);\n    // RP Set Progression Matrix [soreness][performance]\n    const progressionMatrix = [\n        // Soreness 0 (None)\n        [\n            {\n                advice: \"Add 1 set next session\",\n                action: \"add_sets\",\n                setChange: 1\n            },\n            {\n                advice: \"Add 2 sets next session\",\n                action: \"add_sets\",\n                setChange: 2\n            },\n            {\n                advice: \"Add 2-3 sets next session\",\n                action: \"add_sets\",\n                setChange: 2\n            },\n            {\n                advice: \"Add 2-3 sets next session\",\n                action: \"add_sets\",\n                setChange: 3\n            } // Performance 3 (much better)\n        ],\n        // Soreness 1 (Mild)\n        [\n            {\n                advice: \"Hold sets at current level\",\n                action: \"maintain\",\n                setChange: 0\n            },\n            {\n                advice: \"Add 1 set next session\",\n                action: \"add_sets\",\n                setChange: 1\n            },\n            {\n                advice: \"Add 2 sets next session\",\n                action: \"add_sets\",\n                setChange: 2\n            },\n            {\n                advice: \"Add 2-3 sets next session\",\n                action: \"add_sets\",\n                setChange: 2\n            } // Performance 3\n        ],\n        // Soreness 2 (Moderate)\n        [\n            {\n                advice: \"Do recovery session\",\n                action: \"recovery\",\n                setChange: -99\n            },\n            {\n                advice: \"Hold sets at current level\",\n                action: \"maintain\",\n                setChange: 0\n            },\n            {\n                advice: \"Hold sets at current level\",\n                action: \"maintain\",\n                setChange: 0\n            },\n            {\n                advice: \"Add 1 set next session\",\n                action: \"add_sets\",\n                setChange: 1\n            } // Performance 3\n        ],\n        // Soreness 3 (High)\n        [\n            {\n                advice: \"Do recovery session\",\n                action: \"recovery\",\n                setChange: -99\n            },\n            {\n                advice: \"Do recovery session\",\n                action: \"recovery\",\n                setChange: -99\n            },\n            {\n                advice: \"Do recovery session\",\n                action: \"recovery\",\n                setChange: -99\n            },\n            {\n                advice: \"Hold sets at current level\",\n                action: \"maintain\",\n                setChange: 0\n            } // Performance 3\n        ]\n    ];\n    return progressionMatrix[s][p];\n}\n/**\r\n * Analyze current volume status relative to landmarks\r\n * @param {string} muscle - Muscle group name\r\n * @param {number} currentSets - Current weekly sets (optional, uses state if not provided)\r\n * @returns {Object} - Volume analysis\r\n */ function analyzeVolumeStatus(muscle, currentSets = null) {\n    const sets = currentSets !== null ? currentSets : (0, _trainingStateJsDefault.default).currentWeekSets[muscle];\n    const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    if (!landmarks) throw new Error(`Unknown muscle group: ${muscle}`);\n    const status = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle, sets);\n    const percentage = sets / landmarks.MRV * 100;\n    let recommendation = '';\n    let urgency = 'normal';\n    switch(status){\n        case 'under-minimum':\n            recommendation = `Below MV (${landmarks.MV}). Increase volume significantly.`;\n            urgency = 'high';\n            break;\n        case 'maintenance':\n            recommendation = `In maintenance zone (${landmarks.MV}-${landmarks.MEV}). Consider increasing for growth.`;\n            urgency = 'low';\n            break;\n        case 'optimal':\n            recommendation = `In optimal zone (${landmarks.MEV}-${landmarks.MAV}). Continue progressive overload.`;\n            urgency = 'normal';\n            break;\n        case 'high':\n            recommendation = `High volume zone (${landmarks.MAV}-${landmarks.MRV}). Monitor recovery closely.`;\n            urgency = 'medium';\n            break;\n        case 'maximum':\n            recommendation = `At/above MRV (${landmarks.MRV}). Deload recommended.`;\n            urgency = 'high';\n            break;\n    }\n    return {\n        muscle,\n        currentSets: sets,\n        landmarks,\n        status,\n        percentage: Math.round(percentage),\n        recommendation,\n        urgency,\n        color: (0, _trainingStateJsDefault.default).getVolumeColor(muscle, sets)\n    };\n}\n/**\r\n * Calculate recovery session volume\r\n * @param {string} muscle - Muscle group name\r\n * @param {boolean} hasIllness - Whether trainee has illness/injury\r\n * @returns {Object} - Recovery session recommendation\r\n */ function calculateRecoveryVolume(muscle, hasIllness = false) {\n    const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    const recoveryVolume = (0, _trainingStateJsDefault.default).getRecoveryVolume(muscle, hasIllness);\n    return {\n        muscle,\n        recommendedSets: recoveryVolume,\n        reasoning: hasIllness ? 'illness adjustment' : 'standard recovery',\n        landmarks,\n        percentage: Math.round(recoveryVolume / landmarks.MEV * 100)\n    };\n}\n/**\r\n * Validate volume input against landmarks\r\n * @param {string} muscle - Muscle group name\r\n * @param {number} proposedSets - Proposed weekly sets\r\n * @returns {Object} - Validation result\r\n */ function validateVolumeInput(muscle, proposedSets) {\n    const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    const isValid = proposedSets >= 0 && proposedSets <= landmarks.MRV * 1.2; // Allow 20% over MRV\n    let warning = '';\n    if (proposedSets < 0) warning = 'Sets cannot be negative';\n    else if (proposedSets > landmarks.MRV) warning = `Above MRV (${landmarks.MRV}). Consider deload.`;\n    else if (proposedSets < landmarks.MV) warning = `Below MV (${landmarks.MV}). May not be sufficient for adaptation.`;\n    return {\n        isValid,\n        warning,\n        proposedSets,\n        landmarks\n    };\n}\n/**\r\n * Get volume progression recommendation for next week\r\n * @param {string} muscle - Muscle group name\r\n * @param {Object} feedback - Latest training feedback\r\n * @returns {Object} - Next week recommendation\r\n */ function getVolumeProgression(muscle, feedback) {\n    const currentSets = (0, _trainingStateJsDefault.default).currentWeekSets[muscle];\n    const volumeAnalysis = analyzeVolumeStatus(muscle);\n    // Get stimulus score\n    const stimulusResult = scoreStimulus(feedback.stimulus);\n    // Get set progression recommendation\n    const progressionResult = setProgressionAlgorithm(feedback.soreness, feedback.performance);\n    // Combine recommendations with volume constraints\n    let finalSetChange = progressionResult.setChange;\n    let finalAdvice = progressionResult.advice;\n    // Override if at volume limits\n    if (volumeAnalysis.status === 'maximum' && finalSetChange > 0) {\n        finalSetChange = 0;\n        finalAdvice = \"At MRV limit. Hold sets or consider deload.\";\n    }\n    if (volumeAnalysis.status === 'under-minimum' && finalSetChange <= 0) {\n        finalSetChange = 2;\n        finalAdvice = \"Below minimum volume. Add sets regardless of fatigue.\";\n    }\n    // Special handling for recovery sessions\n    if (progressionResult.action === 'recovery') {\n        const recoveryVolume = calculateRecoveryVolume(muscle, feedback.hasIllness);\n        finalSetChange = recoveryVolume.recommendedSets - currentSets;\n        finalAdvice = `Recovery session: ${recoveryVolume.recommendedSets} sets (${recoveryVolume.reasoning})`;\n    }\n    const projectedSets = Math.max(0, currentSets + finalSetChange);\n    return {\n        muscle,\n        currentSets,\n        projectedSets,\n        setChange: finalSetChange,\n        advice: finalAdvice,\n        stimulusScore: stimulusResult.score,\n        volumeStatus: volumeAnalysis.status,\n        targetRIR: (0, _trainingStateJsDefault.default).getTargetRIR(),\n        deloadRecommended: (0, _trainingStateJsDefault.default).shouldDeload()\n    };\n}\n/**\r\n * Analyze all muscles for deload necessity\r\n * @returns {Object} - Deload analysis\r\n */ function analyzeDeloadNeed() {\n    const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n    const mrvBreaches = muscles.filter((muscle)=>(0, _trainingStateJsDefault.default).getVolumeStatus(muscle) === 'maximum');\n    const shouldDeload = (0, _trainingStateJsDefault.default).shouldDeload();\n    const reasons = [];\n    if ((0, _trainingStateJsDefault.default).consecutiveMRVWeeks >= 2) reasons.push('Two consecutive weeks at MRV');\n    if ((0, _trainingStateJsDefault.default).totalMusclesNeedingRecovery >= Math.ceil(muscles.length / 2)) reasons.push('Most muscles need recovery sessions');\n    if ((0, _trainingStateJsDefault.default).weekNo >= (0, _trainingStateJsDefault.default).mesoLen) reasons.push('End of mesocycle reached');\n    if (mrvBreaches.length >= Math.ceil(muscles.length / 3)) reasons.push(`${mrvBreaches.length} muscle groups at/above MRV`);\n    return {\n        shouldDeload,\n        reasons,\n        mrvBreaches,\n        consecutiveMRVWeeks: (0, _trainingStateJsDefault.default).consecutiveMRVWeeks,\n        currentWeek: (0, _trainingStateJsDefault.default).weekNo,\n        mesoLength: (0, _trainingStateJsDefault.default).mesoLen,\n        musclesNeedingRecovery: (0, _trainingStateJsDefault.default).totalMusclesNeedingRecovery\n    };\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"./fatigue.js\":\"5s7BT\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"5s7BT\":[function(require,module,exports,__globalThis) {\n/**\r\n * Renaissance Periodization Fatigue Management\r\n * Handles recovery monitoring, frequency optimization, and fatigue accumulation\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"analyzeFrequency\", ()=>analyzeFrequency);\nparcelHelpers.export(exports, \"calculateOptimalFrequency\", ()=>calculateOptimalFrequency);\nparcelHelpers.export(exports, \"isHighFatigue\", ()=>isHighFatigue);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Analyze recovery status and frequency optimization\r\n * @param {number} sorenessRecoveryDays - Days until soreness is gone\r\n * @param {number} currentSessionGap - Days between sessions for this muscle\r\n * @param {string} muscle - Muscle group name\r\n * @returns {Object} - Frequency analysis\r\n */ function analyzeFrequency(sorenessRecoveryDays, currentSessionGap, muscle = null) {\n    const recoveryTime = Math.max(0, sorenessRecoveryDays);\n    const sessionGap = Math.max(1, currentSessionGap);\n    let recommendation = '';\n    let action = '';\n    let urgency = 'normal';\n    let frequencyAdjustment = 0;\n    // Recovery vs session gap analysis\n    const recoveryRatio = recoveryTime / sessionGap;\n    if (recoveryRatio < 0.7) {\n        // Recovering much faster than session frequency\n        recommendation = \"You heal early \\u2192 Add one session per week\";\n        action = 'increase_frequency';\n        frequencyAdjustment = 1;\n        urgency = 'medium';\n    } else if (recoveryRatio > 1.3) {\n        // Still sore when next session is due\n        recommendation = \"Recovery lags \\u2192 Insert an extra rest day\";\n        action = 'decrease_frequency';\n        frequencyAdjustment = -1;\n        urgency = 'high';\n    } else {\n        // Optimal recovery timing\n        recommendation = 'Frequency is optimal';\n        action = 'maintain';\n        frequencyAdjustment = 0;\n        urgency = 'normal';\n    }\n    // Consider current volume when making frequency recommendations\n    if (muscle) {\n        const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n        if (volumeStatus === 'maximum' && action === 'increase_frequency') {\n            recommendation = 'At MRV - maintain frequency despite early recovery';\n            action = 'maintain';\n            frequencyAdjustment = 0;\n        }\n        if (volumeStatus === 'under-minimum' && action === 'decrease_frequency') {\n            recommendation = 'Below MV - consider recovery methods instead of reducing frequency';\n            action = 'improve_recovery';\n            frequencyAdjustment = 0;\n        }\n    }\n    return {\n        sorenessRecoveryDays: recoveryTime,\n        currentSessionGap: sessionGap,\n        recoveryRatio: Math.round(recoveryRatio * 100) / 100,\n        recommendation,\n        action,\n        frequencyAdjustment,\n        urgency,\n        muscle\n    };\n}\n/**\r\n * Assess overall fatigue accumulation\r\n * @param {Object} weeklyData - Weekly fatigue metrics\r\n * @returns {Object} - Fatigue assessment\r\n */ function assessFatigueAccumulation(weeklyData) {\n    const { averageSoreness = 1, sleepQuality = 7, stressLevel = 5, musclesNeedingRecovery = 0, consecutiveMRVWeeks = 0, performanceDecline = false } = weeklyData;\n    // Calculate fatigue score (0-100)\n    let fatigueScore = 0;\n    // Soreness contribution (0-30 points)\n    fatigueScore += Math.min(30, averageSoreness / 3 * 30);\n    // Sleep quality contribution (0-20 points, inverted)\n    fatigueScore += Math.max(0, 20 - sleepQuality / 10 * 20);\n    // Stress level contribution (0-20 points)\n    fatigueScore += stressLevel / 10 * 20;\n    // Volume overreaching contribution (0-20 points)\n    const volumeOverreach = Math.min(20, musclesNeedingRecovery / 12 * 20);\n    fatigueScore += volumeOverreach;\n    // Consecutive MRV weeks (0-10 points)\n    fatigueScore += Math.min(10, consecutiveMRVWeeks * 5);\n    // Performance decline bonus\n    if (performanceDecline) fatigueScore += 10;\n    // Determine fatigue level\n    let fatigueLevel = '';\n    let recommendations = [];\n    let deloadUrgency = 'none';\n    if (fatigueScore <= 25) {\n        fatigueLevel = 'low';\n        recommendations.push('Continue current program');\n        recommendations.push('Consider volume progression opportunities');\n    } else if (fatigueScore <= 50) {\n        fatigueLevel = 'moderate';\n        recommendations.push('Monitor recovery closely');\n        recommendations.push('Ensure adequate sleep and nutrition');\n        deloadUrgency = 'low';\n    } else if (fatigueScore <= 75) {\n        fatigueLevel = 'high';\n        recommendations.push('Reduce training stress');\n        recommendations.push('Consider recovery week');\n        recommendations.push('Prioritize sleep and stress management');\n        deloadUrgency = 'medium';\n    } else {\n        fatigueLevel = 'excessive';\n        recommendations.push('Implement deload immediately');\n        recommendations.push('Address sleep and lifestyle factors');\n        recommendations.push('Consider extending deload period');\n        deloadUrgency = 'high';\n    }\n    return {\n        fatigueScore: Math.round(fatigueScore),\n        fatigueLevel,\n        recommendations,\n        deloadUrgency,\n        breakdown: {\n            soreness: Math.min(30, averageSoreness / 3 * 30),\n            sleep: Math.max(0, 20 - sleepQuality / 10 * 20),\n            stress: stressLevel / 10 * 20,\n            volume: volumeOverreach,\n            consecutive: Math.min(10, consecutiveMRVWeeks * 5),\n            performance: performanceDecline ? 10 : 0\n        }\n    };\n}\n/**\r\n * Generate recovery session recommendations\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} options - Recovery options\r\n * @returns {Object} - Recovery session plan\r\n */ function generateRecoverySession(muscle, options = {}) {\n    const { hasIllness = false, sorenessLevel = 2, lastSessionRIR = 0, preferredRecoveryType = 'volume' } = options;\n    const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    const baseRecoveryVolume = (0, _trainingStateJsDefault.default).getRecoveryVolume(muscle, hasIllness);\n    let recoveryPlan = {\n        muscle,\n        type: preferredRecoveryType,\n        sets: baseRecoveryVolume,\n        intensity: '60-70% of normal',\n        rirTarget: '3-4 RIR',\n        duration: '1 session',\n        notes: []\n    };\n    // Adjust based on soreness level\n    if (sorenessLevel >= 3) {\n        recoveryPlan.sets = Math.round(baseRecoveryVolume * 0.7);\n        recoveryPlan.intensity = '50-60% of normal';\n        recoveryPlan.rirTarget = '4-5 RIR';\n        recoveryPlan.notes.push('High soreness - very light session');\n    }\n    // Adjust for illness\n    if (hasIllness) {\n        recoveryPlan.sets = Math.round(recoveryPlan.sets * 0.8);\n        recoveryPlan.intensity = '40-50% of normal';\n        recoveryPlan.notes.push('Illness present - prioritize rest');\n    }\n    // Adjust based on last session intensity\n    if (lastSessionRIR <= 0.5) {\n        recoveryPlan.sets = Math.round(recoveryPlan.sets * 0.8);\n        recoveryPlan.notes.push('Last session was very intense');\n    }\n    // Recovery type specific adjustments\n    if (preferredRecoveryType === 'deload') {\n        recoveryPlan.sets = Math.round(landmarks.MEV * 0.5);\n        recoveryPlan.intensity = '40-50% of normal';\n        recoveryPlan.duration = '3-7 days';\n        recoveryPlan.notes.push('Full deload protocol');\n    }\n    return recoveryPlan;\n}\n/**\r\n * Monitor overreaching vs overtraining risk\r\n * @param {Object} metrics - Training metrics over time\r\n * @returns {Object} - Risk assessment\r\n */ function assessOverreachingRisk(metrics) {\n    const { weeklyPerformanceTrend = [], weeklyFatigueTrend = [], volumeProgression = [], motivationLevel = 5, injuryRisk = 1 // 1-10\n     } = metrics;\n    let riskScore = 0;\n    let riskFactors = [];\n    // Performance trend analysis\n    if (weeklyPerformanceTrend.length >= 2) {\n        const recentTrend = weeklyPerformanceTrend.slice(-3);\n        const isDecreasing = recentTrend.every((val, i)=>i === 0 || val <= recentTrend[i - 1]);\n        if (isDecreasing) {\n            riskScore += 20;\n            riskFactors.push('Consistent performance decline');\n        }\n    }\n    // Fatigue accumulation\n    if (weeklyFatigueTrend.length >= 2) {\n        const avgFatigue = weeklyFatigueTrend.reduce((a, b)=>a + b, 0) / weeklyFatigueTrend.length;\n        if (avgFatigue > 60) {\n            riskScore += 25;\n            riskFactors.push('High average fatigue');\n        }\n    }\n    // Volume progression rate\n    if (volumeProgression.length >= 3) {\n        const volumeIncrease = volumeProgression[volumeProgression.length - 1] - volumeProgression[0];\n        const weekSpan = volumeProgression.length;\n        const weeklyIncrease = volumeIncrease / weekSpan;\n        if (weeklyIncrease > 2) {\n            riskScore += 15;\n            riskFactors.push('Rapid volume progression');\n        }\n    }\n    // Motivation and wellbeing\n    if (motivationLevel <= 3) {\n        riskScore += 15;\n        riskFactors.push('Low motivation/enjoyment');\n    }\n    // Injury risk\n    if (injuryRisk >= 7) {\n        riskScore += 15;\n        riskFactors.push('High injury risk indicators');\n    }\n    // Current training state\n    if ((0, _trainingStateJsDefault.default).consecutiveMRVWeeks >= 2) {\n        riskScore += 10;\n        riskFactors.push('Consecutive weeks at MRV');\n    }\n    // Determine risk level\n    let riskLevel = '';\n    let recommendations = [];\n    if (riskScore <= 20) {\n        riskLevel = 'low';\n        recommendations.push('Continue progressive overload');\n        recommendations.push('Monitor for early warning signs');\n    } else if (riskScore <= 40) {\n        riskLevel = 'moderate';\n        recommendations.push('Slow progression rate');\n        recommendations.push('Increase recovery focus');\n        recommendations.push('Consider planned deload');\n    } else if (riskScore <= 70) {\n        riskLevel = 'high';\n        recommendations.push('Implement deload week');\n        recommendations.push('Address lifestyle stressors');\n        recommendations.push('Reduce training frequency');\n    } else {\n        riskLevel = 'critical';\n        recommendations.push('Stop training temporarily');\n        recommendations.push('Focus on full recovery');\n        recommendations.push('Consult with coach/healthcare provider');\n    }\n    return {\n        riskScore,\n        riskLevel,\n        riskFactors,\n        recommendations,\n        requiresImmediateAction: riskScore > 60\n    };\n}\n/**\r\n * Calculate optimal session frequency for a muscle\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} constraints - Training constraints\r\n * @returns {Object} - Frequency recommendation\r\n */ function calculateOptimalFrequency(muscle, constraints = {}) {\n    const { availableDays = 6, currentVolume = null, recoveryCapacity = 'normal', trainingAge = 'intermediate' // beginner, intermediate, advanced\n     } = constraints;\n    const volume = currentVolume || (0, _trainingStateJsDefault.default).currentWeekSets[muscle];\n    const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    // Base frequency recommendations by training age\n    const baseFrequencies = {\n        beginner: {\n            min: 2,\n            max: 3\n        },\n        intermediate: {\n            min: 2,\n            max: 4\n        },\n        advanced: {\n            min: 3,\n            max: 5\n        }\n    };\n    const ageRecommendation = baseFrequencies[trainingAge];\n    // Adjust for volume\n    let volumeFrequency = 2;\n    if (volume >= landmarks.MAV) volumeFrequency = Math.min(4, Math.ceil(volume / 6)); // ~6 sets per session max at high volumes\n    else if (volume >= landmarks.MEV) volumeFrequency = Math.min(3, Math.ceil(volume / 8)); // ~8 sets per session\n    else volumeFrequency = Math.max(2, Math.ceil(volume / 10)); // ~10 sets per session at lower volumes\n    // Adjust for recovery capacity\n    const recoveryMultipliers = {\n        low: 0.8,\n        normal: 1.0,\n        high: 1.2\n    };\n    const adjustedFrequency = Math.round(volumeFrequency * recoveryMultipliers[recoveryCapacity]);\n    // Constrain to available days and training age limits\n    const recommendedFrequency = Math.max(ageRecommendation.min, Math.min(ageRecommendation.max, adjustedFrequency, availableDays));\n    // Calculate sets per session\n    const setsPerSession = Math.ceil(volume / recommendedFrequency);\n    return {\n        muscle,\n        recommendedFrequency,\n        setsPerSession,\n        totalVolume: volume,\n        reasoning: [\n            `${volume} weekly sets`,\n            `${recoveryCapacity} recovery capacity`,\n            `${trainingAge} training age`,\n            `${availableDays} available days`\n        ],\n        alternatives: {\n            conservative: Math.max(2, recommendedFrequency - 1),\n            aggressive: Math.min(availableDays, recommendedFrequency + 1)\n        }\n    };\n}\n/**\r\n * Enhanced fatigue detection using SFR and rep strength drop\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} feedback - Feedback data with soreness, jointAche, perfChange, stimulus, lastLoad\r\n * @param {Object} state - Training state singleton\r\n * @returns {boolean} - True if high fatigue detected\r\n */ function isHighFatigue(muscle, feedback, state) {\n    // Calculate total fatigue score\n    const soreness = feedback.soreness || 0;\n    const jointAche = feedback.jointAche || 0;\n    const perfChange = feedback.perfChange || 0;\n    // Fatigue components: soreness + joint ache + performance decline penalty\n    const fatigue = soreness + jointAche + (perfChange < 0 ? 2 : 0);\n    // Stimulus components: pump + disruption (mind-muscle connection less relevant for fatigue)\n    const stimulus = (feedback.pump || 0) + (feedback.disruption || 0);\n    // Calculate Stimulus-to-Fatigue Ratio (SFR)\n    const SFR = stimulus / (fatigue || 1); // Avoid zero division\n    // Check for rep strength drop\n    const strengthDrop = feedback.lastLoad ? state.repStrengthDrop(muscle, feedback.lastLoad) : false;\n    // High fatigue if SFR ≤ 1 OR strength drop detected\n    return SFR <= 1 || strengthDrop;\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"dELBV\":[function(require,module,exports,__globalThis) {\n/**\r\n * Renaissance Periodization Effort Management\r\n * Handles RIR (Reps In Reserve) calculations and effort progression\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"calculateTargetRIR\", ()=>calculateTargetRIR);\nparcelHelpers.export(exports, \"validateEffortLevel\", ()=>validateEffortLevel);\nparcelHelpers.export(exports, \"getEffortProgression\", ()=>getEffortProgression);\nparcelHelpers.export(exports, \"getWeeklyEffortSummary\", ()=>getWeeklyEffortSummary);\nparcelHelpers.export(exports, \"getAutoregulationAdvice\", ()=>getAutoregulationAdvice);\nparcelHelpers.export(exports, \"getScheduledRIR\", ()=>getScheduledRIR);\nparcelHelpers.export(exports, \"processWeeklyLoadAdjustments\", ()=>processWeeklyLoadAdjustments);\nparcelHelpers.export(exports, \"getLoadProgression\", ()=>getLoadProgression);\nparcelHelpers.export(exports, \"simulateWeeklyRIRFeedback\", ()=>simulateWeeklyRIRFeedback);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Weekly RIR Schedule for Mesocycle Progression\r\n * Standard RP approach: [3, 2, 1, 0] across 4-6 week mesocycle\r\n */ const RIR_SCHEDULE = {\n    4: [\n        3,\n        2,\n        1,\n        0\n    ],\n    5: [\n        3,\n        2.5,\n        2,\n        1,\n        0\n    ],\n    6: [\n        3,\n        2.5,\n        2,\n        1.5,\n        1,\n        0\n    ] // 6-week meso\n};\n/**\r\n * Calculate target RIR based on meso progression\r\n * @param {number} weekNumber - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @param {number} startRIR - Starting RIR (default 3)\r\n * @param {number} endRIR - Ending RIR (default 0.5)\r\n * @returns {Object} - RIR calculation result\r\n */ function calculateTargetRIR(weekNumber = null, mesoLength = null, startRIR = 3, endRIR = 0.5) {\n    const week = weekNumber || (0, _trainingStateJsDefault.default).weekNo;\n    const mesoLen = mesoLength || (0, _trainingStateJsDefault.default).mesoLen;\n    if (week > mesoLen) return {\n        targetRIR: startRIR,\n        warning: 'Week exceeds mesocycle length',\n        progression: 0\n    };\n    // Linear progression from start to end RIR\n    const progressionRate = (startRIR - endRIR) / (mesoLen - 1);\n    const targetRIR = startRIR - progressionRate * (week - 1);\n    const clampedRIR = Math.max(endRIR, Math.min(startRIR, targetRIR));\n    // Calculate progression percentage\n    const progression = (week - 1) / (mesoLen - 1) * 100;\n    let intensityLevel = 'moderate';\n    let advice = '';\n    if (clampedRIR >= 2.5) {\n        intensityLevel = 'low';\n        advice = 'Focus on form and mind-muscle connection';\n    } else if (clampedRIR >= 2.0) {\n        intensityLevel = 'moderate';\n        advice = 'Balanced effort - challenge without excessive fatigue';\n    } else if (clampedRIR >= 1.0) {\n        intensityLevel = 'high';\n        advice = 'High effort - monitor recovery closely';\n    } else {\n        intensityLevel = 'maximum';\n        advice = 'Maximum effort - deload approaching';\n    }\n    return {\n        targetRIR: Math.round(clampedRIR * 2) / 2,\n        intensityLevel,\n        advice,\n        progression: Math.round(progression),\n        week,\n        mesoLength: mesoLen\n    };\n}\n/**\r\n * Get scheduled RIR for specific week based on mesocycle length\r\n * @param {number} week - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @returns {number} - Target RIR for the week\r\n */ function getScheduledRIR(week, mesoLength) {\n    const schedule = RIR_SCHEDULE[mesoLength];\n    if (!schedule) {\n        // Fallback to linear progression for non-standard lengths\n        const startRIR = 3;\n        const endRIR = 0;\n        const progressionRate = (startRIR - endRIR) / (mesoLength - 1);\n        return Math.max(endRIR, startRIR - progressionRate * (week - 1));\n    }\n    // Return scheduled RIR, clamping to valid week range\n    const weekIndex = Math.min(week - 1, schedule.length - 1);\n    return schedule[weekIndex];\n}\n/**\r\n * Validate actual RIR against target\r\n * @param {number} actualRIR - Actual RIR reported\r\n * @param {number} targetRIR - Target RIR for the week\r\n * @param {number} tolerance - Acceptable deviation (default ±1)\r\n * @returns {Object} - Validation result\r\n */ function validateEffortLevel(actualRIR, targetRIR = null, tolerance = 1) {\n    const target = targetRIR || (0, _trainingStateJsDefault.default).getTargetRIR();\n    const deviation = Math.abs(actualRIR - target);\n    const isWithinTolerance = deviation <= tolerance;\n    let feedback = '';\n    let recommendation = '';\n    let urgency = 'normal';\n    if (isWithinTolerance) {\n        feedback = `On target (${actualRIR} vs ${target} RIR)`;\n        recommendation = 'Continue current effort level';\n        urgency = 'normal';\n    } else if (actualRIR > target) {\n        const difference = actualRIR - target;\n        feedback = `Too easy (${difference} RIR above target)`;\n        recommendation = difference > 2 ? 'Increase weight significantly' : 'Increase weight moderately';\n        urgency = difference > 2 ? 'high' : 'medium';\n    } else {\n        const difference = target - actualRIR;\n        feedback = `Too hard (${difference} RIR below target)`;\n        recommendation = difference > 2 ? 'Reduce weight significantly' : 'Reduce weight slightly';\n        urgency = difference > 2 ? 'high' : 'medium';\n    }\n    return {\n        actualRIR,\n        targetRIR: target,\n        deviation,\n        isWithinTolerance,\n        feedback,\n        recommendation,\n        urgency\n    };\n}\n/**\r\n * Calculate effort progression for next session\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} lastSession - Last session data\r\n * @returns {Object} - Effort progression recommendation\r\n */ function getEffortProgression(muscle, lastSession) {\n    const currentRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n    let weightRecommendation = 'maintain';\n    let rirAdjustment = 0;\n    let advice = '';\n    // Base progression on last session performance\n    if (lastSession.actualRIR < lastSession.targetRIR - 1.5) {\n        // Too hard last time\n        weightRecommendation = 'decrease';\n        rirAdjustment = 0.5;\n        advice = 'Reduce weight to hit target RIR';\n    } else if (lastSession.actualRIR > lastSession.targetRIR + 1.5) {\n        // Too easy last time\n        weightRecommendation = 'increase';\n        rirAdjustment = -0.5;\n        advice = 'Increase weight to hit target RIR';\n    } else // On target\n    if (volumeStatus === 'maximum') advice = 'Maintain weight - at volume limit';\n    else advice = 'Good effort level - continue progression';\n    // Adjust based on volume status\n    if (volumeStatus === 'maximum' && weightRecommendation === 'increase') {\n        weightRecommendation = 'maintain';\n        advice = 'At MRV - avoid adding intensity stress';\n    }\n    const projectedRIR = Math.max(0, currentRIR + rirAdjustment);\n    return {\n        muscle,\n        currentTargetRIR: currentRIR,\n        projectedRIR,\n        weightRecommendation,\n        advice,\n        volumeStatus\n    };\n}\n/**\r\n * Process weekly load adjustments based on RIR feedback\r\n * @param {Object} weeklyFeedback - Feedback data for all muscles\r\n * @returns {Object} - Load adjustment recommendations\r\n */ function processWeeklyLoadAdjustments(weeklyFeedback) {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const targetRIR = getScheduledRIR(currentWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const adjustments = {};\n    let totalMusclesAdjusted = 0;\n    Object.keys(weeklyFeedback).forEach((muscle)=>{\n        const feedback = weeklyFeedback[muscle];\n        const avgActualRIR = feedback.averageRIR || targetRIR;\n        const rirDeviation = avgActualRIR - targetRIR;\n        let loadAdjustment = 0; // Percentage change\n        let reason = '';\n        // Determine load adjustment based on RIR deviation\n        if (Math.abs(rirDeviation) <= 0.5) {\n            // On target - small progressive increase\n            loadAdjustment = 2.5; // 2.5% increase\n            reason = 'On target - progressive overload';\n        } else if (rirDeviation > 0.5) {\n            // Too easy - increase load significantly\n            if (rirDeviation > 2) {\n                loadAdjustment = 10; // 10% increase\n                reason = 'Too easy - major increase needed';\n            } else if (rirDeviation > 1) {\n                loadAdjustment = 7.5; // 7.5% increase\n                reason = 'Too easy - moderate increase';\n            } else {\n                loadAdjustment = 5; // 5% increase\n                reason = 'Slightly easy - small increase';\n            }\n        } else {\n            // Too hard - decrease load\n            if (rirDeviation < -2) {\n                loadAdjustment = -10; // 10% decrease\n                reason = 'Too hard - major decrease needed';\n            } else if (rirDeviation < -1) {\n                loadAdjustment = -5; // 5% decrease\n                reason = 'Too hard - moderate decrease';\n            } else {\n                loadAdjustment = -2.5; // 2.5% decrease\n                reason = 'Slightly hard - small decrease';\n            }\n        }\n        // Factor in performance trends\n        const performanceTrend = feedback.performanceTrend || 0; // -1, 0, 1\n        if (performanceTrend < 0) {\n            loadAdjustment -= 2.5; // Reduce load if performance declining\n            reason += ' (performance declining)';\n        } else if (performanceTrend > 0 && rirDeviation >= 0) {\n            loadAdjustment += 2.5; // Increase more if performance improving\n            reason += ' (performance improving)';\n        }\n        // Cap adjustments at ±15%\n        loadAdjustment = Math.max(-15, Math.min(15, loadAdjustment));\n        adjustments[muscle] = {\n            currentRIR: avgActualRIR,\n            targetRIR,\n            deviation: rirDeviation,\n            loadAdjustment,\n            reason,\n            urgency: Math.abs(rirDeviation) > 1.5 ? 'high' : Math.abs(rirDeviation) > 1 ? 'medium' : 'low'\n        };\n        if (Math.abs(loadAdjustment) > 2.5) totalMusclesAdjusted++;\n    });\n    return {\n        week: currentWeek,\n        targetRIR,\n        adjustments,\n        summary: {\n            totalMuscles: Object.keys(weeklyFeedback).length,\n            musclesAdjusted: totalMusclesAdjusted,\n            avgLoadChange: Object.values(adjustments).reduce((sum, adj)=>sum + adj.loadAdjustment, 0) / Object.keys(adjustments).length\n        }\n    };\n}\n/**\r\n * Generate load progression recommendations for next week\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} sessionHistory - Recent session data\r\n * @returns {Object} - Load progression recommendation\r\n */ function getLoadProgression(muscle, sessionHistory = {}) {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const nextWeek = currentWeek + 1;\n    const currentRIR = getScheduledRIR(currentWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const nextRIR = getScheduledRIR(nextWeek, (0, _trainingStateJsDefault.default).mesoLen);\n    const rirDrop = currentRIR - nextRIR;\n    const recentPerformance = sessionHistory.averageRIR || currentRIR;\n    const performanceDeviation = recentPerformance - currentRIR;\n    let loadIncrease = 0;\n    let recommendation = '';\n    if (rirDrop > 0) {\n        // RIR is dropping - need to increase intensity\n        const baseIncrease = rirDrop * 5; // ~5% per RIR drop\n        // Adjust based on recent performance\n        if (performanceDeviation > 1) {\n            // Performing too easy - can increase more aggressively\n            loadIncrease = baseIncrease + 5;\n            recommendation = `Increase load ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - currently too easy`;\n        } else if (performanceDeviation < -1) {\n            // Struggling - increase more conservatively\n            loadIncrease = baseIncrease * 0.5;\n            recommendation = `Conservative increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - struggling with current load`;\n        } else {\n            // On target - standard progression\n            loadIncrease = baseIncrease;\n            recommendation = `Standard increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\n        }\n    } else if (rirDrop === 0) {\n        // Same RIR - small progressive overload\n        loadIncrease = 2.5;\n        recommendation = `Small progressive overload ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\n    } else {\n        // RIR increasing (shouldn't happen in normal progression)\n        loadIncrease = 0;\n        recommendation = `Maintain current load for Week ${nextWeek} (RIR ${nextRIR})`;\n    }\n    // Volume status considerations\n    const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n    if (volumeStatus === 'maximum') {\n        loadIncrease *= 0.75; // Reduce load increases when at MRV\n        recommendation += ' (reduced due to MRV)';\n    }\n    return {\n        muscle,\n        currentWeek,\n        nextWeek,\n        currentRIR,\n        nextRIR,\n        rirDrop,\n        loadIncrease: Math.round(loadIncrease * 10) / 10,\n        recommendation,\n        volumeStatus\n    };\n}\n/**\r\n * Calculate autoregulation recommendations\r\n * @param {Object} sessionFeedback - Real-time session feedback\r\n * @returns {Object} - Autoregulation advice\r\n */ function getAutoregulationAdvice(sessionFeedback) {\n    const { actualRIR, plannedRIR, setNumber, totalPlannedSets, muscle } = sessionFeedback;\n    const deviation = actualRIR - plannedRIR;\n    let advice = '';\n    let action = 'continue';\n    let weightAdjustment = 0; // Percentage\n    // Early sets (first 1/3)\n    if (setNumber <= Math.ceil(totalPlannedSets / 3)) {\n        if (deviation > 1.5) {\n            advice = 'Weight too light - increase by 5-10%';\n            action = 'increase_weight';\n            weightAdjustment = 7.5;\n        } else if (deviation < -1.5) {\n            advice = 'Weight too heavy - decrease by 5-10%';\n            action = 'decrease_weight';\n            weightAdjustment = -7.5;\n        } else advice = 'Weight appropriate - continue';\n    } else if (setNumber <= Math.ceil(totalPlannedSets * 2 / 3)) {\n        if (deviation > 2) {\n            advice = 'Still too easy - increase weight';\n            action = 'increase_weight';\n            weightAdjustment = 5;\n        } else if (deviation < -2) {\n            advice = 'Too fatiguing - consider stopping early';\n            action = 'consider_stopping';\n            weightAdjustment = 0;\n        } else advice = 'Good progression - continue';\n    } else {\n        if (deviation < -1) {\n            advice = 'Very fatiguing - consider stopping to preserve recovery';\n            action = 'consider_stopping';\n        } else if (deviation > 2) {\n            advice = 'Could push harder - add 1-2 sets if recovering well';\n            action = 'consider_adding_sets';\n        } else advice = 'Appropriate fatigue for final sets';\n    }\n    return {\n        setNumber,\n        totalPlannedSets,\n        actualRIR,\n        plannedRIR,\n        deviation,\n        advice,\n        action,\n        weightAdjustment\n    };\n}\n/**\r\n * Generate weekly effort summary\r\n * @returns {Object} - Weekly effort analysis\r\n */ function getWeeklyEffortSummary() {\n    const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n    const mesoLength = (0, _trainingStateJsDefault.default).mesoLen;\n    const targetRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const weeklyAdvice = [];\n    // Week-specific advice\n    if (currentWeek === 1) {\n        weeklyAdvice.push('Focus on technique and mind-muscle connection');\n        weeklyAdvice.push('Establish baseline weights for the mesocycle');\n    } else if (currentWeek === mesoLength) {\n        weeklyAdvice.push('Peak intensity week - push close to failure');\n        weeklyAdvice.push('Prepare for upcoming deload');\n    } else if (currentWeek > mesoLength * 0.75) {\n        weeklyAdvice.push('High intensity phase - monitor recovery closely');\n        weeklyAdvice.push('Focus on performance over volume additions');\n    } else {\n        weeklyAdvice.push('Progressive overload phase - gradually increase demands');\n        weeklyAdvice.push('Balance volume and intensity progression');\n    }\n    return {\n        currentWeek,\n        mesoLength,\n        targetRIR,\n        weeklyAdvice,\n        phaseDescription: getPhaseDescription(currentWeek, mesoLength)\n    };\n}\n/**\r\n * Get phase description based on week\r\n * @param {number} week - Current week\r\n * @param {number} mesoLength - Total meso length\r\n * @returns {string} - Phase description\r\n */ function getPhaseDescription(week, mesoLength) {\n    const percentage = week / mesoLength * 100;\n    if (percentage <= 25) return 'Accumulation Phase - Building foundation';\n    else if (percentage <= 60) return 'Progression Phase - Steady overload';\n    else if (percentage <= 85) return 'Intensification Phase - High demands';\n    else return 'Peak Phase - Maximum effort';\n}\n/**\r\n * Simulate weekly feedback for auto-progression demo\r\n * @param {Array} muscles - List of muscle groups\r\n * @param {number} week - Current week\r\n * @returns {Object} - Simulated weekly feedback\r\n */ function simulateWeeklyRIRFeedback(muscles, week) {\n    const targetRIR = getScheduledRIR(week, (0, _trainingStateJsDefault.default).mesoLen);\n    const feedback = {};\n    muscles.forEach((muscle)=>{\n        const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n        // Simulate realistic RIR deviation based on volume status and week\n        let rirDeviation = 0;\n        if (volumeStatus === 'maximum') // At MRV - likely struggling more\n        rirDeviation = Math.random() * 1.5 - 0.5; // -0.5 to +1.0\n        else if (week <= 2) // Early weeks - usually easier\n        rirDeviation = Math.random() * 1.5 + 0.5; // +0.5 to +2.0\n        else if (week >= (0, _trainingStateJsDefault.default).mesoLen - 1) // Late weeks - getting harder\n        rirDeviation = Math.random() * 1.5 - 1.0; // -1.0 to +0.5\n        else // Middle weeks - more variable\n        rirDeviation = Math.random() * 2 - 1; // -1.0 to +1.0\n        const simulatedRIR = Math.max(0, targetRIR + rirDeviation);\n        // Generate enhanced fatigue indicators based on volume status\n        let jointAche = 0;\n        let perfChange = 0;\n        let lastLoad = 100; // Default baseline\n        let soreness = 1; // Default mild soreness\n        if (volumeStatus === 'maximum') {\n            jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\n            perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 0.95; // 5% strength drop\n            soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\n        } else if (volumeStatus === 'high') {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.8 ? -1 : Math.random() > 0.5 ? 0 : 1; // Mixed performance\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 0.98; // 2% strength drop\n            soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\n        } else {\n            jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n            perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\n            lastLoad = (0, _trainingStateJsDefault.default).baselineStrength[muscle] * 1.02; // 2% strength increase\n            soreness = Math.floor(Math.random() * 2); // 0-1 (none to mild)\n        }\n        feedback[muscle] = {\n            actualRIR: simulatedRIR,\n            targetRIR,\n            averageRIR: Math.round(simulatedRIR * 10) / 10,\n            performanceTrend: week > 1 ? Math.random() > 0.7 ? Math.random() > 0.5 ? 1 : -1 : 0 : 0,\n            sessions: 2,\n            volumeStatus,\n            // Enhanced fatigue detection fields\n            soreness,\n            jointAche,\n            perfChange,\n            lastLoad: Math.round(lastLoad * 10) / 10,\n            pump: Math.min(3, Math.floor(Math.random() * 3) + 1),\n            disruption: Math.min(3, Math.floor(Math.random() * 3) + 1)\n        };\n    });\n    return feedback;\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"cOYv8\":[function(require,module,exports,__globalThis) {\n/**\r\n * Training Validation Helpers\r\n * Provides validation for loads, sets, and training parameters\r\n */ /**\r\n * Validate load percentage (1RM)\r\n * @param {number} loadPercent - Load as percentage of 1RM\r\n * @param {string} context - Training context (hypertrophy, strength, power)\r\n * @returns {Object} - Validation result\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"validateLoad\", ()=>validateLoad);\nparcelHelpers.export(exports, \"validateSets\", ()=>validateSets);\nparcelHelpers.export(exports, \"validateMesocycleLength\", ()=>validateMesocycleLength);\nfunction validateLoad(loadPercent, context = 'hypertrophy') {\n    const load = parseFloat(loadPercent);\n    if (isNaN(load) || load <= 0) return {\n        isValid: false,\n        warning: 'Load must be a positive number',\n        recommendation: 'Enter a valid load percentage'\n    };\n    // Context-specific load ranges\n    const loadRanges = {\n        hypertrophy: {\n            min: 30,\n            max: 85,\n            optimal: [\n                65,\n                80\n            ]\n        },\n        strength: {\n            min: 70,\n            max: 100,\n            optimal: [\n                85,\n                95\n            ]\n        },\n        power: {\n            min: 30,\n            max: 70,\n            optimal: [\n                40,\n                60\n            ]\n        },\n        endurance: {\n            min: 20,\n            max: 60,\n            optimal: [\n                30,\n                50\n            ]\n        }\n    };\n    const range = loadRanges[context] || loadRanges.hypertrophy;\n    let isValid = true;\n    let warning = '';\n    let recommendation = '';\n    let severity = 'normal';\n    if (load < range.min) {\n        isValid = false;\n        warning = `Load too light for ${context} (${load}% < ${range.min}%)`;\n        recommendation = `Increase to ${range.optimal[0]}-${range.optimal[1]}% for optimal ${context} adaptations`;\n        severity = 'high';\n    } else if (load > range.max) {\n        isValid = false;\n        warning = `Load too heavy for ${context} (${load}% > ${range.max}%)`;\n        recommendation = `Reduce to ${range.optimal[0]}-${range.optimal[1]}% for safer ${context} training`;\n        severity = 'high';\n    } else if (load < range.optimal[0]) {\n        warning = `Load is light for ${context} (${load}% < ${range.optimal[0]}%)`;\n        recommendation = `Consider increasing to ${range.optimal[0]}-${range.optimal[1]}% for better stimulus`;\n        severity = 'medium';\n    } else if (load > range.optimal[1]) {\n        warning = `Load is heavy for ${context} (${load}% > ${range.optimal[1]}%)`;\n        recommendation = `Consider reducing to ${range.optimal[0]}-${range.optimal[1]}% for better recovery`;\n        severity = 'medium';\n    } else recommendation = `Good load for ${context} training`;\n    return {\n        isValid,\n        load,\n        context,\n        warning,\n        recommendation,\n        severity,\n        range,\n        isOptimal: load >= range.optimal[0] && load <= range.optimal[1]\n    };\n}\n/**\r\n * Validate RIR (Reps in Reserve)\r\n * @param {number} rir - Reps in reserve\r\n * @param {number} targetRIR - Target RIR for the session\r\n * @param {string} context - Training context\r\n * @returns {Object} - Validation result\r\n */ function validateRIR(rir, targetRIR, context = 'hypertrophy') {\n    const actualRIR = parseFloat(rir);\n    const target = parseFloat(targetRIR);\n    if (isNaN(actualRIR) || actualRIR < 0) return {\n        isValid: false,\n        warning: 'RIR must be 0 or greater',\n        recommendation: 'Enter how many more reps you could have done'\n    };\n    if (actualRIR > 10) return {\n        isValid: false,\n        warning: 'RIR too high (>10) - load likely too light',\n        recommendation: 'Increase weight significantly'\n    };\n    const deviation = Math.abs(actualRIR - target);\n    let isValid = true;\n    let warning = '';\n    let recommendation = '';\n    let severity = 'normal';\n    // Tolerance varies by context\n    const tolerances = {\n        hypertrophy: 1.0,\n        strength: 0.5,\n        power: 1.5,\n        endurance: 2.0\n    };\n    const tolerance = tolerances[context] || tolerances.hypertrophy;\n    if (deviation <= tolerance) recommendation = `On target (${actualRIR} vs ${target} RIR)`;\n    else if (actualRIR > target) {\n        const difference = actualRIR - target;\n        warning = `Too easy (${difference.toFixed(1)} RIR above target)`;\n        if (difference > 2) {\n            recommendation = 'Increase weight significantly (10-15%)';\n            severity = 'high';\n        } else {\n            recommendation = 'Increase weight moderately (5-10%)';\n            severity = 'medium';\n        }\n    } else {\n        const difference = target - actualRIR;\n        warning = `Too hard (${difference.toFixed(1)} RIR below target)`;\n        if (difference > 2) {\n            recommendation = 'Reduce weight significantly (10-15%)';\n            severity = 'high';\n        } else {\n            recommendation = 'Reduce weight slightly (5-10%)';\n            severity = 'medium';\n        }\n    }\n    return {\n        isValid,\n        actualRIR,\n        targetRIR: target,\n        deviation,\n        warning,\n        recommendation,\n        severity,\n        isOnTarget: deviation <= tolerance\n    };\n}\n/**\r\n * Validate set count within volume landmarks\r\n * @param {number} sets - Proposed set count\r\n * @param {Object} landmarks - Volume landmarks {MV, MEV, MAV, MRV}\r\n * @param {boolean} allowOverreach - Allow sets above MRV\r\n * @returns {Object} - Validation result\r\n */ function validateSets(sets, landmarks, allowOverreach = false) {\n    const setCount = parseInt(sets, 10);\n    if (isNaN(setCount) || setCount < 0) return {\n        isValid: false,\n        warning: 'Set count must be 0 or greater',\n        recommendation: 'Enter a valid number of sets'\n    };\n    const { MV = 0, MEV, MAV, MRV } = landmarks;\n    let isValid = true;\n    let warning = '';\n    let recommendation = '';\n    let severity = 'normal';\n    let zone = '';\n    if (setCount < MV) {\n        zone = 'below-maintenance';\n        warning = `Below maintenance volume (${setCount} < ${MV})`;\n        recommendation = 'Increase sets for minimal stimulus';\n        severity = 'high';\n    } else if (setCount < MEV) {\n        zone = 'maintenance';\n        warning = `In maintenance zone (${setCount} < ${MEV})`;\n        recommendation = 'Increase sets for growth stimulus';\n        severity = 'medium';\n    } else if (setCount <= MAV) {\n        zone = 'optimal';\n        recommendation = `Optimal volume zone (${MEV}-${MAV} sets)`;\n    } else if (setCount <= MRV) {\n        zone = 'high';\n        warning = `High volume zone (${setCount} approaching ${MRV})`;\n        recommendation = 'Monitor recovery closely';\n        severity = 'medium';\n    } else {\n        zone = 'maximum';\n        if (!allowOverreach) {\n            isValid = false;\n            warning = `Above maximum recoverable volume (${setCount} > ${MRV})`;\n            recommendation = 'Reduce sets or plan deload';\n            severity = 'high';\n        } else {\n            warning = `Overreaching territory (${setCount} > ${MRV})`;\n            recommendation = 'Short-term only - deload soon';\n            severity = 'high';\n        }\n    }\n    return {\n        isValid,\n        sets: setCount,\n        landmarks,\n        zone,\n        warning,\n        recommendation,\n        severity,\n        percentage: Math.round(setCount / MRV * 100)\n    };\n}\n/**\r\n * Validate training frequency\r\n * @param {number} frequency - Sessions per week\r\n * @param {number} weeklyVolume - Total weekly sets\r\n * @param {string} muscleGroup - Muscle group name\r\n * @returns {Object} - Validation result\r\n */ function validateFrequency(frequency, weeklyVolume, muscleGroup = '') {\n    const freq = parseInt(frequency, 10);\n    const volume = parseInt(weeklyVolume, 10);\n    if (isNaN(freq) || freq < 1) return {\n        isValid: false,\n        warning: 'Frequency must be at least 1 session per week',\n        recommendation: 'Train each muscle at least once per week'\n    };\n    if (isNaN(volume) || volume < 0) return {\n        isValid: false,\n        warning: 'Weekly volume must be specified',\n        recommendation: 'Enter total weekly sets'\n    };\n    const setsPerSession = volume / freq;\n    let isValid = true;\n    let warning = '';\n    let recommendation = '';\n    let severity = 'normal';\n    // General guidelines for sets per session\n    if (setsPerSession > 20) {\n        isValid = false;\n        warning = `Too many sets per session (${setsPerSession.toFixed(1)})`;\n        recommendation = 'Increase frequency or reduce volume';\n        severity = 'high';\n    } else if (setsPerSession > 12) {\n        warning = `High sets per session (${setsPerSession.toFixed(1)})`;\n        recommendation = 'Consider increasing frequency';\n        severity = 'medium';\n    } else if (setsPerSession < 2 && volume >= 6) {\n        warning = `Very low sets per session (${setsPerSession.toFixed(1)})`;\n        recommendation = 'Consider reducing frequency';\n        severity = 'medium';\n    } else recommendation = `Good distribution (${setsPerSession.toFixed(1)} sets/session)`;\n    // Frequency-specific advice\n    let frequencyAdvice = '';\n    if (freq === 1) frequencyAdvice = 'Once weekly - ensure high quality';\n    else if (freq === 2) frequencyAdvice = 'Twice weekly - good for most goals';\n    else if (freq === 3) frequencyAdvice = 'Three times weekly - high frequency';\n    else if (freq >= 4) frequencyAdvice = 'Very high frequency - monitor recovery';\n    return {\n        isValid,\n        frequency: freq,\n        weeklyVolume: volume,\n        setsPerSession: Math.round(setsPerSession * 10) / 10,\n        warning,\n        recommendation,\n        frequencyAdvice,\n        severity,\n        muscleGroup\n    };\n}\n/**\r\n * Validate mesocycle length\r\n * @param {number} weeks - Mesocycle length in weeks\r\n * @param {string} goal - Training goal\r\n * @returns {Object} - Validation result\r\n */ function validateMesocycleLength(weeks, goal = 'hypertrophy') {\n    const mesoLength = parseInt(weeks, 10);\n    if (isNaN(mesoLength) || mesoLength < 1) return {\n        isValid: false,\n        warning: 'Mesocycle must be at least 1 week',\n        recommendation: 'Enter a valid mesocycle length'\n    };\n    // Goal-specific recommendations\n    const recommendations = {\n        hypertrophy: {\n            min: 3,\n            max: 6,\n            optimal: 4\n        },\n        strength: {\n            min: 2,\n            max: 8,\n            optimal: 4\n        },\n        power: {\n            min: 2,\n            max: 4,\n            optimal: 3\n        },\n        endurance: {\n            min: 4,\n            max: 12,\n            optimal: 6\n        }\n    };\n    const rec = recommendations[goal] || recommendations.hypertrophy;\n    let isValid = true;\n    let warning = '';\n    let recommendation = '';\n    let severity = 'normal';\n    if (mesoLength < rec.min) {\n        warning = `Short mesocycle for ${goal} (${mesoLength} < ${rec.min} weeks)`;\n        recommendation = `Consider ${rec.optimal} weeks for better ${goal} adaptations`;\n        severity = 'medium';\n    } else if (mesoLength > rec.max) {\n        warning = `Long mesocycle for ${goal} (${mesoLength} > ${rec.max} weeks)`;\n        recommendation = `Consider ${rec.optimal} weeks to prevent overreaching`;\n        severity = 'medium';\n    } else if (mesoLength === rec.optimal) recommendation = `Optimal length for ${goal} training`;\n    else recommendation = `Good length for ${goal} training`;\n    return {\n        isValid,\n        weeks: mesoLength,\n        goal,\n        warning,\n        recommendation,\n        severity,\n        isOptimal: mesoLength === rec.optimal,\n        range: rec\n    };\n}\n/**\r\n * Validate input ranges for UI components\r\n * @param {*} value - Input value\r\n * @param {Object} constraints - Validation constraints\r\n * @returns {Object} - Validation result\r\n */ function validateInputRange(value, constraints) {\n    const { type = 'number', min = null, max = null, step = null, required = false, customValidator = null } = constraints;\n    // Check if required\n    if (required && (value === null || value === undefined || value === '')) return {\n        isValid: false,\n        warning: 'This field is required',\n        recommendation: 'Please enter a value'\n    };\n    // Type validation\n    if (type === 'number') {\n        const num = parseFloat(value);\n        if (isNaN(num)) return {\n            isValid: false,\n            warning: 'Must be a valid number',\n            recommendation: 'Enter a numeric value'\n        };\n        if (min !== null && num < min) return {\n            isValid: false,\n            warning: `Must be at least ${min}`,\n            recommendation: `Enter a value \\u{2265} ${min}`\n        };\n        if (max !== null && num > max) return {\n            isValid: false,\n            warning: `Must be at most ${max}`,\n            recommendation: `Enter a value \\u{2264} ${max}`\n        };\n        if (step !== null && num * 100 % (step * 100) !== 0) return {\n            isValid: false,\n            warning: `Must be in increments of ${step}`,\n            recommendation: `Use multiples of ${step}`\n        };\n    }\n    // Custom validation\n    if (customValidator && typeof customValidator === 'function') {\n        const customResult = customValidator(value);\n        if (!customResult.isValid) return customResult;\n    }\n    return {\n        isValid: true,\n        value,\n        recommendation: 'Valid input'\n    };\n}\n/**\r\n * Create comprehensive validation summary\r\n * @param {Object} formData - Complete form data\r\n * @param {Object} validationRules - Validation rules for each field\r\n * @returns {Object} - Comprehensive validation result\r\n */ function validateTrainingSession(formData, validationRules = {}) {\n    const results = {};\n    const errors = [];\n    const warnings = [];\n    Object.keys(formData).forEach((field)=>{\n        const value = formData[field];\n        const rules = validationRules[field];\n        if (rules) {\n            let result;\n            switch(rules.type){\n                case 'load':\n                    result = validateLoad(value, rules.context);\n                    break;\n                case 'rir':\n                    result = validateRIR(value, rules.target, rules.context);\n                    break;\n                case 'sets':\n                    result = validateSets(value, rules.landmarks, rules.allowOverreach);\n                    break;\n                case 'frequency':\n                    result = validateFrequency(value, rules.volume, rules.muscle);\n                    break;\n                case 'meso':\n                    result = validateMesocycleLength(value, rules.goal);\n                    break;\n                default:\n                    result = validateInputRange(value, rules);\n            }\n            results[field] = result;\n            if (!result.isValid) errors.push(`${field}: ${result.warning}`);\n            else if (result.warning) warnings.push(`${field}: ${result.warning}`);\n        }\n    });\n    return {\n        isValid: errors.length === 0,\n        hasWarnings: warnings.length > 0,\n        errors,\n        warnings,\n        fieldResults: results,\n        summary: errors.length === 0 ? warnings.length === 0 ? 'All inputs valid' : 'Valid with warnings' : `${errors.length} validation error(s)`\n    };\n}\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"5eA0i\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Analytics & Machine Learning for Training Optimization\r\n * Implements predictive modeling and pattern recognition for enhanced program design\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"optimizeVolumeLandmarks\", ()=>optimizeVolumeLandmarks);\nparcelHelpers.export(exports, \"predictDeloadTiming\", ()=>predictDeloadTiming);\nparcelHelpers.export(exports, \"adaptiveRIRRecommendations\", ()=>adaptiveRIRRecommendations);\nparcelHelpers.export(exports, \"detectTrainingPlateaus\", ()=>detectTrainingPlateaus);\nparcelHelpers.export(exports, \"calculateTrajectory\", ()=>calculateTrajectory);\nparcelHelpers.export(exports, \"calculateConfidence\", ()=>calculateConfidence);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Predictive Volume Landmark Optimization\r\n * Uses historical data to personalize MEV/MAV/MRV values\r\n * @param {string} muscle - Muscle group\r\n * @param {Array} historicalData - Past training responses\r\n * @returns {Object} - Optimized landmarks\r\n */ function optimizeVolumeLandmarks(muscle, historicalData) {\n    if (historicalData.length < 4) return (0, _trainingStateJsDefault.default).volumeLandmarks[muscle]; // Need minimum data\n    // Analyze response patterns\n    const stimulusResponse = historicalData.map((week)=>({\n            volume: week.sets,\n            stimulus: week.avgStimulus,\n            fatigue: week.avgFatigue,\n            performance: week.performanceChange\n        }));\n    // Find optimal volume zones based on stimulus-to-fatigue ratio\n    const optimalMEV = findOptimalMEV(stimulusResponse);\n    const optimalMAV = findOptimalMAV(stimulusResponse);\n    const optimalMRV = findOptimalMRV(stimulusResponse);\n    const current = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n    return {\n        MV: current.MV,\n        MEV: Math.round(optimalMEV),\n        MAV: Math.round(optimalMAV),\n        MRV: Math.round(optimalMRV),\n        confidence: calculateConfidence(historicalData.length),\n        lastOptimized: new Date().toISOString()\n    };\n}\n/**\r\n * Find optimal MEV based on minimal effective stimulus\r\n * @param {Array} data - Stimulus response data\r\n * @returns {number} - Optimized MEV\r\n */ function findOptimalMEV(data) {\n    // Find minimum volume that consistently produces good stimulus (≥6/9)\n    const goodStimulus = data.filter((d)=>d.stimulus >= 6);\n    if (goodStimulus.length === 0) return data[0]?.volume || 6;\n    return Math.min(...goodStimulus.map((d)=>d.volume));\n}\n/**\r\n * Find optimal MAV based on peak stimulus-to-fatigue ratio\r\n * @param {Array} data - Stimulus response data  \r\n * @returns {number} - Optimized MAV\r\n */ function findOptimalMAV(data) {\n    // Find volume with best SFR (stimulus/fatigue ratio)\n    let bestSFR = 0;\n    let bestVolume = 12;\n    data.forEach((d)=>{\n        const sfr = d.stimulus / Math.max(1, d.fatigue);\n        if (sfr > bestSFR) {\n            bestSFR = sfr;\n            bestVolume = d.volume;\n        }\n    });\n    return bestVolume;\n}\n/**\r\n * Find optimal MRV based on fatigue accumulation patterns\r\n * @param {Array} data - Stimulus response data\r\n * @returns {number} - Optimized MRV  \r\n */ function findOptimalMRV(data) {\n    // Find volume where fatigue exceeds stimulus (SFR < 1)\n    const fatiguePoints = data.filter((d)=>d.stimulus / Math.max(1, d.fatigue) < 1);\n    if (fatiguePoints.length === 0) return Math.max(...data.map((d)=>d.volume)) + 2;\n    return Math.min(...fatiguePoints.map((d)=>d.volume)) - 1;\n}\n/**\r\n * Calculate confidence level for landmark optimization\r\n * @param {number} dataPoints - Number of historical data points\r\n * @returns {number} - Confidence percentage (0-100)\r\n */ function calculateConfidence(dataPoints) {\n    if (dataPoints < 4) return 0;\n    if (dataPoints < 8) return 60;\n    if (dataPoints < 12) return 80;\n    return 95;\n}\n/**\r\n * Predictive Deload Timing\r\n * Predicts optimal deload timing 1-2 weeks in advance\r\n * @param {Object} currentMetrics - Current training metrics\r\n * @returns {Object} - Deload prediction\r\n */ function predictDeloadTiming(currentMetrics) {\n    const { weeklyFatigueScore, performanceTrend, volumeProgression, motivationLevel, sleepQuality } = currentMetrics;\n    // Calculate fatigue trajectory\n    const fatigueTrajectory = calculateTrajectory(weeklyFatigueScore);\n    const performanceTrajectory = calculateTrajectory(performanceTrend);\n    // Predict when fatigue will exceed threshold\n    const weeksToFatigueLimit = predictThresholdCrossing(fatigueTrajectory, 75);\n    const weeksToPerformanceDecline = predictThresholdCrossing(performanceTrajectory, -15, 'decline');\n    const predictedWeeks = Math.min(weeksToFatigueLimit, weeksToPerformanceDecline);\n    return {\n        weeksUntilDeload: Math.max(1, predictedWeeks),\n        confidence: calculatePredictionConfidence(fatigueTrajectory, performanceTrajectory),\n        primaryIndicator: weeksToFatigueLimit < weeksToPerformanceDecline ? 'fatigue' : 'performance',\n        recommendedAction: predictedWeeks <= 2 ? 'plan_deload' : 'monitor_closely',\n        fatigueProjection: fatigueTrajectory,\n        performanceProjection: performanceTrajectory\n    };\n}\n/**\r\n * Calculate linear trajectory from historical data\r\n * @param {Array} data - Historical data points\r\n * @returns {Object} - Trajectory parameters\r\n */ function calculateTrajectory(data) {\n    if (data.length < 2) return {\n        slope: 0,\n        intercept: data[0] || 0\n    };\n    const n = data.length;\n    const sumX = data.reduce((sum, _, i)=>sum + i, 0);\n    const sumY = data.reduce((sum, val)=>sum + val, 0);\n    const sumXY = data.reduce((sum, val, i)=>sum + i * val, 0);\n    const sumXX = data.reduce((sum, _, i)=>sum + i * i, 0);\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n    return {\n        slope,\n        intercept\n    };\n}\n/**\r\n * Predict when trajectory will cross threshold\r\n * @param {Object} trajectory - Trajectory parameters\r\n * @param {number} threshold - Threshold value\r\n * @param {string} type - 'exceed' or 'decline'\r\n * @returns {number} - Weeks until crossing\r\n */ function predictThresholdCrossing(trajectory, threshold, type = 'exceed') {\n    const { slope, intercept } = trajectory;\n    if (slope === 0) return Infinity;\n    // Solve: intercept + slope * x = threshold\n    const crossingPoint = (threshold - intercept) / slope;\n    if (type === 'decline' && slope >= 0) return Infinity;\n    if (type === 'exceed' && slope <= 0) return Infinity;\n    return Math.max(0, crossingPoint);\n}\n/**\r\n * Calculate prediction confidence\r\n * @param {Object} fatigueTrajectory - Fatigue trajectory\r\n * @param {Object} performanceTrajectory - Performance trajectory\r\n * @returns {number} - Confidence percentage\r\n */ function calculatePredictionConfidence(fatigueTrajectory, performanceTrajectory) {\n    // Base confidence on trajectory consistency\n    const fatigueR2 = calculateR2(fatigueTrajectory);\n    const performanceR2 = calculateR2(performanceTrajectory);\n    const avgR2 = (fatigueR2 + performanceR2) / 2;\n    return Math.round(avgR2 * 100);\n}\n/**\r\n * Calculate R-squared for trajectory fit\r\n * @param {Object} trajectory - Trajectory parameters\r\n * @returns {number} - R-squared value\r\n */ function calculateR2(trajectory) {\n    // Simplified R² calculation - would need actual data points for precise calculation\n    // This is a placeholder that assumes reasonable trajectory fits\n    return Math.random() * 0.3 + 0.7; // 70-100% confidence range\n}\n/**\r\n * Adaptive RIR Recommendations\r\n * Adjusts RIR targets based on individual response patterns\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} responseHistory - Historical RIR responses\r\n * @returns {Object} - Adaptive RIR recommendations\r\n */ function adaptiveRIRRecommendations(muscle, responseHistory) {\n    const baseRIR = (0, _trainingStateJsDefault.default).getTargetRIR();\n    const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n    // Analyze individual response patterns\n    const overreachingTendency = calculateOverreachingTendency(responseHistory);\n    const recoverySpeed = calculateRecoverySpeed(responseHistory);\n    const techniqueConsistency = calculateTechniqueConsistency(responseHistory);\n    let rirAdjustment = 0;\n    let reasoning = [];\n    // Adjust based on overreaching tendency\n    if (overreachingTendency > 0.7) {\n        rirAdjustment += 0.5; // Leave more in reserve\n        reasoning.push('High overreaching tendency detected');\n    } else if (overreachingTendency < 0.3) {\n        rirAdjustment -= 0.5; // Can push harder\n        reasoning.push('Low overreaching tendency - can push harder');\n    }\n    // Adjust based on recovery speed\n    if (recoverySpeed > 0.8) {\n        rirAdjustment -= 0.3; // Fast recovery = can push more\n        reasoning.push('Fast recovery allows higher intensity');\n    } else if (recoverySpeed < 0.4) {\n        rirAdjustment += 0.3; // Slow recovery = need more reserve\n        reasoning.push('Slow recovery requires more conservative approach');\n    }\n    // Adjust based on technique consistency\n    if (techniqueConsistency < 0.6) {\n        rirAdjustment += 0.5; // Poor technique = more reserve needed\n        reasoning.push('Technique breakdown requires higher RIR');\n    }\n    const adaptedRIR = Math.max(0.5, Math.min(4, baseRIR + rirAdjustment));\n    return {\n        baseRIR,\n        adaptedRIR: Math.round(adaptedRIR * 2) / 2,\n        adjustment: rirAdjustment,\n        reasoning,\n        confidence: calculateAdaptationConfidence(responseHistory.length),\n        muscle,\n        volumeStatus\n    };\n}\n/**\r\n * Calculate overreaching tendency from history\r\n * @param {Array} history - Response history\r\n * @returns {number} - Tendency score (0-1)\r\n */ function calculateOverreachingTendency(history) {\n    if (history.length < 3) return 0.5; // Default neutral\n    const overreachEvents = history.filter((session)=>session.actualRIR < session.targetRIR - 1 && session.nextDayFatigue > 7);\n    return overreachEvents.length / history.length;\n}\n/**\r\n * Calculate recovery speed from history\r\n * @param {Array} history - Response history  \r\n * @returns {number} - Recovery speed score (0-1)\r\n */ function calculateRecoverySpeed(history) {\n    if (history.length < 3) return 0.6; // Default moderate\n    const recoveryTimes = history.filter((session)=>session.recoveryDays).map((session)=>session.recoveryDays);\n    if (recoveryTimes.length === 0) return 0.6;\n    const avgRecovery = recoveryTimes.reduce((a, b)=>a + b, 0) / recoveryTimes.length;\n    return Math.max(0, Math.min(1, (4 - avgRecovery) / 3)); // 1-4 days = 1-0 score\n}\n/**\r\n * Calculate technique consistency from history\r\n * @param {Array} history - Response history\r\n * @returns {number} - Consistency score (0-1) \r\n */ function calculateTechniqueConsistency(history) {\n    if (history.length < 3) return 0.7; // Default good\n    const techniqueScores = history.filter((session)=>session.techniqueRating).map((session)=>session.techniqueRating);\n    if (techniqueScores.length === 0) return 0.7;\n    const avgTechnique = techniqueScores.reduce((a, b)=>a + b, 0) / techniqueScores.length;\n    return avgTechnique / 10; // Assume 1-10 rating scale\n}\n/**\r\n * Calculate adaptation confidence\r\n * @param {number} dataPoints - Number of historical sessions\r\n * @returns {number} - Confidence percentage\r\n */ function calculateAdaptationConfidence(dataPoints) {\n    if (dataPoints < 3) return 40;\n    if (dataPoints < 6) return 60;\n    if (dataPoints < 10) return 80;\n    return 95;\n}\n/**\r\n * Pattern Recognition for Training Plateaus\r\n * Identifies plateau patterns and suggests interventions\r\n * @param {Object} trainingData - Historical training data\r\n * @returns {Object} - Plateau analysis and recommendations\r\n */ function detectTrainingPlateaus(trainingData) {\n    const { weeklyPerformance, weeklyVolume, weeklyIntensity, weeklyFatigue } = trainingData;\n    // Detect stagnation patterns\n    const performancePlateau = detectStagnation(weeklyPerformance, 4);\n    const volumePlateau = detectStagnation(weeklyVolume, 3);\n    const fatigueAccumulation = detectTrend(weeklyFatigue, 'increasing');\n    let plateauType = 'none';\n    let interventions = [];\n    let urgency = 'low';\n    if (performancePlateau && volumePlateau) {\n        plateauType = 'complete_stagnation';\n        urgency = 'high';\n        interventions = [\n            'Implement planned deload (1-2 weeks)',\n            'Vary exercise selection and rep ranges',\n            'Address potential lifestyle factors',\n            'Consider periodization block change'\n        ];\n    } else if (performancePlateau) {\n        plateauType = 'performance_plateau';\n        urgency = 'medium';\n        interventions = [\n            'Increase training intensity (lower RIR)',\n            'Implement exercise variations',\n            'Focus on technique refinement',\n            'Short deload if fatigue is high'\n        ];\n    } else if (volumePlateau && fatigueAccumulation) {\n        plateauType = 'volume_plateau';\n        urgency = 'medium';\n        interventions = [\n            'Prioritize recovery methods',\n            'Implement recovery weeks',\n            'Optimize frequency distribution',\n            'Address sleep and nutrition'\n        ];\n    }\n    return {\n        plateauDetected: plateauType !== 'none',\n        plateauType,\n        urgency,\n        interventions,\n        analysisDetails: {\n            performanceStagnant: performancePlateau,\n            volumeStagnant: volumePlateau,\n            fatigueAccumulating: fatigueAccumulation\n        },\n        recommendations: generatePlateauRecommendations(plateauType, urgency)\n    };\n}\n/**\r\n * Detect stagnation in data series\r\n * @param {Array} data - Data series\r\n * @param {number} windowSize - Minimum stagnation window\r\n * @returns {boolean} - True if stagnation detected\r\n */ function detectStagnation(data, windowSize = 3) {\n    if (data.length < windowSize) return false;\n    const recentData = data.slice(-windowSize);\n    const variance = calculateVariance(recentData);\n    const mean = recentData.reduce((a, b)=>a + b, 0) / recentData.length;\n    // Coefficient of variation < 5% indicates stagnation\n    const cv = Math.sqrt(variance) / Math.abs(mean);\n    return cv < 0.05;\n}\n/**\r\n * Detect trend in data series\r\n * @param {Array} data - Data series\r\n * @param {string} direction - 'increasing' or 'decreasing'\r\n * @returns {boolean} - True if trend detected\r\n */ function detectTrend(data, direction) {\n    if (data.length < 3) return false;\n    const trajectory = calculateTrajectory(data);\n    if (direction === 'increasing') return trajectory.slope > 0.1; // Positive trend\n    else return trajectory.slope < -0.1; // Negative trend\n}\n/**\r\n * Calculate variance of data series\r\n * @param {Array} data - Data series\r\n * @returns {number} - Variance\r\n */ function calculateVariance(data) {\n    const mean = data.reduce((a, b)=>a + b, 0) / data.length;\n    const squaredDiffs = data.map((x)=>Math.pow(x - mean, 2));\n    return squaredDiffs.reduce((a, b)=>a + b, 0) / data.length;\n}\n/**\r\n * Generate plateau-specific recommendations\r\n * @param {string} plateauType - Type of plateau\r\n * @param {string} urgency - Urgency level\r\n * @returns {Array} - Specific recommendations\r\n */ function generatePlateauRecommendations(plateauType, urgency) {\n    const baseRecommendations = {\n        complete_stagnation: [\n            'Implement 7-14 day deload immediately',\n            'Complete exercise selection overhaul',\n            'Reassess training age and advancement needs',\n            'Consider block periodization transition'\n        ],\n        performance_plateau: [\n            'Increase intensity via reduced RIR (0.5-1 RIR drop)',\n            'Implement exercise variations or new movements',\n            'Focus on technique refinement sessions',\n            'Add specialization phase for lagging areas'\n        ],\n        volume_plateau: [\n            'Prioritize sleep optimization (8+ hours)',\n            'Implement stress management protocols',\n            'Add extra recovery days between sessions',\n            'Focus on nutrition timing and quality'\n        ]\n    };\n    return baseRecommendations[plateauType] || [\n        'Continue current program with close monitoring'\n    ];\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"gGpfv\":[function(require,module,exports,__globalThis) {\n/**\r\n * Intelligent Exercise Selection & Program Design\r\n * Automatically selects optimal exercises based on goals, equipment, and fatigue patterns\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"selectOptimalExercises\", ()=>selectOptimalExercises);\nparcelHelpers.export(exports, \"generateWeeklyProgram\", ()=>generateWeeklyProgram);\nparcelHelpers.export(exports, \"EXERCISE_DATABASE\", ()=>EXERCISE_DATABASE);\nparcelHelpers.export(exports, \"formatExerciseName\", ()=>formatExerciseName);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Exercise database with biomechanical and fatigue profiles\r\n */ const EXERCISE_DATABASE = {\n    // Chest exercises\n    chest: {\n        'barbell_bench_press': {\n            type: 'compound',\n            primaryMuscles: [\n                'chest'\n            ],\n            secondaryMuscles: [\n                'triceps',\n                'front_delts'\n            ],\n            equipment: [\n                'barbell',\n                'bench'\n            ],\n            fatigueIndex: 8.5,\n            skillRequirement: 7,\n            ranges: {\n                strength: [\n                    1,\n                    5\n                ],\n                hypertrophy: [\n                    6,\n                    12\n                ],\n                endurance: [\n                    12,\n                    20\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'high',\n                coordination: 'moderate'\n            }\n        },\n        'dumbbell_bench_press': {\n            type: 'compound',\n            primaryMuscles: [\n                'chest'\n            ],\n            secondaryMuscles: [\n                'triceps',\n                'front_delts'\n            ],\n            equipment: [\n                'dumbbells',\n                'bench'\n            ],\n            fatigueIndex: 7.5,\n            skillRequirement: 6,\n            ranges: {\n                strength: [\n                    1,\n                    6\n                ],\n                hypertrophy: [\n                    6,\n                    15\n                ],\n                endurance: [\n                    12,\n                    25\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'extended',\n                stabilityRequirement: 'moderate',\n                coordination: 'moderate'\n            }\n        },\n        'push_ups': {\n            type: 'compound',\n            primaryMuscles: [\n                'chest'\n            ],\n            secondaryMuscles: [\n                'triceps',\n                'front_delts',\n                'core'\n            ],\n            equipment: [\n                'bodyweight'\n            ],\n            fatigueIndex: 4.0,\n            skillRequirement: 3,\n            ranges: {\n                strength: [\n                    1,\n                    8\n                ],\n                hypertrophy: [\n                    8,\n                    20\n                ],\n                endurance: [\n                    15,\n                    50\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'moderate',\n                stabilityRequirement: 'high',\n                coordination: 'low'\n            }\n        },\n        'incline_dumbbell_press': {\n            type: 'compound',\n            primaryMuscles: [\n                'chest'\n            ],\n            secondaryMuscles: [\n                'triceps',\n                'front_delts'\n            ],\n            equipment: [\n                'dumbbells',\n                'incline_bench'\n            ],\n            fatigueIndex: 7.0,\n            skillRequirement: 5,\n            ranges: {\n                strength: [\n                    1,\n                    6\n                ],\n                hypertrophy: [\n                    6,\n                    15\n                ],\n                endurance: [\n                    12,\n                    20\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'moderate',\n                coordination: 'moderate'\n            }\n        },\n        'cable_flyes': {\n            type: 'isolation',\n            primaryMuscles: [\n                'chest'\n            ],\n            secondaryMuscles: [],\n            equipment: [\n                'cables'\n            ],\n            fatigueIndex: 5.5,\n            skillRequirement: 4,\n            ranges: {\n                strength: [\n                    1,\n                    8\n                ],\n                hypertrophy: [\n                    8,\n                    20\n                ],\n                endurance: [\n                    15,\n                    30\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'extended',\n                stabilityRequirement: 'low',\n                coordination: 'low'\n            }\n        }\n    },\n    // Back exercises\n    back: {\n        'deadlift': {\n            type: 'compound',\n            primaryMuscles: [\n                'back'\n            ],\n            secondaryMuscles: [\n                'glutes',\n                'hamstrings',\n                'traps'\n            ],\n            equipment: [\n                'barbell'\n            ],\n            fatigueIndex: 9.5,\n            skillRequirement: 9,\n            ranges: {\n                strength: [\n                    1,\n                    5\n                ],\n                hypertrophy: [\n                    5,\n                    10\n                ],\n                endurance: [\n                    8,\n                    15\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'very_high',\n                coordination: 'high'\n            }\n        },\n        'pull_ups': {\n            type: 'compound',\n            primaryMuscles: [\n                'back'\n            ],\n            secondaryMuscles: [\n                'biceps',\n                'rear_delts'\n            ],\n            equipment: [\n                'pull_up_bar'\n            ],\n            fatigueIndex: 7.5,\n            skillRequirement: 6,\n            ranges: {\n                strength: [\n                    1,\n                    6\n                ],\n                hypertrophy: [\n                    5,\n                    12\n                ],\n                endurance: [\n                    10,\n                    20\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'moderate',\n                coordination: 'moderate'\n            }\n        },\n        'barbell_rows': {\n            type: 'compound',\n            primaryMuscles: [\n                'back'\n            ],\n            secondaryMuscles: [\n                'biceps',\n                'rear_delts'\n            ],\n            equipment: [\n                'barbell'\n            ],\n            fatigueIndex: 8.0,\n            skillRequirement: 7,\n            ranges: {\n                strength: [\n                    1,\n                    6\n                ],\n                hypertrophy: [\n                    6,\n                    12\n                ],\n                endurance: [\n                    10,\n                    20\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'high',\n                coordination: 'high'\n            }\n        },\n        'lat_pulldowns': {\n            type: 'compound',\n            primaryMuscles: [\n                'back'\n            ],\n            secondaryMuscles: [\n                'biceps',\n                'rear_delts'\n            ],\n            equipment: [\n                'cable_machine'\n            ],\n            fatigueIndex: 6.0,\n            skillRequirement: 4,\n            ranges: {\n                strength: [\n                    1,\n                    8\n                ],\n                hypertrophy: [\n                    6,\n                    15\n                ],\n                endurance: [\n                    12,\n                    25\n                ]\n            },\n            biomechanics: {\n                rangeOfMotion: 'full',\n                stabilityRequirement: 'low',\n                coordination: 'low'\n            }\n        }\n    },\n    // Add more muscle groups...\n    quads: {\n        'back_squat': {\n            type: 'compound',\n            primaryMuscles: [\n                'quads'\n            ],\n            secondaryMuscles: [\n                'glutes',\n                'core'\n            ],\n            equipment: [\n                'barbell',\n                'squat_rack'\n            ],\n            fatigueIndex: 9.0,\n            skillRequirement: 8,\n            ranges: {\n                strength: [\n                    1,\n                    5\n                ],\n                hypertrophy: [\n                    6,\n                    12\n                ],\n                endurance: [\n                    12,\n                    20\n                ]\n            }\n        },\n        'leg_press': {\n            type: 'compound',\n            primaryMuscles: [\n                'quads'\n            ],\n            secondaryMuscles: [\n                'glutes'\n            ],\n            equipment: [\n                'leg_press_machine'\n            ],\n            fatigueIndex: 6.5,\n            skillRequirement: 3,\n            ranges: {\n                strength: [\n                    1,\n                    8\n                ],\n                hypertrophy: [\n                    8,\n                    20\n                ],\n                endurance: [\n                    15,\n                    30\n                ]\n            }\n        }\n    }\n};\n/**\r\n * Smart Exercise Selection based on multiple factors\r\n * @param {string} muscle - Target muscle group\r\n * @param {Object} constraints - Training constraints and preferences\r\n * @returns {Array} - Ranked exercise recommendations\r\n */ function selectOptimalExercises(muscle, constraints = {}) {\n    const { availableEquipment = [\n        'barbell',\n        'dumbbells',\n        'cables',\n        'machines'\n    ], trainingGoal = 'hypertrophy', experienceLevel = 'intermediate', fatigueLevel = 5, timeConstraint = 'moderate', previousExercises = [], injuryHistory = [], preferredStyle = 'balanced' // compound_focused, isolation_focused, balanced\n     } = constraints;\n    const muscleExercises = EXERCISE_DATABASE[muscle.toLowerCase()] || {};\n    if (Object.keys(muscleExercises).length === 0) return [\n        {\n            name: 'No exercises found',\n            score: 0,\n            reasoning: 'Muscle not in database'\n        }\n    ];\n    // Score each exercise\n    const scoredExercises = Object.entries(muscleExercises).map(([name, exercise])=>{\n        let score = 0;\n        let reasoning = [];\n        // Equipment availability (mandatory)\n        const hasEquipment = exercise.equipment.every((eq)=>availableEquipment.includes(eq));\n        if (!hasEquipment) return {\n            name,\n            score: 0,\n            reasoning: [\n                'Equipment not available'\n            ],\n            exercise\n        };\n        // Experience level compatibility\n        const skillGap = Math.abs(exercise.skillRequirement - getExperienceScore(experienceLevel));\n        if (skillGap <= 2) {\n            score += 20;\n            reasoning.push('Skill level appropriate');\n        } else if (skillGap <= 4) {\n            score += 10;\n            reasoning.push('Skill level manageable');\n        } else {\n            score += 0;\n            reasoning.push('Skill level mismatch');\n        }\n        // Training goal alignment\n        const goalRange = exercise.ranges[trainingGoal];\n        if (goalRange) {\n            score += 15;\n            reasoning.push(`Optimal for ${trainingGoal}`);\n        } else {\n            score += 5;\n            reasoning.push(`Suboptimal for ${trainingGoal}`);\n        }\n        // Fatigue considerations\n        const fatigueCompatibility = 10 - Math.abs(exercise.fatigueIndex - (10 - fatigueLevel));\n        score += fatigueCompatibility;\n        if (exercise.fatigueIndex <= 10 - fatigueLevel) reasoning.push('Good fatigue compatibility');\n        else reasoning.push('High fatigue exercise - use carefully');\n        // Time efficiency\n        if (timeConstraint === 'high') {\n            if (exercise.type === 'compound') {\n                score += 15;\n                reasoning.push('Time-efficient compound movement');\n            } else {\n                score += 5;\n                reasoning.push('Isolation movement - less time efficient');\n            }\n        }\n        // Style preference\n        if (preferredStyle === 'compound_focused' && exercise.type === 'compound') {\n            score += 10;\n            reasoning.push('Matches compound preference');\n        } else if (preferredStyle === 'isolation_focused' && exercise.type === 'isolation') {\n            score += 10;\n            reasoning.push('Matches isolation preference');\n        } else if (preferredStyle === 'balanced') {\n            score += 8;\n            reasoning.push('Balanced selection');\n        }\n        // Novelty bonus (avoid recent exercises)\n        if (!previousExercises.includes(name)) {\n            score += 8;\n            reasoning.push('Novel exercise selection');\n        } else {\n            score -= 5;\n            reasoning.push('Recently used - may cause adaptation plateau');\n        }\n        // Injury considerations\n        const injuryRisk = checkInjuryRisk(exercise, injuryHistory);\n        if (injuryRisk > 0) {\n            score -= injuryRisk * 5;\n            reasoning.push(`Injury risk consideration: -${injuryRisk * 5} points`);\n        }\n        return {\n            name: formatExerciseName(name),\n            score: Math.max(0, score),\n            reasoning,\n            exercise,\n            repRange: goalRange || [\n                6,\n                12\n            ],\n            sets: recommendSets(exercise, trainingGoal),\n            rest: recommendRest(exercise, trainingGoal)\n        };\n    });\n    // Sort by score and return top recommendations\n    return scoredExercises.sort((a, b)=>b.score - a.score).slice(0, 5); // Top 5 recommendations\n}\n/**\r\n * Convert experience level to numeric score\r\n * @param {string} level - Experience level\r\n * @returns {number} - Numeric score (1-10)\r\n */ function getExperienceScore(level) {\n    const levels = {\n        'beginner': 3,\n        'intermediate': 6,\n        'advanced': 9\n    };\n    return levels[level] || 6;\n}\n/**\r\n * Check injury risk for exercise\r\n * @param {Object} exercise - Exercise data\r\n * @param {Array} injuryHistory - List of injury areas\r\n * @returns {number} - Risk score (0-5)\r\n */ function checkInjuryRisk(exercise, injuryHistory) {\n    let risk = 0;\n    // High skill/coordination exercises with injury history\n    if (exercise.skillRequirement > 7 && injuryHistory.includes('back')) risk += 3;\n    // High fatigue exercises with general injury concerns\n    if (exercise.fatigueIndex > 8 && injuryHistory.length > 0) risk += 2;\n    // Specific muscle group injuries\n    exercise.primaryMuscles.forEach((muscle)=>{\n        if (injuryHistory.includes(muscle)) risk += 4;\n    });\n    return Math.min(5, risk);\n}\n/**\r\n * Format exercise name for display\r\n * @param {string} name - Raw exercise name\r\n * @returns {string} - Formatted name\r\n */ function formatExerciseName(name) {\n    return name.split('_').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n}\n/**\r\n * Recommend sets based on exercise and goal\r\n * @param {Object} exercise - Exercise data\r\n * @param {string} goal - Training goal\r\n * @returns {number} - Recommended sets\r\n */ function recommendSets(exercise, goal) {\n    const baseSets = {\n        strength: exercise.type === 'compound' ? 3 : 2,\n        hypertrophy: exercise.type === 'compound' ? 3 : 3,\n        endurance: exercise.type === 'compound' ? 2 : 4\n    };\n    return baseSets[goal] || 3;\n}\n/**\r\n * Recommend rest periods\r\n * @param {Object} exercise - Exercise data\r\n * @param {string} goal - Training goal\r\n * @returns {string} - Rest recommendation\r\n */ function recommendRest(exercise, goal) {\n    const restPeriods = {\n        strength: exercise.type === 'compound' ? '3-5 minutes' : '2-3 minutes',\n        hypertrophy: exercise.type === 'compound' ? '2-3 minutes' : '1-2 minutes',\n        endurance: exercise.type === 'compound' ? '1-2 minutes' : '30-60 seconds'\n    };\n    return restPeriods[goal] || '2-3 minutes';\n}\n/**\r\n * Generate weekly program structure\r\n * @param {Object} goals - Training goals and constraints\r\n * @returns {Object} - Complete weekly program\r\n */ function generateWeeklyProgram(goals = {}) {\n    const { daysPerWeek = 4, muscleGroups = [\n        'chest',\n        'back',\n        'quads',\n        'shoulders'\n    ], splitType = 'upper_lower', availableEquipment = [\n        'barbell',\n        'dumbbells',\n        'cables'\n    ], experienceLevel = 'intermediate', timePerSession = 60 // minutes\n     } = goals;\n    const program = {\n        splitType,\n        daysPerWeek,\n        sessions: []\n    };\n    // Generate sessions based on split type\n    switch(splitType){\n        case 'upper_lower':\n            program.sessions = generateUpperLowerSplit(daysPerWeek, goals);\n            break;\n        case 'push_pull_legs':\n            program.sessions = generatePushPullLegsSplit(daysPerWeek, goals);\n            break;\n        case 'full_body':\n            program.sessions = generateFullBodySplit(daysPerWeek, goals);\n            break;\n        default:\n            program.sessions = generateUpperLowerSplit(daysPerWeek, goals);\n    }\n    return program;\n}\n/**\r\n * Generate upper/lower split program\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */ function generateUpperLowerSplit(daysPerWeek, goals) {\n    const sessions = [];\n    // Upper body session\n    const upperMuscles = [\n        'chest',\n        'back',\n        'shoulders',\n        'biceps',\n        'triceps'\n    ];\n    const upperSession = {\n        name: 'Upper Body',\n        type: 'upper',\n        exercises: []\n    };\n    upperMuscles.forEach((muscle)=>{\n        if (EXERCISE_DATABASE[muscle]) {\n            const exercises = selectOptimalExercises(muscle, goals);\n            if (exercises.length > 0) upperSession.exercises.push({\n                muscle,\n                exercise: exercises[0].name,\n                sets: exercises[0].sets,\n                reps: exercises[0].repRange,\n                rest: exercises[0].rest\n            });\n        }\n    });\n    // Lower body session\n    const lowerMuscles = [\n        'quads',\n        'hamstrings',\n        'glutes',\n        'calves'\n    ];\n    const lowerSession = {\n        name: 'Lower Body',\n        type: 'lower',\n        exercises: []\n    };\n    lowerMuscles.forEach((muscle)=>{\n        if (EXERCISE_DATABASE[muscle]) {\n            const exercises = selectOptimalExercises(muscle, goals);\n            if (exercises.length > 0) lowerSession.exercises.push({\n                muscle,\n                exercise: exercises[0].name,\n                sets: exercises[0].sets,\n                reps: exercises[0].repRange,\n                rest: exercises[0].rest\n            });\n        }\n    });\n    // Arrange sessions based on frequency\n    for(let day = 1; day <= daysPerWeek; day++)if (day % 2 === 1) sessions.push({\n        ...upperSession,\n        day\n    });\n    else sessions.push({\n        ...lowerSession,\n        day\n    });\n    return sessions;\n}\n/**\r\n * Generate push/pull/legs split\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */ function generatePushPullLegsSplit(daysPerWeek, goals) {\n    const sessions = [];\n    const splits = {\n        push: {\n            name: 'Push (Chest, Shoulders, Triceps)',\n            muscles: [\n                'chest',\n                'shoulders',\n                'triceps'\n            ]\n        },\n        pull: {\n            name: 'Pull (Back, Biceps)',\n            muscles: [\n                'back',\n                'biceps'\n            ]\n        },\n        legs: {\n            name: 'Legs (Quads, Hamstrings, Glutes, Calves)',\n            muscles: [\n                'quads',\n                'hamstrings',\n                'glutes',\n                'calves'\n            ]\n        }\n    };\n    const splitOrder = [\n        'push',\n        'pull',\n        'legs'\n    ];\n    for(let day = 1; day <= daysPerWeek; day++){\n        const splitType = splitOrder[(day - 1) % 3];\n        const split = splits[splitType];\n        const session = {\n            name: split.name,\n            type: splitType,\n            day,\n            exercises: []\n        };\n        split.muscles.forEach((muscle)=>{\n            if (EXERCISE_DATABASE[muscle]) {\n                const exercises = selectOptimalExercises(muscle, goals);\n                if (exercises.length > 0) session.exercises.push({\n                    muscle,\n                    exercise: exercises[0].name,\n                    sets: exercises[0].sets,\n                    reps: exercises[0].repRange,\n                    rest: exercises[0].rest\n                });\n            }\n        });\n        sessions.push(session);\n    }\n    return sessions;\n}\n/**\r\n * Generate full body split\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */ function generateFullBodySplit(daysPerWeek, goals) {\n    const sessions = [];\n    const allMuscles = [\n        'chest',\n        'back',\n        'quads',\n        'shoulders'\n    ];\n    for(let day = 1; day <= daysPerWeek; day++){\n        const session = {\n            name: `Full Body - Day ${day}`,\n            type: 'full_body',\n            day,\n            exercises: []\n        };\n        // Rotate exercise selections to provide variety\n        allMuscles.forEach((muscle)=>{\n            if (EXERCISE_DATABASE[muscle]) {\n                const exercises = selectOptimalExercises(muscle, {\n                    ...goals,\n                    previousExercises: day > 1 ? [\n                        `exercise_from_day_${day - 1}`\n                    ] : []\n                });\n                if (exercises.length > 0) session.exercises.push({\n                    muscle,\n                    exercise: exercises[0].name,\n                    sets: Math.max(1, exercises[0].sets - 1),\n                    reps: exercises[0].repRange,\n                    rest: exercises[0].rest\n                });\n            }\n        });\n        sessions.push(session);\n    }\n    return sessions;\n}\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"6qXhO\":[function(require,module,exports,__globalThis) {\n/**\r\n * Real-time Performance Tracking Dashboard\r\n * Provides live feedback and performance monitoring during training sessions\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"LivePerformanceMonitor\", ()=>LivePerformanceMonitor);\nparcelHelpers.export(exports, \"liveMonitor\", ()=>liveMonitor);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nvar _fatigueJs = require(\"./fatigue.js\");\nvar _effortJs = require(\"./effort.js\");\n/**\r\n * Live Performance Monitor Class\r\n * Tracks real-time performance metrics during training\r\n */ class LivePerformanceMonitor {\n    constructor(){\n        this.sessionData = {\n            startTime: null,\n            currentExercise: null,\n            sets: [],\n            muscle: null,\n            targetRIR: null,\n            plannedSets: 0,\n            completedSets: 0\n        };\n        this.isActive = false;\n        this.callbacks = {};\n    }\n    /**\r\n   * Start a new training session\r\n   * @param {Object} sessionConfig - Session configuration\r\n   */ startSession(sessionConfig) {\n        const { muscle, exercise, plannedSets = 3, targetRIR = null } = sessionConfig;\n        this.sessionData = {\n            startTime: new Date(),\n            currentExercise: exercise,\n            sets: [],\n            muscle,\n            targetRIR: targetRIR || (0, _trainingStateJsDefault.default).getTargetRIR(),\n            plannedSets,\n            completedSets: 0\n        };\n        this.isActive = true;\n        this.emit('sessionStarted', this.sessionData);\n        return {\n            sessionId: this.generateSessionId(),\n            status: 'active',\n            message: `Session started for ${muscle} - ${exercise}`\n        };\n    }\n    /**\r\n   * Log a completed set\r\n   * @param {Object} setData - Set performance data\r\n   */ logSet(setData) {\n        if (!this.isActive) throw new Error('No active session');\n        const { weight, reps, rir, rpe = null, techniqueRating = null, notes = '' } = setData;\n        const setNumber = this.sessionData.sets.length + 1;\n        const timestamp = new Date();\n        // Calculate derived metrics\n        const targetRIR = this.sessionData.targetRIR;\n        const rirDeviation = rir - targetRIR;\n        const validation = (0, _effortJs.validateEffortLevel)(rir, targetRIR);\n        const setInfo = {\n            setNumber,\n            timestamp,\n            weight,\n            reps,\n            rir,\n            rpe,\n            techniqueRating,\n            notes,\n            targetRIR,\n            rirDeviation,\n            validation,\n            estimatedLoad: this.calculateEstimatedLoad(weight, reps, rir)\n        };\n        this.sessionData.sets.push(setInfo);\n        this.sessionData.completedSets = setNumber;\n        // Real-time feedback\n        const feedback = this.generateSetFeedback(setInfo);\n        // Auto-recommendations for next set\n        const nextSetRecommendations = this.generateNextSetRecommendations(setInfo);\n        this.emit('setCompleted', {\n            setInfo,\n            feedback,\n            nextSetRecommendations,\n            sessionProgress: this.getSessionProgress()\n        });\n        return {\n            setNumber,\n            feedback,\n            nextSetRecommendations,\n            shouldContinue: this.shouldContinueSession()\n        };\n    }\n    /**\r\n   * Generate real-time feedback for completed set\r\n   * @param {Object} setInfo - Set information\r\n   * @returns {Object} - Feedback and recommendations\r\n   */ generateSetFeedback(setInfo) {\n        const { rir, targetRIR, validation, weight, reps } = setInfo;\n        let feedback = {\n            type: 'success',\n            message: '',\n            urgency: 'normal',\n            recommendations: []\n        };\n        // RIR Analysis\n        if (validation.isWithinTolerance) {\n            feedback.message = `\\u{2705} Perfect effort level (${rir} RIR vs ${targetRIR} target)`;\n            feedback.type = 'success';\n        } else if (validation.urgency === 'high') {\n            if (rir > targetRIR + 1.5) {\n                feedback.message = `\\u{26A0}\\u{FE0F} Too easy - consider increasing weight next set`;\n                feedback.type = 'warning';\n                feedback.recommendations.push(`Try ${Math.round(weight * 1.05)}-${Math.round(weight * 1.10)}kg next set`);\n            } else {\n                feedback.message = `\\u{1F6A8} Too hard - consider reducing weight or stopping`;\n                feedback.type = 'danger';\n                feedback.urgency = 'high';\n                feedback.recommendations.push(`Reduce to ${Math.round(weight * 0.90)}-${Math.round(weight * 0.95)}kg`);\n            }\n        } else {\n            feedback.message = `\\u{26A1} Close to target but could be dialed in better`;\n            feedback.type = 'info';\n        }\n        // Performance trends within session\n        if (setInfo.setNumber > 1) {\n            const trend = this.analyzeIntraSessionTrend();\n            if (trend.declining) {\n                feedback.recommendations.push('Consider longer rest between sets');\n                feedback.recommendations.push('Monitor for excessive fatigue buildup');\n            }\n        }\n        return feedback;\n    }\n    /**\r\n   * Generate recommendations for next set\r\n   * @param {Object} lastSet - Previous set data\r\n   * @returns {Object} - Next set recommendations\r\n   */ generateNextSetRecommendations(lastSet) {\n        const { weight, reps, rir, targetRIR } = lastSet;\n        const rirDeviation = rir - targetRIR;\n        let recommendations = {\n            weight: weight,\n            reps: reps,\n            rest: '2-3 minutes',\n            strategy: 'maintain',\n            rationale: []\n        };\n        // Weight adjustments based on RIR\n        if (rirDeviation > 1.5) {\n            // Too easy - increase weight\n            const increase = rirDeviation > 2.5 ? 0.10 : 0.05; // 10% or 5% increase\n            recommendations.weight = Math.round(weight * (1 + increase));\n            recommendations.strategy = 'increase_intensity';\n            recommendations.rationale.push(`Increase weight due to ${rir} RIR (target: ${targetRIR})`);\n        } else if (rirDeviation < -1.5) {\n            // Too hard - decrease weight or adjust reps\n            const decrease = rirDeviation < -2.5 ? 0.10 : 0.05;\n            recommendations.weight = Math.round(weight * (1 - decrease));\n            recommendations.strategy = 'reduce_intensity';\n            recommendations.rationale.push(`Reduce weight due to excessive difficulty`);\n        }\n        // Rep adjustments for hypertrophy\n        if (reps < 6 && targetRIR <= 2) {\n            recommendations.reps = Math.min(reps + 1, 8);\n            recommendations.rationale.push('Aim for hypertrophy rep range');\n        }\n        // Rest recommendations based on performance\n        if (rir < 1) {\n            recommendations.rest = '3-4 minutes';\n            recommendations.rationale.push('Extended rest due to high effort');\n        } else if (rir > 3) {\n            recommendations.rest = '1-2 minutes';\n            recommendations.rationale.push('Shorter rest - effort level manageable');\n        }\n        // Fatigue considerations\n        if (lastSet.setNumber >= 3) {\n            const fatigueIndicators = this.assessIntraSetFatigue();\n            if (fatigueIndicators.high) {\n                recommendations.strategy = 'maintain_or_stop';\n                recommendations.rationale.push('High fatigue detected - consider stopping');\n            }\n        }\n        return recommendations;\n    }\n    /**\r\n   * Analyze performance trend within current session\r\n   * @returns {Object} - Trend analysis\r\n   */ analyzeIntraSessionTrend() {\n        if (this.sessionData.sets.length < 2) return {\n            trending: 'insufficient_data'\n        };\n        const sets = this.sessionData.sets;\n        const lastThreeSets = sets.slice(-3);\n        // Analyze RIR progression (should increase set to set)\n        const rirTrend = lastThreeSets.map((set)=>set.rir);\n        const isRirIncreasing = rirTrend.every((rir, i)=>i === 0 || rir >= rirTrend[i - 1] - 0.5);\n        // Analyze load maintenance\n        const loads = lastThreeSets.map((set)=>set.estimatedLoad);\n        const loadDecline = loads[0] - loads[loads.length - 1];\n        const significantDecline = loadDecline > loads[0] * 0.15; // >15% decline\n        return {\n            declining: significantDecline || !isRirIncreasing,\n            rirTrend,\n            loadDecline: loadDecline / loads[0] * 100,\n            recommendation: significantDecline ? 'consider_stopping' : 'continue'\n        };\n    }\n    /**\r\n   * Assess intra-set fatigue indicators\r\n   * @returns {Object} - Fatigue assessment\r\n   */ assessIntraSetFatigue() {\n        const currentSet = this.sessionData.sets.length;\n        const avgRIRDecrease = this.calculateAvgRIRDecrease();\n        const sessionDuration = (new Date() - this.sessionData.startTime) / 60000; // minutes\n        let fatigueScore = 0;\n        // RIR not increasing appropriately\n        if (avgRIRDecrease < 0.3) fatigueScore += 2;\n        // Session duration excessive\n        if (sessionDuration > 45) fatigueScore += 1;\n        // Too many sets completed\n        if (currentSet > this.sessionData.plannedSets + 2) fatigueScore += 2;\n        return {\n            score: fatigueScore,\n            high: fatigueScore >= 3,\n            indicators: {\n                poorRIRProgression: avgRIRDecrease < 0.3,\n                longSession: sessionDuration > 45,\n                excessiveSets: currentSet > this.sessionData.plannedSets + 2\n            }\n        };\n    }\n    /**\r\n   * Calculate average RIR decrease per set\r\n   * @returns {number} - Average RIR decrease\r\n   */ calculateAvgRIRDecrease() {\n        if (this.sessionData.sets.length < 2) return 0;\n        const rirValues = this.sessionData.sets.map((set)=>set.rir);\n        const decreases = [];\n        for(let i = 1; i < rirValues.length; i++)decreases.push(rirValues[i - 1] - rirValues[i]);\n        return decreases.reduce((a, b)=>a + b, 0) / decreases.length;\n    }\n    /**\r\n   * Calculate estimated load (weight × reps × RPE factor)\r\n   * @param {number} weight - Weight used\r\n   * @param {number} reps - Reps completed\r\n   * @param {number} rir - RIR reported\r\n   * @returns {number} - Estimated training load\r\n   */ calculateEstimatedLoad(weight, reps, rir) {\n        // Convert RIR to RPE (10 - RIR)\n        const rpe = 10 - rir;\n        // Load = Weight × Reps × RPE factor\n        const rpeMultiplier = Math.max(0.5, rpe / 10);\n        return Math.round(weight * reps * rpeMultiplier);\n    }\n    /**\r\n   * Determine if session should continue\r\n   * @returns {Object} - Continue recommendation\r\n   */ shouldContinueSession() {\n        const fatigue = this.assessIntraSetFatigue();\n        const trend = this.analyzeIntraSessionTrend();\n        const setsRemaining = this.sessionData.plannedSets - this.sessionData.completedSets;\n        if (fatigue.high) return {\n            shouldContinue: false,\n            reason: 'High fatigue detected',\n            recommendation: 'Stop session and rest'\n        };\n        if (trend.declining && trend.recommendation === 'consider_stopping') return {\n            shouldContinue: false,\n            reason: 'Significant performance decline',\n            recommendation: 'End session to prevent overreaching'\n        };\n        if (setsRemaining <= 0) return {\n            shouldContinue: false,\n            reason: 'Planned sets completed',\n            recommendation: 'Session complete - good work!'\n        };\n        return {\n            shouldContinue: true,\n            reason: 'Performance maintained',\n            recommendation: `Continue with ${setsRemaining} sets remaining`\n        };\n    }\n    /**\r\n   * Get current session progress\r\n   * @returns {Object} - Progress summary\r\n   */ getSessionProgress() {\n        const duration = this.isActive ? (new Date() - this.sessionData.startTime) / 60000 : 0;\n        const avgRIR = this.sessionData.sets.length > 0 ? this.sessionData.sets.reduce((sum, set)=>sum + set.rir, 0) / this.sessionData.sets.length : 0;\n        const totalLoad = this.sessionData.sets.reduce((sum, set)=>sum + set.estimatedLoad, 0);\n        return {\n            completedSets: this.sessionData.completedSets,\n            plannedSets: this.sessionData.plannedSets,\n            progressPercentage: this.sessionData.completedSets / this.sessionData.plannedSets * 100,\n            duration: Math.round(duration),\n            averageRIR: Math.round(avgRIR * 10) / 10,\n            totalLoad,\n            status: this.isActive ? 'active' : 'completed'\n        };\n    }\n    /**\r\n   * End current session\r\n   * @returns {Object} - Session summary\r\n   */ endSession() {\n        if (!this.isActive) throw new Error('No active session to end');\n        const summary = this.generateSessionSummary();\n        this.isActive = false;\n        this.emit('sessionEnded', summary);\n        return summary;\n    }\n    /**\r\n   * Generate comprehensive session summary\r\n   * @returns {Object} - Complete session analysis\r\n   */ generateSessionSummary() {\n        const progress = this.getSessionProgress();\n        const trend = this.analyzeIntraSessionTrend();\n        const summary = {\n            ...this.sessionData,\n            endTime: new Date(),\n            progress,\n            trend,\n            performance: {\n                targetAchievement: this.calculateTargetAchievement(),\n                consistency: this.calculateConsistency(),\n                volumeLoad: progress.totalLoad\n            },\n            recommendations: this.generateSessionRecommendations()\n        };\n        // Store session data for historical analysis\n        this.storeSessionData(summary);\n        return summary;\n    }\n    /**\r\n   * Calculate how well targets were achieved\r\n   * @returns {Object} - Target achievement analysis\r\n   */ calculateTargetAchievement() {\n        const sets = this.sessionData.sets;\n        const targetRIR = this.sessionData.targetRIR;\n        const rirDeviations = sets.map((set)=>Math.abs(set.rir - targetRIR));\n        const avgDeviation = rirDeviations.reduce((a, b)=>a + b, 0) / rirDeviations.length;\n        const setsOnTarget = sets.filter((set)=>Math.abs(set.rir - targetRIR) <= 1).length;\n        const targetPercentage = setsOnTarget / sets.length * 100;\n        return {\n            averageDeviation: Math.round(avgDeviation * 10) / 10,\n            setsOnTarget,\n            targetPercentage: Math.round(targetPercentage),\n            grade: targetPercentage >= 80 ? 'A' : targetPercentage >= 70 ? 'B' : targetPercentage >= 60 ? 'C' : 'D'\n        };\n    }\n    /**\r\n   * Calculate performance consistency\r\n   * @returns {Object} - Consistency metrics\r\n   */ calculateConsistency() {\n        const sets = this.sessionData.sets;\n        if (sets.length < 2) return {\n            score: 0,\n            rating: 'insufficient_data'\n        };\n        // RIR consistency (should increase gradually)\n        const rirValues = sets.map((set)=>set.rir);\n        const expectedProgression = rirValues.map((_, i)=>rirValues[0] + i * 0.5);\n        const rirVariance = this.calculateVariance(rirValues, expectedProgression);\n        // Load consistency\n        const loads = sets.map((set)=>set.estimatedLoad);\n        const loadVariance = this.calculateVariance(loads);\n        const consistencyScore = Math.max(0, 100 - (rirVariance * 50 + loadVariance * 50));\n        return {\n            score: Math.round(consistencyScore),\n            rating: consistencyScore >= 80 ? 'excellent' : consistencyScore >= 70 ? 'good' : consistencyScore >= 60 ? 'fair' : 'poor',\n            rirConsistency: Math.max(0, 100 - rirVariance * 100),\n            loadConsistency: Math.max(0, 100 - loadVariance * 100)\n        };\n    }\n    /**\r\n   * Calculate variance between actual and expected values\r\n   * @param {Array} actual - Actual values\r\n   * @param {Array} expected - Expected values (optional)\r\n   * @returns {number} - Normalized variance (0-1)\r\n   */ calculateVariance(actual, expected = null) {\n        if (actual.length < 2) return 0;\n        if (!expected) {\n            // Calculate variance from mean\n            const mean = actual.reduce((a, b)=>a + b, 0) / actual.length;\n            const squaredDiffs = actual.map((x)=>Math.pow(x - mean, 2));\n            const variance = squaredDiffs.reduce((a, b)=>a + b, 0) / actual.length;\n            return Math.min(1, variance / (mean * mean)); // Normalized\n        } else {\n            // Calculate variance from expected progression\n            const squaredDiffs = actual.map((val, i)=>Math.pow(val - expected[i], 2));\n            const variance = squaredDiffs.reduce((a, b)=>a + b, 0) / actual.length;\n            const maxExpected = Math.max(...expected);\n            return Math.min(1, variance / (maxExpected * maxExpected));\n        }\n    }\n    /**\r\n   * Generate session-specific recommendations\r\n   * @returns {Array} - Recommendation list\r\n   */ generateSessionRecommendations() {\n        const recommendations = [];\n        const performance = this.calculateTargetAchievement();\n        const consistency = this.calculateConsistency();\n        // Performance-based recommendations\n        if (performance.averageDeviation > 1.5) recommendations.push({\n            type: 'technique',\n            message: 'Focus on better RIR estimation accuracy',\n            priority: 'high'\n        });\n        if (consistency.score < 70) recommendations.push({\n            type: 'consistency',\n            message: 'Work on maintaining consistent effort levels throughout sets',\n            priority: 'medium'\n        });\n        // Volume recommendations\n        const setsCompleted = this.sessionData.completedSets;\n        const setsPlanned = this.sessionData.plannedSets;\n        if (setsCompleted < setsPlanned * 0.8) recommendations.push({\n            type: 'volume',\n            message: 'Consider reducing planned volume or improving recovery between sessions',\n            priority: 'medium'\n        });\n        return recommendations;\n    }\n    /**\r\n   * Store session data for historical analysis\r\n   * @param {Object} summary - Session summary\r\n   */ storeSessionData(summary) {\n        const key = `session-${this.generateSessionId()}`;\n        const sessionData = {\n            ...summary,\n            muscle: this.sessionData.muscle,\n            exercise: this.sessionData.currentExercise,\n            weekNo: (0, _trainingStateJsDefault.default).weekNo,\n            blockNo: (0, _trainingStateJsDefault.default).blockNo\n        };\n        localStorage.setItem(key, JSON.stringify(sessionData));\n        // Update training state with session outcomes\n        this.updateTrainingStateFromSession(sessionData);\n    }\n    /**\r\n   * Update training state based on session performance\r\n   * @param {Object} sessionData - Session data\r\n   */ updateTrainingStateFromSession(sessionData) {\n        // Update baseline strength if new PR achieved\n        const maxLoad = Math.max(...sessionData.sets.map((set)=>set.weight));\n        const currentBaseline = (0, _trainingStateJsDefault.default).baselineStrength[sessionData.muscle] || 0;\n        if (maxLoad > currentBaseline) (0, _trainingStateJsDefault.default).setBaselineStrength(sessionData.muscle, maxLoad);\n        // Check for fatigue indicators\n        const fatigueData = {\n            soreness: sessionData.performance.consistency.score < 70 ? 2 : 1,\n            jointAche: 0,\n            perfChange: maxLoad > currentBaseline ? 1 : 0,\n            pump: sessionData.progress.totalLoad > 1000 ? 3 : 2,\n            disruption: sessionData.progress.totalLoad > 1000 ? 3 : 2,\n            lastLoad: maxLoad\n        };\n        if ((0, _fatigueJs.isHighFatigue)(sessionData.muscle, fatigueData, (0, _trainingStateJsDefault.default))) console.log(`High fatigue detected for ${sessionData.muscle} after session`);\n    }\n    /**\r\n   * Generate unique session ID\r\n   * @returns {string} - Session ID\r\n   */ generateSessionId() {\n        return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    /**\r\n   * Event emission system\r\n   * @param {string} event - Event name\r\n   * @param {Object} data - Event data\r\n   */ emit(event, data) {\n        if (this.callbacks[event]) this.callbacks[event].forEach((callback)=>callback(data));\n    }\n    /**\r\n   * Register event callback\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Callback function\r\n   */ on(event, callback) {\n        if (!this.callbacks[event]) this.callbacks[event] = [];\n        this.callbacks[event].push(callback);\n    }\n}\n// Create singleton instance\nconst liveMonitor = new LivePerformanceMonitor();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"./fatigue.js\":\"5s7BT\",\"./effort.js\":\"dELBV\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"bDUtg\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Features Integration Hub\r\n * Integrates machine learning analytics, exercise selection, and live performance tracking\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"AdvancedTrainingIntelligence\", ()=>AdvancedTrainingIntelligence);\nparcelHelpers.export(exports, \"advancedIntelligence\", ()=>advancedIntelligence);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nvar _analyticsJs = require(\"./analytics.js\");\nvar _exerciseSelectionJs = require(\"./exerciseSelection.js\");\nvar _livePerformanceJs = require(\"./livePerformance.js\");\nvar _fatigueJs = require(\"./fatigue.js\");\nvar _volumeJs = require(\"./volume.js\");\n/**\r\n * Advanced Training Intelligence System\r\n * Coordinates all advanced features for intelligent training optimization\r\n */ class AdvancedTrainingIntelligence {\n    constructor(){\n        this.analyticsEnabled = true;\n        this.exerciseSelectionEnabled = true;\n        this.liveMonitoringEnabled = true;\n        this.lastOptimization = null;\n        this.trainingInsights = {};\n    }\n    /**\r\n   * Initialize advanced features\r\n   */ initialize() {\n        console.log(\"\\uD83E\\uDDE0 Advanced Training Intelligence initializing...\");\n        // Set up live monitoring event handlers\n        this.setupLiveMonitoring();\n        // Initialize analytics if sufficient data\n        this.initializeAnalytics();\n        console.log(\"\\u2705 Advanced features ready\");\n        return {\n            analytics: this.analyticsEnabled,\n            exerciseSelection: this.exerciseSelectionEnabled,\n            liveMonitoring: this.liveMonitoringEnabled,\n            message: 'Advanced Training Intelligence is online'\n        };\n    }\n    /**\r\n   * Set up live monitoring event handlers\r\n   */ setupLiveMonitoring() {\n        if (!this.liveMonitoringEnabled) return;\n        (0, _livePerformanceJs.liveMonitor).on('sessionCompleted', (sessionData)=>{\n            this.processSessionData(sessionData);\n        });\n        (0, _livePerformanceJs.liveMonitor).on('setCompleted', (setData)=>{\n            this.processLiveSetData(setData);\n        });\n    }\n    /**\r\n   * Initialize analytics with historical data\r\n   */ initializeAnalytics() {\n        const historicalData = this.getHistoricalData();\n        if (historicalData.length >= 4) {\n            this.analyticsEnabled = true;\n            console.log(`\\u{1F4CA} Analytics enabled with ${historicalData.length} weeks of data`);\n        } else {\n            console.log(`\\u{1F4CA} Analytics disabled - need ${4 - historicalData.length} more weeks of data`);\n            this.analyticsEnabled = false;\n        }\n    }\n    /**\r\n   * Get intelligent weekly recommendations\r\n   * Combines all advanced features for comprehensive guidance\r\n   * @returns {Object} - Complete weekly recommendations\r\n   */ getWeeklyIntelligence() {\n        const intelligence = {\n            week: (0, _trainingStateJsDefault.default).weekNo,\n            block: (0, _trainingStateJsDefault.default).blockNo,\n            recommendations: [],\n            analytics: null,\n            exerciseSelections: {},\n            riskAssessment: null,\n            optimizations: []\n        };\n        // 1. Analytics-based insights\n        if (this.analyticsEnabled) {\n            intelligence.analytics = this.generateAnalyticsInsights();\n            // Predictive deload timing\n            const deloadPrediction = this.predictDeloadTiming();\n            if (deloadPrediction.weeksUntilDeload <= 2) intelligence.recommendations.push({\n                type: 'deload_prediction',\n                urgency: 'high',\n                message: `Deload predicted in ${deloadPrediction.weeksUntilDeload} weeks`,\n                action: deloadPrediction.recommendedAction\n            });\n            // Plateau detection\n            const plateauAnalysis = this.detectPlateaus();\n            if (plateauAnalysis.plateauDetected) intelligence.recommendations.push({\n                type: 'plateau_intervention',\n                urgency: plateauAnalysis.urgency,\n                message: `${plateauAnalysis.plateauType} detected`,\n                interventions: plateauAnalysis.interventions\n            });\n        }\n        // 2. Exercise selection recommendations\n        if (this.exerciseSelectionEnabled) intelligence.exerciseSelections = this.generateExerciseRecommendations();\n        // 3. Volume landmark optimization\n        const optimizations = this.checkForOptimizations();\n        if (optimizations.length > 0) intelligence.optimizations = optimizations;\n        // 4. Risk assessment\n        intelligence.riskAssessment = this.assessTrainingRisk();\n        return intelligence;\n    }\n    /**\r\n   * Generate analytics-based insights\r\n   * @returns {Object} - Analytics insights\r\n   */ generateAnalyticsInsights() {\n        const historicalData = this.getHistoricalData();\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const insights = {\n            volumeLandmarkOptimizations: {},\n            adaptiveRIRRecommendations: {},\n            performanceTrends: {}\n        };\n        muscles.forEach((muscle)=>{\n            const muscleData = historicalData.filter((week)=>week.muscle === muscle);\n            if (muscleData.length >= 4) {\n                // Volume landmark optimization\n                const optimizedLandmarks = (0, _analyticsJs.optimizeVolumeLandmarks)(muscle, muscleData);\n                if (optimizedLandmarks.confidence >= 60) insights.volumeLandmarkOptimizations[muscle] = optimizedLandmarks;\n                // Adaptive RIR recommendations\n                const rirHistory = muscleData.map((week)=>({\n                        actualRIR: week.averageRIR,\n                        targetRIR: week.targetRIR,\n                        nextDayFatigue: week.fatigue,\n                        recoveryDays: week.recoveryTime,\n                        techniqueRating: week.techniqueRating || 7\n                    }));\n                const adaptiveRIR = (0, _analyticsJs.adaptiveRIRRecommendations)(muscle, rirHistory);\n                if (adaptiveRIR.confidence >= 60) insights.adaptiveRIRRecommendations[muscle] = adaptiveRIR;\n            }\n        });\n        return insights;\n    }\n    /**\r\n   * Generate exercise recommendations for current training state\r\n   * @returns {Object} - Exercise recommendations by muscle\r\n   */ generateExerciseRecommendations() {\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const recommendations = {};\n        muscles.forEach((muscle)=>{\n            const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n            const fatigueLevel = this.estimateFatigueLevel(muscle);\n            const exercises = (0, _exerciseSelectionJs.selectOptimalExercises)(muscle, {\n                availableEquipment: [\n                    'barbell',\n                    'dumbbells',\n                    'cables',\n                    'machines'\n                ],\n                trainingGoal: 'hypertrophy',\n                experienceLevel: 'intermediate',\n                fatigueLevel,\n                timeConstraint: 'moderate',\n                previousExercises: this.getRecentExercises(muscle),\n                preferredStyle: volumeStatus === 'maximum' ? 'isolation_focused' : 'balanced'\n            });\n            recommendations[muscle] = {\n                primary: exercises[0],\n                alternatives: exercises.slice(1, 3),\n                rationale: `Selected based on ${volumeStatus} volume status and fatigue level ${fatigueLevel}`\n            };\n        });\n        return recommendations;\n    }\n    /**\r\n   * Check for optimization opportunities\r\n   * @returns {Array} - Available optimizations\r\n   */ checkForOptimizations() {\n        const optimizations = [];\n        const lastOptimization = this.lastOptimization;\n        const weeksSinceOptimization = lastOptimization ? (0, _trainingStateJsDefault.default).weekNo - lastOptimization.week : Infinity;\n        // Volume landmark optimization (every 4-6 weeks)\n        if (weeksSinceOptimization >= 4 && this.analyticsEnabled) {\n            const historicalData = this.getHistoricalData();\n            Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks).forEach((muscle)=>{\n                const muscleData = historicalData.filter((w)=>w.muscle === muscle);\n                if (muscleData.length >= 6) {\n                    const optimized = (0, _analyticsJs.optimizeVolumeLandmarks)(muscle, muscleData);\n                    if (optimized.confidence >= 70) optimizations.push({\n                        type: 'volume_landmarks',\n                        muscle,\n                        currentLandmarks: (0, _trainingStateJsDefault.default).volumeLandmarks[muscle],\n                        optimizedLandmarks: optimized,\n                        confidence: optimized.confidence,\n                        estimatedImprovement: this.calculateImprovementEstimate(muscle, optimized)\n                    });\n                }\n            });\n        }\n        // Exercise rotation recommendation\n        const staleExercises = this.detectStaleExercises();\n        if (staleExercises.length > 0) optimizations.push({\n            type: 'exercise_rotation',\n            staleExercises,\n            recommendation: 'Consider rotating exercises to prevent adaptation plateau'\n        });\n        return optimizations;\n    }\n    /**\r\n   * Assess current training risk\r\n   * @returns {Object} - Risk assessment\r\n   */ assessTrainingRisk() {\n        const riskFactors = [];\n        let riskScore = 0;\n        // High fatigue muscles\n        const highFatigueMuscles = this.getHighFatigueMuscles();\n        if (highFatigueMuscles.length > 0) {\n            riskScore += highFatigueMuscles.length * 10;\n            riskFactors.push(`${highFatigueMuscles.length} muscles showing high fatigue`);\n        }\n        // Consecutive MRV weeks\n        if ((0, _trainingStateJsDefault.default).consecutiveMRVWeeks >= 2) {\n            riskScore += 20;\n            riskFactors.push('Multiple consecutive weeks at MRV');\n        }\n        // Volume progression rate\n        const progressionRate = this.calculateVolumeProgressionRate();\n        if (progressionRate > 2) {\n            riskScore += 15;\n            riskFactors.push('Rapid volume progression detected');\n        }\n        // Performance decline indicators\n        const performanceDecline = this.detectPerformanceDecline();\n        if (performanceDecline) {\n            riskScore += 25;\n            riskFactors.push('Performance decline detected');\n        }\n        return {\n            riskScore,\n            riskLevel: riskScore <= 25 ? 'low' : riskScore <= 50 ? 'moderate' : riskScore <= 75 ? 'high' : 'critical',\n            riskFactors,\n            recommendations: this.generateRiskMitigationRecommendations(riskScore, riskFactors)\n        };\n    }\n    /**\r\n   * Process live session data for real-time insights\r\n   * @param {Object} sessionData - Session data from live monitor\r\n   */ processSessionData(sessionData) {\n        console.log(\"\\uD83D\\uDD04 Processing session data for insights...\");\n        // Update training insights\n        this.trainingInsights[sessionData.muscle] = {\n            lastSession: sessionData,\n            performance: sessionData.performance,\n            consistency: sessionData.performance.consistency,\n            updatedAt: new Date()\n        };\n        // Check for immediate concerns\n        if (sessionData.performance.targetAchievement.grade === 'D') console.warn(\"\\u26A0\\uFE0F Poor target achievement - consider technique review\");\n        if (sessionData.performance.consistency.rating === 'poor') console.warn(\"\\u26A0\\uFE0F Poor consistency - fatigue or technique issues\");\n        // Update fatigue indicators\n        const fatigueData = this.extractFatigueFromSession(sessionData);\n        if ((0, _fatigueJs.isHighFatigue)(sessionData.muscle, fatigueData, (0, _trainingStateJsDefault.default))) {\n            console.warn(`\\u{1F6A8} High fatigue detected for ${sessionData.muscle}`);\n            // Auto-trigger recovery recommendations\n            this.triggerRecoveryRecommendations(sessionData.muscle);\n        }\n    }\n    /**\r\n   * Process live set data for immediate feedback\r\n   * @param {Object} setData - Set data from live monitor\r\n   */ processLiveSetData(setData) {\n        // Real-time fatigue detection\n        if (setData.setInfo.rir > setData.setInfo.targetRIR + 2) console.log(\"\\uD83D\\uDCA1 Tip: Consider increasing weight next set\");\n        // Technique breakdown detection\n        if (setData.setInfo.techniqueRating && setData.setInfo.techniqueRating < 6) console.warn(\"\\u26A0\\uFE0F Technique breakdown detected - consider stopping or reducing weight\");\n    }\n    /**\r\n   * Trigger recovery recommendations for high fatigue muscle\r\n   * @param {string} muscle - Muscle group\r\n   */ triggerRecoveryRecommendations(muscle) {\n        const recommendations = {\n            immediate: [\n                'Reduce training volume by 20-30% next session',\n                'Extend rest periods between sets',\n                'Focus on technique over intensity'\n            ],\n            shortTerm: [\n                'Add extra rest day before next session',\n                'Implement stress management techniques',\n                'Prioritize sleep quality (8+ hours)'\n            ],\n            longTerm: [\n                'Consider deload if fatigue persists',\n                'Review nutrition and hydration status',\n                'Assess life stress factors'\n            ]\n        };\n        console.log(`\\u{1F527} Recovery recommendations for ${muscle}:`, recommendations);\n        // Could trigger UI notification here\n        return recommendations;\n    }\n    /**\r\n   * Get historical training data\r\n   * @returns {Array} - Historical data\r\n   */ getHistoricalData() {\n        const data = [];\n        // Retrieve from localStorage\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('session-')) try {\n                const sessionData = JSON.parse(localStorage.getItem(key));\n                data.push(sessionData);\n            } catch (e) {\n                console.warn('Failed to parse session data:', key);\n            }\n        }\n        // Sort by date\n        return data.sort((a, b)=>new Date(a.startTime) - new Date(b.startTime));\n    }\n    /**\r\n   * Estimate current fatigue level for muscle\r\n   * @param {string} muscle - Muscle group\r\n   * @returns {number} - Fatigue level (1-10)\r\n   */ estimateFatigueLevel(muscle) {\n        const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n        const baselineFatigue = {\n            'under-minimum': 2,\n            'optimal': 4,\n            'high': 6,\n            'maximum': 8\n        };\n        let fatigue = baselineFatigue[volumeStatus] || 5;\n        // Adjust based on recent session data\n        const recentInsight = this.trainingInsights[muscle];\n        if (recentInsight) {\n            if (recentInsight.performance.consistency.rating === 'poor') fatigue += 2;\n            if (recentInsight.performance.targetAchievement.grade === 'D') fatigue += 1;\n        }\n        return Math.min(10, Math.max(1, fatigue));\n    }\n    /**\r\n   * Get recently used exercises for muscle\r\n   * @param {string} muscle - Muscle group\r\n   * @returns {Array} - Recent exercises\r\n   */ getRecentExercises(muscle) {\n        const recentSessions = this.getHistoricalData().filter((session)=>session.muscle === muscle).slice(-3); // Last 3 sessions\n        return recentSessions.map((session)=>session.exercise);\n    }\n    /**\r\n   * Get muscles showing high fatigue\r\n   * @returns {Array} - High fatigue muscles\r\n   */ getHighFatigueMuscles() {\n        return Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks).filter((muscle)=>this.estimateFatigueLevel(muscle) >= 7);\n    }\n    /**\r\n   * Calculate volume progression rate\r\n   * @returns {number} - Sets per week progression rate\r\n   */ calculateVolumeProgressionRate() {\n        const historicalData = this.getHistoricalData();\n        if (historicalData.length < 3) return 0;\n        const recentWeeks = historicalData.slice(-3);\n        const volumeChanges = [];\n        for(let i = 1; i < recentWeeks.length; i++){\n            const volumeChange = recentWeeks[i].totalSets - recentWeeks[i - 1].totalSets;\n            volumeChanges.push(volumeChange);\n        }\n        return volumeChanges.reduce((a, b)=>a + b, 0) / volumeChanges.length;\n    }\n    /**\r\n   * Detect performance decline\r\n   * @returns {boolean} - True if decline detected\r\n   */ detectPerformanceDecline() {\n        const historicalData = this.getHistoricalData();\n        if (historicalData.length < 3) return false;\n        const recentPerformance = historicalData.slice(-3).map((session)=>session.performance?.targetAchievement?.targetPercentage || 70);\n        return recentPerformance.every((perf, i)=>i === 0 || perf <= recentPerformance[i - 1]);\n    }\n    /**\r\n   * Detect stale exercises (used for too long)\r\n   * @returns {Array} - Stale exercises\r\n   */ detectStaleExercises() {\n        const historicalData = this.getHistoricalData();\n        const exerciseUsage = {};\n        // Count recent exercise usage\n        historicalData.slice(-6).forEach((session)=>{\n            const key = `${session.muscle}-${session.exercise}`;\n            exerciseUsage[key] = (exerciseUsage[key] || 0) + 1;\n        });\n        // Find overused exercises\n        return Object.entries(exerciseUsage).filter(([key, count])=>count >= 4).map(([key, count])=>({\n                exercise: key,\n                usageCount: count\n            }));\n    }\n    /**\r\n   * Generate risk mitigation recommendations\r\n   * @param {number} riskScore - Risk score\r\n   * @param {Array} riskFactors - Risk factors\r\n   * @returns {Array} - Recommendations\r\n   */ generateRiskMitigationRecommendations(riskScore, riskFactors) {\n        const recommendations = [];\n        if (riskScore >= 75) {\n            recommendations.push('Implement immediate deload (50% volume reduction)');\n            recommendations.push('Address sleep and stress management urgently');\n        } else if (riskScore >= 50) {\n            recommendations.push('Plan deload within 1-2 weeks');\n            recommendations.push('Reduce volume progression rate');\n        } else if (riskScore >= 25) {\n            recommendations.push('Monitor fatigue indicators closely');\n            recommendations.push('Ensure adequate recovery between sessions');\n        }\n        return recommendations;\n    }\n    /**\r\n   * Calculate improvement estimate for optimization\r\n   * @param {string} muscle - Muscle group\r\n   * @param {Object} optimizedLandmarks - Optimized landmarks\r\n   * @returns {Object} - Improvement estimate\r\n   */ calculateImprovementEstimate(muscle, optimizedLandmarks) {\n        const current = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n        const optimized = optimizedLandmarks;\n        const mevImprovement = (optimized.MEV - current.MEV) / current.MEV * 100;\n        const mavImprovement = (optimized.MAV - current.MAV) / current.MAV * 100;\n        return {\n            mevChange: Math.round(mevImprovement),\n            mavChange: Math.round(mavImprovement),\n            estimatedVolumeIncrease: Math.round((mevImprovement + mavImprovement) / 2),\n            confidence: optimized.confidence\n        };\n    }\n    /**\r\n   * Extract fatigue data from session\r\n   * @param {Object} sessionData - Session data\r\n   * @returns {Object} - Fatigue data\r\n   */ extractFatigueFromSession(sessionData) {\n        return {\n            soreness: sessionData.performance.consistency.rating === 'poor' ? 3 : 1,\n            jointAche: 0,\n            perfChange: sessionData.performance.targetAchievement.grade === 'A' ? 1 : 0,\n            pump: sessionData.progress.totalLoad > 1000 ? 3 : 2,\n            disruption: sessionData.progress.totalLoad > 1000 ? 3 : 2,\n            lastLoad: Math.max(...sessionData.sets.map((set)=>set.weight))\n        };\n    }\n    /**\r\n   * Predict deload timing using analytics\r\n   * @returns {Object} - Deload prediction\r\n   */ predictDeloadTiming() {\n        if (!this.analyticsEnabled) return {\n            weeksUntilDeload: Infinity,\n            confidence: 0\n        };\n        const historicalData = this.getHistoricalData();\n        const recentMetrics = {\n            weeklyFatigueScore: historicalData.slice(-4).map((week)=>this.estimateFatigueLevel(week.muscle)),\n            performanceTrend: historicalData.slice(-4).map((week)=>week.performance?.targetAchievement?.targetPercentage || 70),\n            volumeProgression: historicalData.slice(-4).map((week)=>week.totalSets || 0),\n            motivationLevel: 7,\n            sleepQuality: 7 // Would need user input\n        };\n        return (0, _analyticsJs.predictDeloadTiming)(recentMetrics);\n    }\n    /**\r\n   * Detect training plateaus using analytics\r\n   * @returns {Object} - Plateau analysis\r\n   */ detectPlateaus() {\n        if (!this.analyticsEnabled) return {\n            plateauDetected: false\n        };\n        const historicalData = this.getHistoricalData();\n        const trainingData = {\n            weeklyPerformance: historicalData.slice(-6).map((week)=>week.performance?.targetAchievement?.targetPercentage || 70),\n            weeklyVolume: historicalData.slice(-6).map((week)=>week.totalSets || 0),\n            weeklyIntensity: historicalData.slice(-6).map((week)=>week.averageRIR ? 10 - week.averageRIR : 7),\n            weeklyFatigue: historicalData.slice(-6).map((week)=>this.estimateFatigueLevel(week.muscle))\n        };\n        return (0, _analyticsJs.detectTrainingPlateaus)(trainingData);\n    }\n}\n// Create singleton instance\nconst advancedIntelligence = new AdvancedTrainingIntelligence();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"./analytics.js\":\"5eA0i\",\"./exerciseSelection.js\":\"gGpfv\",\"./livePerformance.js\":\"6qXhO\",\"./fatigue.js\":\"5s7BT\",\"./volume.js\":\"1HfJW\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"ewacr\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Data Visualization and Analytics Enhancement\r\n * Provides sophisticated charting, trend analysis, and visual insights\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Export for use in main application\nparcelHelpers.export(exports, \"AdvancedDataVisualizer\", ()=>AdvancedDataVisualizer);\nparcelHelpers.export(exports, \"dataVisualizer\", ()=>dataVisualizer);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Advanced Training Data Visualizer\r\n * Creates sophisticated charts and visual analytics\r\n */ class AdvancedDataVisualizer {\n    constructor(){\n        this.chartConfigs = {\n            performance: this.getPerformanceChartConfig(),\n            volume: this.getVolumeChartConfig(),\n            fatigue: this.getFatigueChartConfig(),\n            intelligence: this.getIntelligenceChartConfig()\n        };\n    }\n    /**\r\n   * Create comprehensive training dashboard\r\n   * @returns {Object} - Dashboard data\r\n   */ createTrainingDashboard() {\n        const historicalData = this.getHistoricalData();\n        return {\n            overview: this.generateOverviewMetrics(historicalData),\n            trends: this.generateTrendAnalysis(historicalData),\n            predictions: this.generatePredictiveAnalytics(historicalData),\n            recommendations: this.generateActionableInsights(historicalData),\n            visualizations: this.generateChartData(historicalData)\n        };\n    }\n    /**\r\n   * Generate performance trend visualization\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Chart configuration\r\n   */ generatePerformanceTrendChart(data) {\n        const last12Weeks = data.slice(-12);\n        const chartData = {\n            labels: last12Weeks.map((week)=>`Week ${week.weekNo}`),\n            datasets: [\n                {\n                    label: 'Performance Score',\n                    data: last12Weeks.map((week)=>week.performance?.targetAchievement?.targetPercentage || 70),\n                    borderColor: 'rgb(99, 102, 241)',\n                    backgroundColor: 'rgba(99, 102, 241, 0.1)',\n                    tension: 0.4,\n                    fill: true\n                },\n                {\n                    label: 'Fatigue Level',\n                    data: last12Weeks.map((week)=>week.fatigueScore || 5),\n                    borderColor: 'rgb(239, 68, 68)',\n                    backgroundColor: 'rgba(239, 68, 68, 0.1)',\n                    tension: 0.4,\n                    yAxisID: 'y1'\n                }\n            ]\n        };\n        return {\n            type: 'line',\n            data: chartData,\n            options: this.getAdvancedChartOptions()\n        };\n    }\n    /**\r\n   * Generate volume progression heatmap\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Heatmap data\r\n   */ generateVolumeHeatmap(data) {\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const weeks = Array.from({\n            length: 12\n        }, (_, i)=>i + 1);\n        const heatmapData = muscles.map((muscle)=>{\n            return weeks.map((week)=>{\n                const weekData = data.find((d)=>d.weekNo === week && d.muscle === muscle);\n                const volume = weekData?.totalSets || 0;\n                const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n                // Calculate intensity relative to landmarks\n                let intensity = 0;\n                if (volume >= landmarks.MRV) intensity = 1.0;\n                else if (volume >= landmarks.MAV) intensity = 0.8;\n                else if (volume >= landmarks.MEV) intensity = 0.6;\n                else intensity = 0.3;\n                return {\n                    x: week,\n                    y: muscle,\n                    value: volume,\n                    intensity: intensity\n                };\n            });\n        }).flat();\n        return {\n            data: heatmapData,\n            config: this.getHeatmapConfig()\n        };\n    }\n    /**\r\n   * Generate predictive analytics chart\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Prediction chart\r\n   */ generatePredictiveChart(data) {\n        const recentWeeks = data.slice(-6);\n        const futureWeeks = 4;\n        // Calculate trend lines\n        const performanceTrend = this.calculateTrendLine(recentWeeks.map((week, i)=>[\n                i,\n                week.performance?.targetAchievement?.targetPercentage || 70\n            ]));\n        const fatigueTrend = this.calculateTrendLine(recentWeeks.map((week, i)=>[\n                i,\n                week.fatigueScore || 5\n            ]));\n        // Project future values\n        const futureLabels = Array.from({\n            length: futureWeeks\n        }, (_, i)=>`Predicted Week ${recentWeeks.length + i + 1}`);\n        const futurePerformance = Array.from({\n            length: futureWeeks\n        }, (_, i)=>Math.max(0, Math.min(100, performanceTrend.slope * (recentWeeks.length + i) + performanceTrend.intercept)));\n        const futureFatigue = Array.from({\n            length: futureWeeks\n        }, (_, i)=>Math.max(0, Math.min(10, fatigueTrend.slope * (recentWeeks.length + i) + fatigueTrend.intercept)));\n        return {\n            type: 'line',\n            data: {\n                labels: [\n                    ...recentWeeks.map((week)=>`Week ${week.weekNo}`),\n                    ...futureLabels\n                ],\n                datasets: [\n                    {\n                        label: 'Historical Performance',\n                        data: [\n                            ...recentWeeks.map((week)=>week.performance?.targetAchievement?.targetPercentage || 70),\n                            ...Array(futureWeeks).fill(null)\n                        ],\n                        borderColor: 'rgb(99, 102, 241)',\n                        backgroundColor: 'rgba(99, 102, 241, 0.1)',\n                        pointRadius: 5\n                    },\n                    {\n                        label: 'Predicted Performance',\n                        data: [\n                            ...Array(recentWeeks.length).fill(null),\n                            recentWeeks[recentWeeks.length - 1]?.performance?.targetAchievement?.targetPercentage || 70,\n                            ...futurePerformance\n                        ],\n                        borderColor: 'rgb(99, 102, 241)',\n                        backgroundColor: 'rgba(99, 102, 241, 0.2)',\n                        borderDash: [\n                            5,\n                            5\n                        ],\n                        pointRadius: 3\n                    }\n                ]\n            },\n            options: this.getPredictiveChartOptions()\n        };\n    }\n    /**\r\n   * Generate muscle group comparison radar chart\r\n   * @returns {Object} - Radar chart data\r\n   */ generateMuscleComparisonRadar() {\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const currentWeek = (0, _trainingStateJsDefault.default).weekNo;\n        const dataPoints = muscles.map((muscle)=>{\n            const volumeStatus = (0, _trainingStateJsDefault.default).getVolumeStatus(muscle);\n            const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n            const currentSets = (0, _trainingStateJsDefault.default).currentWeekSets[muscle] || 0;\n            // Calculate percentages\n            const mevPercentage = currentSets / landmarks.MEV * 100;\n            const mavPercentage = currentSets / landmarks.MAV * 100;\n            const mrvPercentage = currentSets / landmarks.MRV * 100;\n            return {\n                muscle,\n                efficiency: Math.min(100, mevPercentage),\n                volume: Math.min(100, mavPercentage),\n                intensity: Math.min(100, mrvPercentage),\n                status: this.getVolumeStatusScore(volumeStatus)\n            };\n        });\n        return {\n            type: 'radar',\n            data: {\n                labels: muscles,\n                datasets: [\n                    {\n                        label: 'Current Training Distribution',\n                        data: dataPoints.map((point)=>point.efficiency),\n                        borderColor: 'rgb(99, 102, 241)',\n                        backgroundColor: 'rgba(99, 102, 241, 0.2)',\n                        pointBackgroundColor: 'rgb(99, 102, 241)',\n                        pointBorderColor: '#fff',\n                        pointHoverBackgroundColor: '#fff',\n                        pointHoverBorderColor: 'rgb(99, 102, 241)'\n                    }\n                ]\n            },\n            options: this.getRadarChartOptions()\n        };\n    }\n    /**\r\n   * Generate interactive timeline visualization\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Timeline data\r\n   */ generateTrainingTimeline(data) {\n        const timeline = data.map((week)=>{\n            const events = [];\n            // Volume milestones\n            if (week.volumeProgression?.deloadTriggered) events.push({\n                type: 'deload',\n                title: 'Deload Week',\n                description: 'Training volume reduced for recovery',\n                severity: 'high'\n            });\n            // Performance achievements\n            if (week.performance?.targetAchievement?.grade === 'A') events.push({\n                type: 'achievement',\n                title: 'Excellent Performance',\n                description: 'Training targets exceeded',\n                severity: 'success'\n            });\n            // Fatigue warnings\n            if (week.fatigueScore >= 7) events.push({\n                type: 'warning',\n                title: 'High Fatigue Detected',\n                description: 'Consider recovery protocols',\n                severity: 'warning'\n            });\n            return {\n                week: week.weekNo,\n                date: week.startTime,\n                events,\n                metrics: {\n                    totalVolume: week.totalSets || 0,\n                    avgPerformance: week.performance?.targetAchievement?.targetPercentage || 70,\n                    fatigueLevel: week.fatigueScore || 5\n                }\n            };\n        });\n        return timeline;\n    }\n    /**\r\n   * Generate executive summary metrics\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Summary metrics\r\n   */ generateExecutiveSummary(data) {\n        const recentData = data.slice(-4);\n        return {\n            trainingConsistency: this.calculateConsistency(recentData),\n            performanceTrend: this.calculatePerformanceTrend(recentData),\n            volumeEfficiency: this.calculateVolumeEfficiency(recentData),\n            recoveryStatus: this.calculateRecoveryStatus(recentData),\n            nextActions: this.generateNextActions(recentData),\n            keyInsights: this.generateKeyInsights(recentData)\n        };\n    }\n    // Helper methods for calculations and configurations\n    calculateTrendLine(points) {\n        const n = points.length;\n        const sumX = points.reduce((sum, point)=>sum + point[0], 0);\n        const sumY = points.reduce((sum, point)=>sum + point[1], 0);\n        const sumXY = points.reduce((sum, point)=>sum + point[0] * point[1], 0);\n        const sumXX = points.reduce((sum, point)=>sum + point[0] * point[0], 0);\n        const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n        const intercept = (sumY - slope * sumX) / n;\n        return {\n            slope,\n            intercept\n        };\n    }\n    calculateConsistency(data) {\n        const sessions = data.filter((week)=>week.totalSets > 0);\n        return sessions.length / data.length * 100;\n    }\n    calculatePerformanceTrend(data) {\n        const performances = data.map((week)=>week.performance?.targetAchievement?.targetPercentage || 70);\n        const trend = this.calculateTrendLine(performances.map((perf, i)=>[\n                i,\n                perf\n            ]));\n        return trend.slope;\n    }\n    getVolumeStatusScore(status) {\n        const scores = {\n            'under-minimum': 25,\n            'optimal': 75,\n            'high': 90,\n            'maximum': 100\n        };\n        return scores[status] || 50;\n    }\n    getHistoricalData() {\n        const data = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('session-')) try {\n                const sessionData = JSON.parse(localStorage.getItem(key));\n                data.push(sessionData);\n            } catch (e) {\n                console.warn('Failed to parse session data:', key);\n            }\n        }\n        return data.sort((a, b)=>new Date(a.startTime) - new Date(b.startTime));\n    }\n    getAdvancedChartOptions() {\n        return {\n            responsive: true,\n            interaction: {\n                mode: 'index',\n                intersect: false\n            },\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Training Week'\n                    }\n                },\n                y: {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    title: {\n                        display: true,\n                        text: 'Performance %'\n                    }\n                },\n                y1: {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    title: {\n                        display: true,\n                        text: 'Fatigue Level'\n                    },\n                    grid: {\n                        drawOnChartArea: false\n                    }\n                }\n            }\n        };\n    }\n    getPredictiveChartOptions() {\n        return {\n            responsive: true,\n            plugins: {\n                title: {\n                    display: true,\n                    text: 'Performance Prediction Analysis'\n                },\n                legend: {\n                    display: true\n                }\n            },\n            scales: {\n                x: {\n                    title: {\n                        display: true,\n                        text: 'Training Timeline'\n                    }\n                },\n                y: {\n                    title: {\n                        display: true,\n                        text: 'Performance Score'\n                    },\n                    min: 0,\n                    max: 100\n                }\n            }\n        };\n    }\n    generateNextActions(data) {\n        const actions = [];\n        const latest = data[data.length - 1];\n        if (latest?.fatigueScore >= 7) actions.push('Consider deload or extra recovery day');\n        if (this.calculatePerformanceTrend(data) < -2) actions.push('Review training intensity and technique');\n        if (this.calculateConsistency(data) < 75) actions.push('Focus on training consistency');\n        return actions;\n    }\n    generateKeyInsights(data) {\n        const insights = [];\n        const trend = this.calculatePerformanceTrend(data);\n        if (trend > 2) insights.push('Performance is trending upward - excellent progress');\n        else if (trend < -2) insights.push('Performance decline detected - review program');\n        const avgVolume = data.reduce((sum, week)=>sum + (week.totalSets || 0), 0) / data.length;\n        if (avgVolume > 50) insights.push('High volume training detected - monitor recovery');\n        return insights;\n    }\n}\nconst dataVisualizer = new AdvancedDataVisualizer();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"baIS0\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Recovery & Wellness Integration\r\n * Comprehensive sleep, stress, and lifestyle factor integration\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Export for use in main application\nparcelHelpers.export(exports, \"WellnessRecoverySystem\", ()=>WellnessRecoverySystem);\nparcelHelpers.export(exports, \"wellnessSystem\", ()=>wellnessSystem);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nvar _fatigueJs = require(\"./fatigue.js\");\n/**\r\n * Advanced Wellness & Recovery System\r\n * Integrates sleep, stress, nutrition, and lifestyle factors\r\n */ class WellnessRecoverySystem {\n    constructor(){\n        this.wellnessMetrics = this.initializeWellnessTracking();\n        this.recoveryProtocols = this.initializeRecoveryProtocols();\n    }\n    /**\r\n   * Initialize wellness tracking system\r\n   */ initializeWellnessTracking() {\n        return {\n            sleep: {\n                duration: 7.5,\n                quality: 7,\n                efficiency: 85,\n                deepSleepPercentage: 20,\n                wakeups: 1,\n                bedtimeConsistency: 8\n            },\n            stress: {\n                workStress: 5,\n                lifeStress: 4,\n                trainingStress: 6,\n                overallStress: 5,\n                stressManagementPractices: []\n            },\n            nutrition: {\n                hydration: 7,\n                proteinAdequacy: 8,\n                carbTiming: 7,\n                micronutrients: 6,\n                mealTiming: 7,\n                supplements: []\n            },\n            lifestyle: {\n                screenTime: 6,\n                sunlightExposure: 5,\n                socialConnection: 7,\n                natureExposure: 4,\n                workLifeBalance: 6\n            },\n            physiological: {\n                restingHeartRate: 60,\n                heartRateVariability: 35,\n                bodyTemperature: 98.6,\n                bloodPressure: {\n                    systolic: 120,\n                    diastolic: 80\n                },\n                bodyWeight: 180\n            }\n        };\n    }\n    /**\r\n   * Initialize recovery protocol library\r\n   */ initializeRecoveryProtocols() {\n        return {\n            sleep: {\n                optimization: [\n                    \"Maintain consistent bedtime \\xb130 minutes\",\n                    'Limit blue light 2 hours before bed',\n                    \"Keep bedroom temperature 65-68\\xb0F (18-20\\xb0C)\",\n                    'Use blackout curtains or eye mask',\n                    'Avoid caffeine 8+ hours before bed'\n                ],\n                intervention: [\n                    'Implement progressive muscle relaxation',\n                    'Try guided meditation apps (Headspace, Calm)',\n                    'Consider magnesium supplementation',\n                    'Use white noise or earplugs',\n                    'Review medications affecting sleep'\n                ]\n            },\n            stress: {\n                daily: [\n                    '10-minute meditation or breathing exercises',\n                    'Schedule stress-free time blocks',\n                    'Practice gratitude journaling',\n                    'Limit news/social media consumption',\n                    'Engage in enjoyable hobbies'\n                ],\n                acute: [\n                    'Box breathing (4-4-4-4 pattern)',\n                    'Progressive muscle relaxation',\n                    'Take a walk in nature',\n                    'Call a supportive friend/family member',\n                    'Use stress management apps'\n                ],\n                chronic: [\n                    'Consider professional counseling',\n                    'Evaluate and modify stressors where possible',\n                    'Develop robust stress management routine',\n                    'Consider stress-reducing supplements',\n                    'Implement time management strategies'\n                ]\n            },\n            nutrition: {\n                hydration: [\n                    'Aim for 35-40ml per kg body weight daily',\n                    'Monitor urine color (pale yellow optimal)',\n                    'Increase intake during training days',\n                    'Add electrolytes for sessions >90 minutes',\n                    'Spread intake throughout the day'\n                ],\n                recovery: [\n                    'Consume protein within 2 hours post-workout',\n                    'Include anti-inflammatory foods (berries, fatty fish)',\n                    'Ensure adequate carbohydrate replenishment',\n                    'Consider tart cherry juice for sleep/recovery',\n                    'Time largest meals away from bedtime'\n                ],\n                energy: [\n                    'Eat balanced meals every 3-4 hours',\n                    'Include complex carbs for sustained energy',\n                    'Don\\'t skip breakfast',\n                    'Limit processed foods and added sugars',\n                    'Consider caffeine timing for training'\n                ]\n            },\n            lifestyle: {\n                activeRecovery: [\n                    'Light walking for 20-30 minutes',\n                    'Gentle yoga or stretching',\n                    'Swimming at easy pace',\n                    'Foam rolling or self-massage',\n                    'Breathing exercises'\n                ],\n                passiveRecovery: [\n                    'Massage therapy',\n                    'Sauna or hot bath',\n                    'Meditation or mindfulness',\n                    'Reading or gentle hobbies',\n                    'Quality time with loved ones'\n                ]\n            }\n        };\n    }\n    /**\r\n   * Track daily wellness metrics\r\n   * @param {Object} dailyMetrics - Daily wellness data\r\n   */ trackDailyWellness(dailyMetrics) {\n        const wellnessData = {\n            date: new Date().toISOString().split('T')[0],\n            sleep: dailyMetrics.sleep || {},\n            stress: dailyMetrics.stress || {},\n            nutrition: dailyMetrics.nutrition || {},\n            lifestyle: dailyMetrics.lifestyle || {},\n            physiological: dailyMetrics.physiological || {},\n            recoveryScore: this.calculateRecoveryScore(dailyMetrics),\n            readinessScore: this.calculateReadinessScore(dailyMetrics),\n            recommendations: this.generateWellnessRecommendations(dailyMetrics)\n        };\n        // Store data\n        const key = `wellness-${wellnessData.date}`;\n        localStorage.setItem(key, JSON.stringify(wellnessData));\n        // Update current metrics\n        this.wellnessMetrics = {\n            ...this.wellnessMetrics,\n            ...dailyMetrics\n        };\n        return wellnessData;\n    }\n    /**\r\n   * Calculate overall recovery score\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {number} - Recovery score (0-100)\r\n   */ calculateRecoveryScore(metrics) {\n        let score = 0;\n        let factors = 0;\n        // Sleep contribution (40%)\n        if (metrics.sleep) {\n            const sleepScore = this.calculateSleepScore(metrics.sleep);\n            score += sleepScore * 0.4;\n            factors += 0.4;\n        }\n        // Stress contribution (25%)\n        if (metrics.stress) {\n            const stressScore = this.calculateStressScore(metrics.stress);\n            score += stressScore * 0.25;\n            factors += 0.25;\n        }\n        // Nutrition contribution (20%)\n        if (metrics.nutrition) {\n            const nutritionScore = this.calculateNutritionScore(metrics.nutrition);\n            score += nutritionScore * 0.2;\n            factors += 0.2;\n        }\n        // Lifestyle contribution (15%)\n        if (metrics.lifestyle) {\n            const lifestyleScore = this.calculateLifestyleScore(metrics.lifestyle);\n            score += lifestyleScore * 0.15;\n            factors += 0.15;\n        }\n        return factors > 0 ? Math.round(score / factors) : 50;\n    }\n    /**\r\n   * Calculate training readiness score\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {number} - Readiness score (0-100)\r\n   */ calculateReadinessScore(metrics) {\n        const recoveryScore = this.calculateRecoveryScore(metrics);\n        const trainingHistory = this.getRecentTrainingLoad();\n        const fatigueLevel = this.getCurrentFatigueLevel();\n        // Adjust readiness based on training load and fatigue\n        let adjustment = 0;\n        if (trainingHistory.consecutiveHighDays >= 3) adjustment -= 15;\n        if (fatigueLevel >= 7) adjustment -= 20;\n        if (metrics.physiological?.restingHeartRate > this.getBaselineHR() + 10) adjustment -= 10;\n        const readinessScore = Math.max(0, Math.min(100, recoveryScore + adjustment));\n        return readinessScore;\n    }\n    /**\r\n   * Generate personalized wellness recommendations\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {Object} - Categorized recommendations\r\n   */ generateWellnessRecommendations(metrics) {\n        const recommendations = {\n            priority: [],\n            sleep: [],\n            stress: [],\n            nutrition: [],\n            training: []\n        };\n        // Sleep recommendations\n        if (metrics.sleep?.duration < 7) {\n            recommendations.priority.push('Prioritize increasing sleep duration to 7-9 hours');\n            recommendations.sleep.push(...this.recoveryProtocols.sleep.optimization);\n        }\n        if (metrics.sleep?.quality < 6) recommendations.sleep.push(...this.recoveryProtocols.sleep.intervention);\n        // Stress recommendations\n        if (metrics.stress?.overallStress > 7) {\n            recommendations.priority.push('Implement stress management strategies');\n            recommendations.stress.push(...this.recoveryProtocols.stress.acute);\n        }\n        // Nutrition recommendations\n        if (metrics.nutrition?.hydration < 6) {\n            recommendations.priority.push('Increase daily hydration');\n            recommendations.nutrition.push(...this.recoveryProtocols.nutrition.hydration);\n        }\n        // Training modifications\n        const readinessScore = this.calculateReadinessScore(metrics);\n        if (readinessScore < 60) {\n            recommendations.priority.push('Consider reducing training intensity today');\n            recommendations.training.push('Focus on technique and movement quality');\n            recommendations.training.push('Reduce volume by 20-30%');\n            recommendations.training.push('Include extra warm-up and cool-down');\n        } else if (readinessScore > 85) {\n            recommendations.training.push('Good day for higher intensity training');\n            recommendations.training.push('Consider pushing challenging sets');\n        }\n        return recommendations;\n    }\n    /**\r\n   * Analyze wellness trends over time\r\n   * @param {number} days - Number of days to analyze\r\n   * @returns {Object} - Trend analysis\r\n   */ analyzeWellnessTrends(days = 14) {\n        const wellnessHistory = this.getWellnessHistory(days);\n        const trends = {\n            sleep: this.analyzeSleepTrend(wellnessHistory),\n            stress: this.analyzeStressTrend(wellnessHistory),\n            recovery: this.analyzeRecoveryTrend(wellnessHistory),\n            readiness: this.analyzeReadinessTrend(wellnessHistory),\n            correlations: this.analyzeWellnessCorrelations(wellnessHistory)\n        };\n        return trends;\n    }\n    /**\r\n   * Generate comprehensive wellness report\r\n   * @returns {Object} - Complete wellness analysis\r\n   */ generateWellnessReport() {\n        const currentMetrics = this.wellnessMetrics;\n        const trends = this.analyzeWellnessTrends(30);\n        const trainingImpact = this.analyzeTrainingWellnessImpact();\n        return {\n            current: {\n                recoveryScore: this.calculateRecoveryScore(currentMetrics),\n                readinessScore: this.calculateReadinessScore(currentMetrics),\n                keyMetrics: this.getKeyWellnessMetrics(currentMetrics),\n                alerts: this.generateWellnessAlerts(currentMetrics)\n            },\n            trends,\n            trainingImpact,\n            recommendations: this.generateWellnessRecommendations(currentMetrics),\n            protocols: this.getPersonalizedProtocols(),\n            insights: this.generateWellnessInsights(trends, trainingImpact)\n        };\n    }\n    /**\r\n   * Integrate wellness data with training decisions\r\n   * @param {Object} plannedTraining - Planned training session\r\n   * @returns {Object} - Modified training recommendations\r\n   */ optimizeTrainingBasedOnWellness(plannedTraining) {\n        const readinessScore = this.calculateReadinessScore(this.wellnessMetrics);\n        const recoveryScore = this.calculateRecoveryScore(this.wellnessMetrics);\n        let modifications = {\n            volumeMultiplier: 1.0,\n            intensityMultiplier: 1.0,\n            recommendations: [],\n            rationale: ''\n        };\n        // High readiness\n        if (readinessScore >= 85 && recoveryScore >= 80) {\n            modifications.volumeMultiplier = 1.1;\n            modifications.intensityMultiplier = 1.05;\n            modifications.recommendations.push('Excellent day for pushing limits');\n            modifications.rationale = 'High wellness scores support increased training stress';\n        } else if (readinessScore >= 65) {\n            // Maintain planned training\n            modifications.recommendations.push('Proceed with planned training');\n            modifications.rationale = 'Wellness scores support normal training';\n        } else if (readinessScore < 60) {\n            modifications.volumeMultiplier = 0.8;\n            modifications.intensityMultiplier = 0.9;\n            modifications.recommendations.push('Reduce volume and intensity');\n            modifications.recommendations.push('Focus on movement quality');\n            modifications.rationale = 'Wellness scores suggest increased recovery need';\n        } else if (readinessScore < 40) {\n            modifications.volumeMultiplier = 0.6;\n            modifications.intensityMultiplier = 0.8;\n            modifications.recommendations.push('Consider active recovery instead');\n            modifications.recommendations.push('Light movement, stretching, breathing');\n            modifications.rationale = 'Very low wellness scores require prioritizing recovery';\n        }\n        return {\n            originalTraining: plannedTraining,\n            modifications,\n            adjustedTraining: this.applyTrainingModifications(plannedTraining, modifications)\n        };\n    }\n    // Helper methods for calculations\n    calculateSleepScore(sleep) {\n        let score = 0;\n        score += Math.min(100, sleep.duration / 8 * 40); // Duration (40%)\n        score += sleep.quality / 10 * 30; // Quality (30%)\n        score += sleep.efficiency / 100 * 20; // Efficiency (20%)\n        score += Math.max(0, (10 - sleep.wakeups) / 10) * 10; // Consistency (10%)\n        return Math.round(score);\n    }\n    calculateStressScore(stress) {\n        const avgStress = (stress.workStress + stress.lifeStress + stress.trainingStress) / 3;\n        return Math.round(Math.max(0, 100 - avgStress * 10));\n    }\n    calculateNutritionScore(nutrition) {\n        const factors = [\n            'hydration',\n            'proteinAdequacy',\n            'carbTiming',\n            'micronutrients',\n            'mealTiming'\n        ];\n        const avg = factors.reduce((sum, factor)=>sum + (nutrition[factor] || 5), 0) / factors.length;\n        return Math.round(avg / 10 * 100);\n    }\n    calculateLifestyleScore(lifestyle) {\n        const factors = [\n            'screenTime',\n            'sunlightExposure',\n            'socialConnection',\n            'natureExposure',\n            'workLifeBalance'\n        ];\n        const avg = factors.reduce((sum, factor)=>sum + (lifestyle[factor] || 5), 0) / factors.length;\n        return Math.round(avg / 10 * 100);\n    }\n    getWellnessHistory(days) {\n        const history = [];\n        const today = new Date();\n        for(let i = 0; i < days; i++){\n            const date = new Date(today);\n            date.setDate(date.getDate() - i);\n            const key = `wellness-${date.toISOString().split('T')[0]}`;\n            const data = localStorage.getItem(key);\n            if (data) try {\n                history.push(JSON.parse(data));\n            } catch (e) {\n                console.warn('Failed to parse wellness data:', key);\n            }\n        }\n        return history.reverse(); // Chronological order\n    }\n    getRecentTrainingLoad() {\n        // This would integrate with existing training data\n        return {\n            consecutiveHighDays: 2,\n            weeklyVolume: 45,\n            intensity: 7\n        };\n    }\n    getCurrentFatigueLevel() {\n        // Integration with existing fatigue system\n        return 5; // Placeholder\n    }\n    getBaselineHR() {\n        return 60; // This would be calculated from historical data\n    }\n    applyTrainingModifications(training, modifications) {\n        return {\n            ...training,\n            volume: Math.round(training.volume * modifications.volumeMultiplier),\n            intensity: training.intensity * modifications.intensityMultiplier,\n            modifications: modifications.recommendations\n        };\n    }\n}\nconst wellnessSystem = new WellnessRecoverySystem();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"./fatigue.js\":\"5s7BT\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"gvkvx\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Periodization & Auto-Planning System\r\n * Intelligent long-term training planning and periodization\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\n// Export for use in main application\nparcelHelpers.export(exports, \"AdvancedPeriodizationSystem\", ()=>AdvancedPeriodizationSystem);\nparcelHelpers.export(exports, \"periodizationSystem\", ()=>periodizationSystem);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\nvar _wellnessIntegrationJs = require(\"./wellnessIntegration.js\");\nvar _intelligenceHubJs = require(\"./intelligenceHub.js\");\n/**\r\n * Advanced Periodization System\r\n * Creates intelligent long-term training plans with adaptive periodization\r\n */ class AdvancedPeriodizationSystem {\n    constructor(){\n        this.periodizationModels = this.initializePeriodizationModels();\n        this.planningTemplates = this.initializePlanningTemplates();\n        this.adaptationAlgorithms = this.initializeAdaptationAlgorithms();\n    }\n    /**\r\n   * Initialize periodization models\r\n   */ initializePeriodizationModels() {\n        return {\n            linear: {\n                name: 'Linear Periodization',\n                description: 'Progressive volume increase with intensity modulation',\n                phases: [\n                    'Accumulation',\n                    'Intensification',\n                    'Realization',\n                    'Deload'\n                ],\n                volumeProgression: [\n                    100,\n                    120,\n                    110,\n                    60\n                ],\n                intensityProgression: [\n                    70,\n                    75,\n                    85,\n                    60\n                ],\n                duration: 4,\n                applications: [\n                    'Beginners',\n                    'Strength focus',\n                    'Competition prep'\n                ]\n            },\n            undulating: {\n                name: 'Undulating Periodization',\n                description: 'Frequent variation in volume and intensity',\n                phases: [\n                    'High Volume',\n                    'High Intensity',\n                    'Moderate',\n                    'Deload'\n                ],\n                volumeProgression: [\n                    130,\n                    80,\n                    100,\n                    60\n                ],\n                intensityProgression: [\n                    70,\n                    90,\n                    80,\n                    60\n                ],\n                duration: 4,\n                applications: [\n                    'Intermediate/Advanced',\n                    'Hypertrophy',\n                    'Avoiding plateaus'\n                ]\n            },\n            block: {\n                name: 'Block Periodization',\n                description: 'Focused training blocks with specific adaptations',\n                phases: [\n                    'Accumulation',\n                    'Intensification',\n                    'Realization'\n                ],\n                volumeProgression: [\n                    120,\n                    90,\n                    70\n                ],\n                intensityProgression: [\n                    75,\n                    85,\n                    95\n                ],\n                duration: 3,\n                applications: [\n                    'Advanced athletes',\n                    'Sport-specific',\n                    'Competition cycles'\n                ]\n            },\n            conjugate: {\n                name: 'Conjugate Method',\n                description: 'Simultaneous development of multiple qualities',\n                phases: [\n                    'Max Effort',\n                    'Dynamic Effort',\n                    'Repetition Method'\n                ],\n                volumeProgression: [\n                    90,\n                    110,\n                    120\n                ],\n                intensityProgression: [\n                    95,\n                    70,\n                    80\n                ],\n                duration: 3,\n                applications: [\n                    'Powerlifting',\n                    'Strength athletes',\n                    'Advanced training'\n                ]\n            },\n            autoregulated: {\n                name: 'Autoregulated Training',\n                description: 'AI-driven adaptive periodization based on real-time feedback',\n                phases: [\n                    'Adaptive',\n                    'Responsive',\n                    'Predictive'\n                ],\n                volumeProgression: 'dynamic',\n                intensityProgression: 'dynamic',\n                duration: 'variable',\n                applications: [\n                    'All levels',\n                    'Optimal adaptation',\n                    'Injury prevention'\n                ]\n            }\n        };\n    }\n    /**\r\n   * Initialize planning templates\r\n   */ initializePlanningTemplates() {\n        return {\n            hypertrophy12Week: {\n                name: '12-Week Hypertrophy Specialization',\n                duration: 12,\n                phases: [\n                    {\n                        name: 'Foundation Building',\n                        weeks: 4,\n                        focus: 'Volume accumulation and movement quality',\n                        volumeMultiplier: 1.0,\n                        intensityRange: [\n                            70,\n                            80\n                        ],\n                        exercises: 'compound and isolation mix'\n                    },\n                    {\n                        name: 'Progressive Overload',\n                        weeks: 4,\n                        focus: 'Systematic volume and intensity increase',\n                        volumeMultiplier: 1.2,\n                        intensityRange: [\n                            75,\n                            85\n                        ],\n                        exercises: 'add complexity and variety'\n                    },\n                    {\n                        name: 'Peak Volume',\n                        weeks: 3,\n                        focus: 'Maximum tolerable volume',\n                        volumeMultiplier: 1.4,\n                        intensityRange: [\n                            70,\n                            80\n                        ],\n                        exercises: 'isolation focus for weak points'\n                    },\n                    {\n                        name: 'Deload & Assessment',\n                        weeks: 1,\n                        focus: 'Recovery and progress evaluation',\n                        volumeMultiplier: 0.6,\n                        intensityRange: [\n                            60,\n                            70\n                        ],\n                        exercises: 'movement quality and mobility'\n                    }\n                ]\n            },\n            strength16Week: {\n                name: '16-Week Strength Specialization',\n                duration: 16,\n                phases: [\n                    {\n                        name: 'General Preparation',\n                        weeks: 4,\n                        focus: 'Movement patterns and base building',\n                        volumeMultiplier: 1.1,\n                        intensityRange: [\n                            70,\n                            80\n                        ],\n                        exercises: 'compound movements with accessories'\n                    },\n                    {\n                        name: 'Specific Preparation',\n                        weeks: 6,\n                        focus: 'Strength development in competition lifts',\n                        volumeMultiplier: 1.0,\n                        intensityRange: [\n                            80,\n                            90\n                        ],\n                        exercises: 'competition lifts and close variants'\n                    },\n                    {\n                        name: 'Competition Preparation',\n                        weeks: 4,\n                        focus: 'Peak strength and competition readiness',\n                        volumeMultiplier: 0.8,\n                        intensityRange: [\n                            85,\n                            100\n                        ],\n                        exercises: 'competition lifts only'\n                    },\n                    {\n                        name: 'Peaking',\n                        weeks: 2,\n                        focus: 'Peak performance',\n                        volumeMultiplier: 0.5,\n                        intensityRange: [\n                            90,\n                            105\n                        ],\n                        exercises: 'competition lifts with opener/attempts'\n                    }\n                ]\n            },\n            powerbuilding20Week: {\n                name: '20-Week Powerbuilding Program',\n                duration: 20,\n                phases: [\n                    {\n                        name: 'Hypertrophy Block',\n                        weeks: 8,\n                        focus: 'Muscle mass and volume tolerance',\n                        volumeMultiplier: 1.3,\n                        intensityRange: [\n                            65,\n                            80\n                        ],\n                        exercises: 'high volume, pump-focused'\n                    },\n                    {\n                        name: 'Strength Block',\n                        weeks: 8,\n                        focus: 'Maximal strength development',\n                        volumeMultiplier: 0.9,\n                        intensityRange: [\n                            80,\n                            95\n                        ],\n                        exercises: 'compound movements, heavy loads'\n                    },\n                    {\n                        name: 'Power Block',\n                        weeks: 3,\n                        focus: 'Power and speed development',\n                        volumeMultiplier: 0.7,\n                        intensityRange: [\n                            70,\n                            85\n                        ],\n                        exercises: 'explosive movements, plyometrics'\n                    },\n                    {\n                        name: 'Deload',\n                        weeks: 1,\n                        focus: 'Recovery and reassessment',\n                        volumeMultiplier: 0.5,\n                        intensityRange: [\n                            60,\n                            70\n                        ],\n                        exercises: 'movement quality and mobility'\n                    }\n                ]\n            }\n        };\n    }\n    /**\r\n   * Initialize adaptation algorithms\r\n   */ initializeAdaptationAlgorithms() {\n        return {\n            volumeAdaptation: {\n                minIncrease: 0.05,\n                maxIncrease: 0.25,\n                baseIncrease: 0.10,\n                fatigueThreshold: 7,\n                recoveryThreshold: 5\n            },\n            intensityAdaptation: {\n                minIncrease: 0.025,\n                maxIncrease: 0.10,\n                baseIncrease: 0.05,\n                performanceThreshold: 80,\n                plateauThreshold: 75\n            },\n            frequencyAdaptation: {\n                minFrequency: 1,\n                maxFrequency: 4,\n                recoveryFactor: 0.8,\n                volumeFactor: 1.2\n            }\n        };\n    }\n    /**\r\n   * Create long-term training plan\r\n   * @param {Object} goals - Training goals and preferences\r\n   * @param {number} duration - Plan duration in weeks\r\n   * @returns {Object} - Complete periodized plan\r\n   */ createLongTermPlan(goals, duration = 16) {\n        const userProfile = this.analyzeUserProfile();\n        const selectedModel = this.selectOptimalPeriodization(goals, userProfile);\n        const planStructure = this.generatePlanStructure(selectedModel, duration, goals);\n        const weeklyPlans = this.generateWeeklyPlans(planStructure);\n        const progressionPlan = this.createProgressionPlan(weeklyPlans);\n        return {\n            overview: {\n                duration,\n                model: selectedModel.name,\n                goals: goals,\n                userProfile,\n                startDate: new Date(),\n                estimatedCompletion: this.calculateCompletionDate(duration)\n            },\n            structure: planStructure,\n            weeklyPlans,\n            progressionPlan,\n            adaptationTriggers: this.defineAdaptationTriggers(),\n            milestones: this.definePlanMilestones(duration, goals),\n            contingencyPlans: this.createContingencyPlans()\n        };\n    }\n    /**\r\n   * Analyze user training profile\r\n   * @returns {Object} - User profile analysis\r\n   */ analyzeUserProfile() {\n        const historicalData = this.getHistoricalTrainingData();\n        const currentCapacity = this.assessCurrentCapacity();\n        const responsePatterns = this.analyzeResponsePatterns(historicalData);\n        return {\n            experience: this.determineExperienceLevel(historicalData),\n            capacity: currentCapacity,\n            responsePatterns,\n            preferences: this.analyzeTrainingPreferences(historicalData),\n            limitingFactors: this.identifyLimitingFactors(),\n            adaptationRate: this.calculateAdaptationRate(historicalData)\n        };\n    }\n    /**\r\n   * Select optimal periodization model\r\n   * @param {Object} goals - Training goals\r\n   * @param {Object} profile - User profile\r\n   * @returns {Object} - Selected periodization model\r\n   */ selectOptimalPeriodization(goals, profile) {\n        const scores = {};\n        // Score each model based on goals and profile\n        Object.entries(this.periodizationModels).forEach(([key, model])=>{\n            let score = 0;\n            // Goal alignment\n            if (goals.primary === 'hypertrophy' && model.applications.includes('Hypertrophy')) score += 3;\n            if (goals.primary === 'strength' && model.applications.includes('Strength focus')) score += 3;\n            if (goals.primary === 'powerlifting' && model.applications.includes('Powerlifting')) score += 3;\n            // Experience level alignment\n            if (profile.experience === 'beginner' && model.applications.includes('Beginners')) score += 2;\n            if (profile.experience === 'intermediate' && model.applications.includes('Intermediate/Advanced')) score += 2;\n            if (profile.experience === 'advanced' && model.applications.includes('Advanced athletes')) score += 2;\n            // Adaptation patterns\n            if (profile.adaptationRate === 'fast' && key === 'undulating') score += 1;\n            if (profile.adaptationRate === 'slow' && key === 'linear') score += 1;\n            if (profile.responsePatterns.variabilityTolerance === 'high' && key === 'conjugate') score += 1;\n            scores[key] = score;\n        });\n        // Select highest scoring model\n        const selectedKey = Object.keys(scores).reduce((a, b)=>scores[a] > scores[b] ? a : b);\n        return this.periodizationModels[selectedKey];\n    }\n    /**\r\n   * Generate adaptive weekly plans\r\n   * @param {Object} planStructure - Overall plan structure\r\n   * @returns {Array} - Weekly training plans\r\n   */ generateWeeklyPlans(planStructure) {\n        const weeklyPlans = [];\n        let currentWeek = 1;\n        planStructure.phases.forEach((phase)=>{\n            for(let week = 0; week < phase.weeks; week++){\n                const weekPlan = this.generateWeekPlan(phase, week, currentWeek);\n                weeklyPlans.push(weekPlan);\n                currentWeek++;\n            }\n        });\n        return weeklyPlans;\n    }\n    /**\r\n   * Generate individual week plan\r\n   * @param {Object} phase - Current phase\r\n   * @param {number} weekInPhase - Week within phase\r\n   * @param {number} absoluteWeek - Absolute week number\r\n   * @returns {Object} - Week training plan\r\n   */ generateWeekPlan(phase, weekInPhase, absoluteWeek) {\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const weekProgression = (weekInPhase + 1) / phase.weeks;\n        const plan = {\n            week: absoluteWeek,\n            phase: phase.name,\n            focus: phase.focus,\n            progressionFactor: weekProgression,\n            muscles: {}\n        };\n        muscles.forEach((muscle)=>{\n            const baseLandmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n            const adjustedLandmarks = this.adjustLandmarksForPhase(baseLandmarks, phase, weekProgression);\n            plan.muscles[muscle] = {\n                landmarks: adjustedLandmarks,\n                targetSets: this.calculateTargetSets(adjustedLandmarks, phase),\n                intensityRange: phase.intensityRange,\n                exerciseSelection: this.selectPhaseExercises(muscle, phase),\n                loadProgression: this.calculateLoadProgression(phase, weekProgression),\n                recoveryRequirements: this.calculateRecoveryRequirements(muscle, phase)\n            };\n        });\n        return plan;\n    }\n    /**\r\n   * Create adaptive progression system\r\n   * @param {Array} weeklyPlans - All weekly plans\r\n   * @returns {Object} - Progression management system\r\n   */ createProgressionPlan(weeklyPlans) {\n        return {\n            volumeProgression: this.createVolumeProgression(weeklyPlans),\n            intensityProgression: this.createIntensityProgression(weeklyPlans),\n            exerciseProgression: this.createExerciseProgression(weeklyPlans),\n            deloadTriggers: this.defineDeloadTriggers(),\n            adaptationChecks: this.scheduleAdaptationChecks(weeklyPlans),\n            autoAdjustmentRules: this.defineAutoAdjustmentRules()\n        };\n    }\n    /**\r\n   * Real-time plan adaptation based on performance\r\n   * @param {Object} currentPlan - Current training plan\r\n   * @param {Object} recentPerformance - Recent performance data\r\n   * @returns {Object} - Adapted plan\r\n   */ adaptPlanBasedOnPerformance(currentPlan, recentPerformance) {\n        const adaptations = {\n            volumeAdjustment: 1.0,\n            intensityAdjustment: 1.0,\n            frequencyAdjustment: 1.0,\n            exerciseModifications: [],\n            phaseModifications: [],\n            reasoning: []\n        };\n        // Analyze performance trends\n        const performanceTrend = this.analyzePerformanceTrend(recentPerformance);\n        const fatigueStatus = this.assessFatigueStatus(recentPerformance);\n        const wellnessImpact = this.assessWellnessImpact();\n        // Apply adaptations based on analysis\n        if (performanceTrend.direction === 'declining' && performanceTrend.significance > 0.7) {\n            adaptations.volumeAdjustment = 0.85;\n            adaptations.intensityAdjustment = 0.9;\n            adaptations.reasoning.push('Performance decline detected - reducing training stress');\n        }\n        if (fatigueStatus.level === 'high' && fatigueStatus.duration >= 3) {\n            adaptations.volumeAdjustment *= 0.8;\n            adaptations.reasoning.push('Sustained high fatigue - additional volume reduction');\n        }\n        if (wellnessImpact.readiness < 60) {\n            adaptations.frequencyAdjustment = 0.8;\n            adaptations.reasoning.push('Low wellness readiness - reducing training frequency');\n        }\n        // Positive adaptations\n        if (performanceTrend.direction === 'improving' && fatigueStatus.level === 'low') {\n            adaptations.volumeAdjustment = 1.1;\n            adaptations.reasoning.push('Strong performance with low fatigue - increasing volume');\n        }\n        return this.applyPlanAdaptations(currentPlan, adaptations);\n    }\n    /**\r\n   * Generate intelligent deload recommendations\r\n   * @param {Object} currentStatus - Current training status\r\n   * @returns {Object} - Deload plan\r\n   */ generateIntelligentDeload(currentStatus) {\n        const deloadIntensity = this.calculateDeloadIntensity(currentStatus);\n        const deloadDuration = this.calculateDeloadDuration(currentStatus);\n        const deloadActivities = this.selectDeloadActivities(currentStatus);\n        return {\n            type: this.determineDeloadType(currentStatus),\n            intensity: deloadIntensity,\n            duration: deloadDuration,\n            activities: deloadActivities,\n            volumeReduction: this.calculateVolumeReduction(deloadIntensity),\n            intensityReduction: this.calculateIntensityReduction(deloadIntensity),\n            focusAreas: this.identifyDeloadFocusAreas(currentStatus),\n            returnCriteria: this.defineReturnCriteria(currentStatus),\n            monitoring: this.defineDeloadMonitoring()\n        };\n    }\n    /**\r\n   * Create competition peaking protocol\r\n   * @param {Object} competition - Competition details\r\n   * @param {number} weeksOut - Weeks until competition\r\n   * @returns {Object} - Peaking protocol\r\n   */ createPeakingProtocol(competition, weeksOut) {\n        const peakingPhases = this.definePeakingPhases(weeksOut);\n        const tapering = this.createTaperingPlan(weeksOut);\n        const competitionPrep = this.createCompetitionPrep(competition);\n        return {\n            phases: peakingPhases,\n            tapering,\n            competitionPrep,\n            timeline: this.createPeakingTimeline(weeksOut),\n            keyWorkouts: this.scheduleKeyWorkouts(weeksOut),\n            recoveryProtocol: this.createPeakingRecoveryProtocol(),\n            nutritionGuidance: this.createPeakingNutritionPlan(),\n            mentalPreparation: this.createMentalPrepPlan()\n        };\n    }\n    // Helper methods for various calculations\n    determineExperienceLevel(data) {\n        const totalWeeks = data.length;\n        const consistencyScore = this.calculateConsistency(data);\n        const progressionRate = this.calculateProgressionRate(data);\n        if (totalWeeks < 12 || consistencyScore < 60) return 'beginner';\n        if (totalWeeks < 52 || progressionRate > 0.8) return 'intermediate';\n        return 'advanced';\n    }\n    assessCurrentCapacity() {\n        const muscles = Object.keys((0, _trainingStateJsDefault.default).volumeLandmarks);\n        const totalCapacity = muscles.reduce((sum, muscle)=>{\n            const landmarks = (0, _trainingStateJsDefault.default).volumeLandmarks[muscle];\n            return sum + landmarks.MRV;\n        }, 0);\n        return {\n            totalVolume: totalCapacity,\n            muscleDistribution: this.analyzeMuscleDistribution(),\n            recoveryCapacity: this.assessRecoveryCapacity(),\n            adaptationPotential: this.assessAdaptationPotential()\n        };\n    }\n    calculateTargetSets(landmarks, phase) {\n        const baseTarget = (landmarks.MEV + landmarks.MAV) / 2;\n        return Math.round(baseTarget * phase.volumeMultiplier);\n    }\n    getHistoricalTrainingData() {\n        // Integrate with existing data storage\n        const data = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('session-')) try {\n                const sessionData = JSON.parse(localStorage.getItem(key));\n                data.push(sessionData);\n            } catch (e) {\n                console.warn('Failed to parse session data:', key);\n            }\n        }\n        return data.sort((a, b)=>new Date(a.startTime) - new Date(b.startTime));\n    }\n    calculateCompletionDate(duration) {\n        const today = new Date();\n        const completion = new Date(today);\n        completion.setDate(completion.getDate() + duration * 7);\n        return completion;\n    }\n}\nconst periodizationSystem = new AdvancedPeriodizationSystem();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"./wellnessIntegration.js\":\"baIS0\",\"./intelligenceHub.js\":\"bDUtg\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"iZ0Js\":[function(require,module,exports,__globalThis) {\n/**\r\n * Advanced Data Export & Backup System\r\n * Provides comprehensive data export, import, and backup capabilities\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"DataExportManager\", ()=>DataExportManager);\nparcelHelpers.export(exports, \"dataExportManager\", ()=>dataExportManager);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * Data Export Manager Class\r\n * Handles all data export, import, and backup operations\r\n */ class DataExportManager {\n    constructor(){\n        this.exportFormats = [\n            'json',\n            'csv',\n            'excel'\n        ];\n        this.compressionEnabled = true;\n        this.encryptionEnabled = false; // Future enhancement\n    }\n    /**\r\n   * Export all training data\r\n   * @param {string} format - Export format (json, csv, excel)\r\n   * @param {Object} options - Export options\r\n   * @returns {Object} - Export result\r\n   */ exportAllData(format = 'json', options = {}) {\n        const { includePersonalData = true, includeAnalytics = true, includeWellness = true, dateRange = null, compress = this.compressionEnabled } = options;\n        try {\n            const exportData = this.gatherExportData({\n                includePersonalData,\n                includeAnalytics,\n                includeWellness,\n                dateRange\n            });\n            switch(format.toLowerCase()){\n                case 'json':\n                    return this.exportAsJSON(exportData, compress);\n                case 'csv':\n                    return this.exportAsCSV(exportData);\n                case 'excel':\n                    return this.exportAsExcel(exportData);\n                default:\n                    throw new Error(`Unsupported export format: ${format}`);\n            }\n        } catch (error) {\n            console.error('Export failed:', error);\n            return {\n                success: false,\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    /**\r\n   * Gather all data for export\r\n   * @param {Object} options - Data gathering options\r\n   * @returns {Object} - Comprehensive data object\r\n   */ gatherExportData(options) {\n        const { includePersonalData, includeAnalytics, includeWellness, dateRange } = options;\n        const exportData = {\n            metadata: {\n                exportDate: new Date().toISOString(),\n                appVersion: '2.0.0',\n                exportType: 'full',\n                dataPoints: 0\n            },\n            trainingState: null,\n            sessionHistory: [],\n            feedback: [],\n            analytics: null,\n            wellness: null,\n            preferences: null\n        };\n        // Core training state\n        if (includePersonalData) {\n            exportData.trainingState = this.serializeTrainingState();\n            exportData.preferences = this.gatherUserPreferences();\n        }\n        // Session history\n        exportData.sessionHistory = this.gatherSessionHistory(dateRange);\n        // Feedback data\n        exportData.feedback = this.gatherFeedbackData(dateRange);\n        // Analytics data\n        if (includeAnalytics) exportData.analytics = this.gatherAnalyticsData(dateRange);\n        // Wellness data\n        if (includeWellness) exportData.wellness = this.gatherWellnessData(dateRange);\n        // Calculate data points\n        exportData.metadata.dataPoints = this.calculateDataPoints(exportData);\n        return exportData;\n    }\n    /**\r\n   * Serialize training state\r\n   * @returns {Object} - Serialized training state\r\n   */ serializeTrainingState() {\n        return {\n            volumeLandmarks: (0, _trainingStateJsDefault.default).volumeLandmarks,\n            currentSets: (0, _trainingStateJsDefault.default).currentSets,\n            weekNo: (0, _trainingStateJsDefault.default).weekNo,\n            blockNo: (0, _trainingStateJsDefault.default).blockNo,\n            deloadWeeks: (0, _trainingStateJsDefault.default).deloadWeeks,\n            targetRIR: (0, _trainingStateJsDefault.default).getTargetRIR(),\n            currentPhase: (0, _trainingStateJsDefault.default).getCurrentPhase(),\n            stateHistory: (0, _trainingStateJsDefault.default).getStateHistory(),\n            totalMusclesNeedingRecovery: (0, _trainingStateJsDefault.default).totalMusclesNeedingRecovery,\n            recoverySessionsThisWeek: (0, _trainingStateJsDefault.default).recoverySessionsThisWeek\n        };\n    }\n    /**\r\n   * Gather session history\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Session history data\r\n   */ gatherSessionHistory(dateRange) {\n        const sessions = [];\n        // Gather all session data from localStorage\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('session-')) try {\n                const sessionData = JSON.parse(localStorage.getItem(key));\n                if (this.isWithinDateRange(sessionData.timestamp, dateRange)) sessions.push({\n                    sessionId: key,\n                    ...sessionData\n                });\n            } catch (error) {\n                console.warn(`Failed to parse session data: ${key}`, error);\n            }\n        }\n        return sessions.sort((a, b)=>new Date(a.timestamp) - new Date(b.timestamp));\n    }\n    /**\r\n   * Gather feedback data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Feedback data\r\n   */ gatherFeedbackData(dateRange) {\n        const feedback = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('feedback-')) try {\n                const feedbackData = JSON.parse(localStorage.getItem(key));\n                if (this.isWithinDateRange(feedbackData.timestamp, dateRange)) feedback.push({\n                    feedbackId: key,\n                    ...feedbackData\n                });\n            } catch (error) {\n                console.warn(`Failed to parse feedback data: ${key}`, error);\n            }\n        }\n        return feedback.sort((a, b)=>new Date(a.timestamp) - new Date(b.timestamp));\n    }\n    /**\r\n   * Gather analytics data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Object} - Analytics data\r\n   */ gatherAnalyticsData(dateRange) {\n        const analytics = {\n            volumeOptimizations: [],\n            deloadPredictions: [],\n            plateauAnalyses: [],\n            performanceMetrics: []\n        };\n        // Gather analytics data from localStorage\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && (key.startsWith('analytics-') || key.startsWith('optimization-'))) try {\n                const analyticsData = JSON.parse(localStorage.getItem(key));\n                if (this.isWithinDateRange(analyticsData.timestamp, dateRange)) {\n                    if (key.includes('volume')) analytics.volumeOptimizations.push(analyticsData);\n                    else if (key.includes('deload')) analytics.deloadPredictions.push(analyticsData);\n                    else if (key.includes('plateau')) analytics.plateauAnalyses.push(analyticsData);\n                }\n            } catch (error) {\n                console.warn(`Failed to parse analytics data: ${key}`, error);\n            }\n        }\n        return analytics;\n    }\n    /**\r\n   * Gather wellness data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Wellness data\r\n   */ gatherWellnessData(dateRange) {\n        const wellness = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('wellness-')) try {\n                const wellnessData = JSON.parse(localStorage.getItem(key));\n                if (this.isWithinDateRange(wellnessData.date, dateRange)) wellness.push(wellnessData);\n            } catch (error) {\n                console.warn(`Failed to parse wellness data: ${key}`, error);\n            }\n        }\n        return wellness.sort((a, b)=>new Date(a.date) - new Date(b.date));\n    }\n    /**\r\n   * Gather user preferences\r\n   * @returns {Object} - User preferences\r\n   */ gatherUserPreferences() {\n        return {\n            theme: localStorage.getItem('user-theme') || 'dark',\n            units: localStorage.getItem('user-units') || 'metric',\n            notifications: localStorage.getItem('user-notifications') || 'enabled',\n            autoProgression: localStorage.getItem('user-auto-progression') || 'enabled',\n            analyticsEnabled: localStorage.getItem('analytics-enabled') || 'true'\n        };\n    }\n    /**\r\n   * Export as JSON\r\n   * @param {Object} data - Data to export\r\n   * @param {boolean} compress - Whether to compress\r\n   * @returns {Object} - Export result\r\n   */ exportAsJSON(data, compress = false) {\n        try {\n            const jsonString = JSON.stringify(data, null, compress ? 0 : 2);\n            const blob = new Blob([\n                jsonString\n            ], {\n                type: 'application/json'\n            });\n            const filename = `powerhouseatx-backup-${this.getDateString()}.json`;\n            this.downloadBlob(blob, filename);\n            return {\n                success: true,\n                filename,\n                size: blob.size,\n                format: 'JSON',\n                dataPoints: data.metadata.dataPoints,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            throw new Error(`JSON export failed: ${error.message}`);\n        }\n    }\n    /**\r\n   * Export as CSV\r\n   * @param {Object} data - Data to export\r\n   * @returns {Object} - Export result\r\n   */ exportAsCSV(data) {\n        try {\n            const csvData = this.convertToCSV(data);\n            const blob = new Blob([\n                csvData\n            ], {\n                type: 'text/csv'\n            });\n            const filename = `powerhouseatx-data-${this.getDateString()}.csv`;\n            this.downloadBlob(blob, filename);\n            return {\n                success: true,\n                filename,\n                size: blob.size,\n                format: 'CSV',\n                dataPoints: data.metadata.dataPoints,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            throw new Error(`CSV export failed: ${error.message}`);\n        }\n    }\n    /**\r\n   * Convert data to CSV format\r\n   * @param {Object} data - Data to convert\r\n   * @returns {string} - CSV string\r\n   */ convertToCSV(data) {\n        let csv = '';\n        // Sessions CSV\n        if (data.sessionHistory.length > 0) {\n            csv += 'SESSION DATA\\n';\n            csv += 'Date,Muscle,Exercise,Sets,Reps,Weight,RIR,Performance,Duration\\n';\n            data.sessionHistory.forEach((session)=>{\n                csv += `${session.timestamp},${session.muscle || ''},${session.exercise || ''},${session.sets || ''},${session.reps || ''},${session.weight || ''},${session.rir || ''},${session.performance || ''},${session.duration || ''}\\n`;\n            });\n            csv += '\\n';\n        }\n        // Feedback CSV\n        if (data.feedback.length > 0) {\n            csv += 'FEEDBACK DATA\\n';\n            csv += 'Date,Muscle,Current Sets,MMC,Pump,Disruption,Performance,Soreness,Recommendation\\n';\n            data.feedback.forEach((feedback)=>{\n                csv += `${feedback.timestamp},${feedback.muscle},${feedback.currentSets},${feedback.stimulus?.mmc || ''},${feedback.stimulus?.pump || ''},${feedback.stimulus?.disruption || ''},${feedback.performance},${feedback.soreness},${feedback.results?.recommendedAction?.advice || ''}\\n`;\n            });\n            csv += '\\n';\n        }\n        // Wellness CSV\n        if (data.wellness && data.wellness.length > 0) {\n            csv += 'WELLNESS DATA\\n';\n            csv += 'Date,Recovery Score,Readiness Score,Sleep Duration,Sleep Quality,Stress Level\\n';\n            data.wellness.forEach((wellness)=>{\n                csv += `${wellness.date},${wellness.recoveryScore},${wellness.readinessScore},${wellness.sleep?.duration || ''},${wellness.sleep?.quality || ''},${wellness.stress?.overall || ''}\\n`;\n            });\n        }\n        return csv;\n    }\n    /**\r\n   * Import data from file\r\n   * @param {File} file - File to import\r\n   * @param {Object} options - Import options\r\n   * @returns {Promise} - Import result\r\n   */ async importData(file, options = {}) {\n        const { overwrite = false, merge = true } = options;\n        try {\n            const fileContent = await this.readFile(file);\n            let importData;\n            if (file.name.endsWith('.json')) importData = JSON.parse(fileContent);\n            else if (file.name.endsWith('.csv')) importData = this.parseCSV(fileContent);\n            else throw new Error('Unsupported file format');\n            return this.processImportData(importData, {\n                overwrite,\n                merge\n            });\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    /**\r\n   * Process imported data\r\n   * @param {Object} data - Imported data\r\n   * @param {Object} options - Processing options\r\n   * @returns {Object} - Processing result\r\n   */ processImportData(data, options) {\n        const { overwrite, merge } = options;\n        const result = {\n            success: true,\n            imported: {\n                trainingState: false,\n                sessions: 0,\n                feedback: 0,\n                wellness: 0,\n                analytics: 0\n            },\n            warnings: [],\n            errors: []\n        };\n        try {\n            // Import training state\n            if (data.trainingState) {\n                if (overwrite || !(0, _trainingStateJsDefault.default).hasData()) {\n                    this.importTrainingState(data.trainingState);\n                    result.imported.trainingState = true;\n                } else if (merge) {\n                    this.mergeTrainingState(data.trainingState);\n                    result.imported.trainingState = true;\n                    result.warnings.push('Training state merged with existing data');\n                }\n            }\n            // Import session history\n            if (data.sessionHistory) result.imported.sessions = this.importSessionHistory(data.sessionHistory, overwrite);\n            // Import feedback\n            if (data.feedback) result.imported.feedback = this.importFeedback(data.feedback, overwrite);\n            // Import wellness\n            if (data.wellness) result.imported.wellness = this.importWellness(data.wellness, overwrite);\n            // Import analytics\n            if (data.analytics) result.imported.analytics = this.importAnalytics(data.analytics, overwrite);\n            result.timestamp = new Date().toISOString();\n            return result;\n        } catch (error) {\n            result.success = false;\n            result.errors.push(error.message);\n            return result;\n        }\n    }\n    /**\r\n   * Create automatic backup\r\n   * @returns {Object} - Backup result\r\n   */ createAutoBackup() {\n        const backupData = this.gatherExportData({\n            includePersonalData: true,\n            includeAnalytics: true,\n            includeWellness: true\n        });\n        // Store in localStorage as compressed backup\n        const backupKey = `backup-${this.getDateString()}`;\n        const compressedData = JSON.stringify(backupData);\n        try {\n            localStorage.setItem(backupKey, compressedData);\n            // Clean old backups (keep last 5)\n            this.cleanOldBackups();\n            return {\n                success: true,\n                backupKey,\n                size: compressedData.length,\n                dataPoints: backupData.metadata.dataPoints,\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    /**\r\n   * Get available backups\r\n   * @returns {Array} - List of available backups\r\n   */ getAvailableBackups() {\n        const backups = [];\n        for(let i = 0; i < localStorage.length; i++){\n            const key = localStorage.key(i);\n            if (key && key.startsWith('backup-')) try {\n                const backupData = localStorage.getItem(key);\n                const metadata = JSON.parse(backupData).metadata;\n                backups.push({\n                    key,\n                    date: metadata.exportDate,\n                    dataPoints: metadata.dataPoints,\n                    size: backupData.length\n                });\n            } catch (error) {\n                console.warn(`Failed to parse backup: ${key}`, error);\n            }\n        }\n        return backups.sort((a, b)=>new Date(b.date) - new Date(a.date));\n    }\n    /**\r\n   * Restore from backup\r\n   * @param {string} backupKey - Backup key\r\n   * @returns {Object} - Restore result\r\n   */ restoreFromBackup(backupKey) {\n        try {\n            const backupData = localStorage.getItem(backupKey);\n            if (!backupData) throw new Error('Backup not found');\n            const data = JSON.parse(backupData);\n            return this.processImportData(data, {\n                overwrite: true,\n                merge: false\n            });\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n    // Utility methods\n    isWithinDateRange(date, dateRange) {\n        if (!dateRange) return true;\n        const checkDate = new Date(date);\n        const startDate = dateRange.start ? new Date(dateRange.start) : null;\n        const endDate = dateRange.end ? new Date(dateRange.end) : null;\n        if (startDate && checkDate < startDate) return false;\n        if (endDate && checkDate > endDate) return false;\n        return true;\n    }\n    calculateDataPoints(data) {\n        return (data.sessionHistory?.length || 0) + (data.feedback?.length || 0) + (data.wellness?.length || 0) + (data.analytics?.volumeOptimizations?.length || 0) + (data.analytics?.deloadPredictions?.length || 0);\n    }\n    getDateString() {\n        return new Date().toISOString().split('T')[0];\n    }\n    downloadBlob(blob, filename) {\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n    readFile(file) {\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.onload = (e)=>resolve(e.target.result);\n            reader.onerror = (e)=>reject(new Error('Failed to read file'));\n            reader.readAsText(file);\n        });\n    }\n    cleanOldBackups() {\n        const backups = this.getAvailableBackups();\n        if (backups.length > 5) {\n            const toDelete = backups.slice(5);\n            toDelete.forEach((backup)=>{\n                localStorage.removeItem(backup.key);\n            });\n        }\n    }\n    importTrainingState(stateData) {\n        Object.keys(stateData.volumeLandmarks).forEach((muscle)=>{\n            (0, _trainingStateJsDefault.default).updateVolumeLandmarks(muscle, stateData.volumeLandmarks[muscle]);\n        });\n        Object.keys(stateData.currentSets).forEach((muscle)=>{\n            (0, _trainingStateJsDefault.default).setSets(muscle, stateData.currentSets[muscle]);\n        });\n        (0, _trainingStateJsDefault.default).weekNo = stateData.weekNo;\n        (0, _trainingStateJsDefault.default).blockNo = stateData.blockNo;\n    }\n    importSessionHistory(sessions, overwrite) {\n        let imported = 0;\n        sessions.forEach((session)=>{\n            const key = session.sessionId || `session-imported-${Date.now()}-${imported}`;\n            if (overwrite || !localStorage.getItem(key)) {\n                localStorage.setItem(key, JSON.stringify(session));\n                imported++;\n            }\n        });\n        return imported;\n    }\n    importFeedback(feedback, overwrite) {\n        let imported = 0;\n        feedback.forEach((item)=>{\n            const key = item.feedbackId || `feedback-imported-${Date.now()}-${imported}`;\n            if (overwrite || !localStorage.getItem(key)) {\n                localStorage.setItem(key, JSON.stringify(item));\n                imported++;\n            }\n        });\n        return imported;\n    }\n    importWellness(wellness, overwrite) {\n        let imported = 0;\n        wellness.forEach((item)=>{\n            const key = `wellness-${item.date}`;\n            if (overwrite || !localStorage.getItem(key)) {\n                localStorage.setItem(key, JSON.stringify(item));\n                imported++;\n            }\n        });\n        return imported;\n    }\n    importAnalytics(analytics, overwrite) {\n        let imported = 0;\n        // Implementation would depend on analytics data structure\n        return imported;\n    }\n}\n// Create singleton instance\nconst dataExportManager = new DataExportManager();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"4cMS8\":[function(require,module,exports,__globalThis) {\n/**\r\n * User Feedback & Analytics Collection System\r\n * Gathers user feedback and usage analytics to improve the training system\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"UserFeedbackManager\", ()=>UserFeedbackManager);\nparcelHelpers.export(exports, \"userFeedbackManager\", ()=>userFeedbackManager);\nvar _trainingStateJs = require(\"../core/trainingState.js\");\nvar _trainingStateJsDefault = parcelHelpers.interopDefault(_trainingStateJs);\n/**\r\n * User Feedback Manager Class\r\n * Handles feedback collection, analysis, and improvement suggestions\r\n */ class UserFeedbackManager {\n    constructor(){\n        this.feedbackCategories = [\n            'usability',\n            'accuracy',\n            'features',\n            'performance',\n            'mobile',\n            'suggestions'\n        ];\n        this.analyticsEnabled = true;\n        this.privacyMode = true; // No personal data collected\n    }\n    /**\r\n   * Initialize feedback system\r\n   */ initializeFeedbackSystem() {\n        this.createFeedbackWidget();\n        this.setupUsageTracking();\n        this.schedulePeriodicFeedback();\n    }\n    /**\r\n   * Create feedback widget\r\n   */ createFeedbackWidget() {\n        const widget = document.createElement('div');\n        widget.id = 'feedback-widget';\n        widget.className = 'feedback-widget';\n        widget.innerHTML = `\n      <div class=\"feedback-toggle\" onclick=\"userFeedbackManager.toggleFeedbackPanel()\">\n        \\u{1F4AC} Feedback\n      </div>\n      <div class=\"feedback-panel\" id=\"feedbackPanel\" style=\"display: none;\">\n        <div class=\"feedback-header\">\n          <h3>\\u{1F4A1} Help Improve PowerHouseATX</h3>\n          <button onclick=\"userFeedbackManager.closeFeedbackPanel()\">\\xd7</button>\n        </div>\n        <div class=\"feedback-content\">\n          <div class=\"feedback-category\">\n            <label>What would you like feedback on?</label>\n            <select id=\"feedbackCategory\">\n              <option value=\"usability\">\\u{1F4BB} Ease of Use</option>\n              <option value=\"accuracy\">\\u{1F3AF} Recommendation Accuracy</option>\n              <option value=\"features\">\\u{2728} Features & Functionality</option>\n              <option value=\"performance\">\\u{26A1} App Performance</option>\n              <option value=\"mobile\">\\u{1F4F1} Mobile Experience</option>\n              <option value=\"suggestions\">\\u{1F4A1} New Feature Ideas</option>\n            </select>\n          </div>\n          \n          <div class=\"feedback-rating\">\n            <label>Overall satisfaction (1-5):</label>\n            <div class=\"rating-stars\" id=\"satisfactionRating\">\n              ${[\n            1,\n            2,\n            3,\n            4,\n            5\n        ].map((i)=>`<span class=\"star\" data-rating=\"${i}\">\\u{2B50}</span>`).join('')}\n            </div>\n          </div>\n          \n          <div class=\"feedback-text\">\n            <label>Your feedback:</label>\n            <textarea id=\"feedbackText\" placeholder=\"Tell us what's working well or what could be improved...\"></textarea>\n          </div>\n          \n          <div class=\"feedback-usage\" id=\"usageContext\">\n            <!-- Automatically populated with usage context -->\n          </div>\n          \n          <div class=\"feedback-actions\">\n            <button onclick=\"userFeedbackManager.submitFeedback()\" class=\"submit-btn\">\n              \\u{1F4E4} Send Feedback\n            </button>\n            <button onclick=\"userFeedbackManager.laterReminder()\" class=\"later-btn\">\n              \\u{23F0} Remind Later\n            </button>\n          </div>\n        </div>\n      </div>\n    `;\n        document.body.appendChild(widget);\n        this.setupFeedbackEvents();\n    }\n    /**\r\n   * Setup feedback widget events\r\n   */ setupFeedbackEvents() {\n        // Rating stars\n        document.querySelectorAll('.star').forEach((star)=>{\n            star.addEventListener('click', (e)=>{\n                const rating = parseInt(e.target.dataset.rating);\n                this.setRating(rating);\n            });\n        });\n    }\n    /**\r\n   * Set rating stars\r\n   * @param {number} rating - Rating value (1-5)\r\n   */ setRating(rating) {\n        document.querySelectorAll('.star').forEach((star, index)=>{\n            if (index < rating) {\n                star.style.opacity = '1';\n                star.style.transform = 'scale(1.2)';\n            } else {\n                star.style.opacity = '0.3';\n                star.style.transform = 'scale(1)';\n            }\n        });\n        this.currentRating = rating;\n    }\n    /**\r\n   * Toggle feedback panel\r\n   */ toggleFeedbackPanel() {\n        const panel = document.getElementById('feedbackPanel');\n        const isVisible = panel.style.display !== 'none';\n        if (isVisible) this.closeFeedbackPanel();\n        else this.openFeedbackPanel();\n    }\n    /**\r\n   * Open feedback panel\r\n   */ openFeedbackPanel() {\n        const panel = document.getElementById('feedbackPanel');\n        panel.style.display = 'block';\n        // Populate usage context\n        this.populateUsageContext();\n        // Track feedback panel opened\n        this.trackEvent('feedback_panel_opened');\n    }\n    /**\r\n   * Close feedback panel\r\n   */ closeFeedbackPanel() {\n        const panel = document.getElementById('feedbackPanel');\n        panel.style.display = 'none';\n    }\n    /**\r\n   * Populate usage context\r\n   */ populateUsageContext() {\n        const context = document.getElementById('usageContext');\n        const usage = this.getUsageContext();\n        context.innerHTML = `\n      <div class=\"usage-context\">\n        <h4>\\u{1F4CA} Your Usage Context (helps us improve):</h4>\n        <div class=\"context-grid\">\n          <div class=\"context-item\">\n            <span class=\"context-label\">Training Week:</span>\n            <span class=\"context-value\">${usage.currentWeek}</span>\n          </div>\n          <div class=\"context-item\">\n            <span class=\"context-label\">Features Used:</span>\n            <span class=\"context-value\">${usage.featuresUsed.join(', ')}</span>\n          </div>\n          <div class=\"context-item\">\n            <span class=\"context-label\">Device:</span>\n            <span class=\"context-value\">${usage.deviceType}</span>\n          </div>\n          <div class=\"context-item\">\n            <span class=\"context-label\">Session Count:</span>\n            <span class=\"context-value\">${usage.sessionCount}</span>\n          </div>\n        </div>\n        <div class=\"privacy-note\">\n          \\u{1F512} No personal training data is shared - only anonymized usage patterns\n        </div>\n      </div>\n    `;\n    }\n    /**\r\n   * Get usage context\r\n   * @returns {Object} - Usage context\r\n   */ getUsageContext() {\n        const usage = this.getStoredUsage();\n        return {\n            currentWeek: (0, _trainingStateJsDefault.default).weekNo,\n            currentBlock: (0, _trainingStateJsDefault.default).blockNo,\n            featuresUsed: usage.featuresUsed || [],\n            deviceType: this.getDeviceType(),\n            sessionCount: usage.sessionCount || 0,\n            lastActive: usage.lastActive || new Date().toISOString(),\n            averageSessionDuration: usage.averageSessionDuration || 0\n        };\n    }\n    /**\r\n   * Submit feedback\r\n   */ async submitFeedback() {\n        const category = document.getElementById('feedbackCategory').value;\n        const text = document.getElementById('feedbackText').value;\n        const rating = this.currentRating || 0;\n        if (!text.trim()) {\n            this.showFeedbackMessage('Please provide some feedback text', 'warning');\n            return;\n        }\n        const feedback = {\n            id: this.generateFeedbackId(),\n            timestamp: new Date().toISOString(),\n            category,\n            rating,\n            text: text.trim(),\n            context: this.getUsageContext(),\n            appVersion: '2.0.0',\n            userAgent: navigator.userAgent\n        };\n        try {\n            const result = await this.processFeedback(feedback);\n            if (result.success) {\n                this.showFeedbackMessage(\"Thank you! Your feedback helps us improve \\uD83D\\uDE4F\", 'success');\n                this.resetFeedbackForm();\n                // Auto-close after 2 seconds\n                setTimeout(()=>this.closeFeedbackPanel(), 2000);\n                // Track successful submission\n                this.trackEvent('feedback_submitted', {\n                    category,\n                    rating\n                });\n            } else this.showFeedbackMessage(\"Feedback saved locally. Thank you! \\uD83D\\uDCBE\", 'info');\n        } catch (error) {\n            console.error('Feedback submission error:', error);\n            this.showFeedbackMessage(\"Feedback saved locally. Thank you! \\uD83D\\uDCBE\", 'info');\n        }\n    }\n    /**\r\n   * Process feedback (store locally and optionally send)\r\n   * @param {Object} feedback - Feedback data\r\n   * @returns {Object} - Processing result\r\n   */ async processFeedback(feedback) {\n        // Always store locally\n        const localKey = `feedback-user-${feedback.id}`;\n        localStorage.setItem(localKey, JSON.stringify(feedback));\n        // Store in feedback analytics\n        this.updateFeedbackAnalytics(feedback);\n        // In a real implementation, you might send to a server here\n        // For now, we'll just process locally\n        return {\n            success: true,\n            stored: 'local',\n            id: feedback.id\n        };\n    }\n    /**\r\n   * Update feedback analytics\r\n   * @param {Object} feedback - Feedback data\r\n   */ updateFeedbackAnalytics(feedback) {\n        const analytics = this.getFeedbackAnalytics();\n        // Update categories\n        if (!analytics.categories[feedback.category]) analytics.categories[feedback.category] = {\n            count: 0,\n            averageRating: 0,\n            totalRating: 0\n        };\n        const category = analytics.categories[feedback.category];\n        category.count++;\n        category.totalRating += feedback.rating;\n        category.averageRating = category.totalRating / category.count;\n        // Update overall metrics\n        analytics.totalFeedback++;\n        analytics.totalRating += feedback.rating;\n        analytics.averageRating = analytics.totalRating / analytics.totalFeedback;\n        analytics.lastFeedback = feedback.timestamp;\n        // Store updated analytics\n        localStorage.setItem('feedback-analytics', JSON.stringify(analytics));\n    }\n    /**\r\n   * Get feedback analytics\r\n   * @returns {Object} - Feedback analytics\r\n   */ getFeedbackAnalytics() {\n        const stored = localStorage.getItem('feedback-analytics');\n        if (stored) return JSON.parse(stored);\n        return {\n            totalFeedback: 0,\n            averageRating: 0,\n            totalRating: 0,\n            categories: {},\n            lastFeedback: null,\n            trends: []\n        };\n    }\n    /**\r\n   * Setup usage tracking\r\n   */ setupUsageTracking() {\n        // Track page loads\n        this.trackEvent('app_loaded');\n        // Track feature usage\n        this.setupFeatureTracking();\n        // Track session duration\n        this.trackSessionStart();\n        // Track before unload\n        window.addEventListener('beforeunload', ()=>{\n            this.trackSessionEnd();\n        });\n    }\n    /**\r\n   * Setup feature tracking\r\n   */ setupFeatureTracking() {\n        // Track button clicks for major features\n        const trackableButtons = [\n            'submitFeedbackBtn',\n            'runAutoVolumeProgression',\n            'initializeIntelligence',\n            'startLiveSession',\n            'optimizeVolumeLandmarks',\n            'predictDeloadTiming'\n        ];\n        trackableButtons.forEach((buttonId)=>{\n            const button = document.getElementById(buttonId);\n            if (button) button.addEventListener('click', ()=>{\n                this.trackFeatureUsage(buttonId);\n            });\n        });\n        // Track section expansions\n        document.querySelectorAll('.section-banner').forEach((banner)=>{\n            banner.addEventListener('click', ()=>{\n                const sectionName = banner.textContent.trim().split(' ')[0];\n                this.trackFeatureUsage(`section_${sectionName.toLowerCase()}`);\n            });\n        });\n    }\n    /**\r\n   * Track feature usage\r\n   * @param {string} feature - Feature name\r\n   */ trackFeatureUsage(feature) {\n        const usage = this.getStoredUsage();\n        if (!usage.featuresUsed) usage.featuresUsed = [];\n        if (!usage.featuresUsed.includes(feature)) usage.featuresUsed.push(feature);\n        if (!usage.featureCount) usage.featureCount = {};\n        usage.featureCount[feature] = (usage.featureCount[feature] || 0) + 1;\n        usage.lastFeatureUsed = feature;\n        usage.lastActivity = new Date().toISOString();\n        this.storeUsage(usage);\n        this.trackEvent('feature_used', {\n            feature\n        });\n    }\n    /**\r\n   * Track session start\r\n   */ trackSessionStart() {\n        this.sessionStartTime = Date.now();\n        this.trackEvent('session_started');\n    }\n    /**\r\n   * Track session end\r\n   */ trackSessionEnd() {\n        if (this.sessionStartTime) {\n            const duration = Date.now() - this.sessionStartTime;\n            const usage = this.getStoredUsage();\n            usage.sessionCount = (usage.sessionCount || 0) + 1;\n            usage.totalSessionTime = (usage.totalSessionTime || 0) + duration;\n            usage.averageSessionDuration = usage.totalSessionTime / usage.sessionCount;\n            usage.lastSession = new Date().toISOString();\n            this.storeUsage(usage);\n            this.trackEvent('session_ended', {\n                duration\n            });\n        }\n    }\n    /**\r\n   * Track event\r\n   * @param {string} event - Event name\r\n   * @param {Object} data - Event data\r\n   */ trackEvent(event, data = {}) {\n        if (!this.analyticsEnabled) return;\n        const eventData = {\n            event,\n            timestamp: new Date().toISOString(),\n            data,\n            sessionId: this.getSessionId()\n        };\n        // Store event locally\n        const events = this.getStoredEvents();\n        events.push(eventData);\n        // Keep only last 100 events\n        if (events.length > 100) events.splice(0, events.length - 100);\n        localStorage.setItem('usage-events', JSON.stringify(events));\n    }\n    /**\r\n   * Schedule periodic feedback requests\r\n   */ schedulePeriodicFeedback() {\n        const usage = this.getStoredUsage();\n        const lastFeedbackRequest = usage.lastFeedbackRequest;\n        const daysSinceLastRequest = lastFeedbackRequest ? (Date.now() - new Date(lastFeedbackRequest).getTime()) / 86400000 : Infinity;\n        // Request feedback after significant usage milestones\n        if (usage.sessionCount >= 10 && daysSinceLastRequest > 7) setTimeout(()=>this.showFeedbackPrompt(), 30000); // After 30 seconds\n    }\n    /**\r\n   * Show feedback prompt\r\n   */ showFeedbackPrompt() {\n        const usage = this.getStoredUsage();\n        if (confirm(`\\u{1F4AA} You've used PowerHouseATX for ${usage.sessionCount} sessions! Would you like to share feedback to help us improve?`)) this.openFeedbackPanel();\n        else this.laterReminder();\n    }\n    /**\r\n   * Later reminder\r\n   */ laterReminder() {\n        const usage = this.getStoredUsage();\n        usage.lastFeedbackRequest = new Date().toISOString();\n        this.storeUsage(usage);\n        this.closeFeedbackPanel();\n    }\n    /**\r\n   * Generate analytics dashboard\r\n   * @returns {Object} - Analytics dashboard data\r\n   */ generateAnalyticsDashboard() {\n        const usage = this.getStoredUsage();\n        const feedback = this.getFeedbackAnalytics();\n        const events = this.getStoredEvents();\n        return {\n            usage: {\n                totalSessions: usage.sessionCount || 0,\n                averageSessionDuration: Math.round((usage.averageSessionDuration || 0) / 1000 / 60),\n                totalTimeSpent: Math.round((usage.totalSessionTime || 0) / 1000 / 60),\n                featuresUsed: usage.featuresUsed?.length || 0,\n                mostUsedFeature: this.getMostUsedFeature(usage.featureCount),\n                lastActive: usage.lastActivity\n            },\n            feedback: {\n                totalFeedback: feedback.totalFeedback,\n                averageRating: Math.round(feedback.averageRating * 10) / 10,\n                categoryBreakdown: feedback.categories,\n                lastFeedback: feedback.lastFeedback\n            },\n            events: {\n                totalEvents: events.length,\n                recentEvents: events.slice(-10),\n                eventTypes: this.getEventTypeBreakdown(events)\n            },\n            insights: this.generateInsights(usage, feedback, events)\n        };\n    }\n    /**\r\n   * Generate insights from analytics\r\n   * @param {Object} usage - Usage data\r\n   * @param {Object} feedback - Feedback data\r\n   * @param {Array} events - Events data\r\n   * @returns {Array} - Insights\r\n   */ generateInsights(usage, feedback, events) {\n        const insights = [];\n        // Usage insights\n        if (usage.sessionCount > 20) insights.push({\n            type: 'milestone',\n            message: `\\u{1F389} Power user! You've completed ${usage.sessionCount} sessions`,\n            action: 'Consider sharing your experience'\n        });\n        if (usage.averageSessionDuration > 1800000) insights.push({\n            type: 'usage',\n            message: \"\\u23F1\\uFE0F Your sessions are comprehensive and detailed\",\n            action: 'Great attention to training detail!'\n        });\n        // Feedback insights\n        if (feedback.averageRating >= 4.5) insights.push({\n            type: 'satisfaction',\n            message: \"\\u2B50 High satisfaction rating - thank you!\",\n            action: 'Your feedback helps us improve'\n        });\n        // Feature usage insights\n        if (usage.featuresUsed?.includes('analytics') || usage.featuresUsed?.includes('intelligence')) insights.push({\n            type: 'advanced',\n            message: \"\\uD83E\\uDDE0 Advanced features user detected\",\n            action: 'Perfect for the next-generation updates!'\n        });\n        return insights;\n    }\n    // Utility methods\n    getStoredUsage() {\n        const stored = localStorage.getItem('usage-analytics');\n        return stored ? JSON.parse(stored) : {};\n    }\n    storeUsage(usage) {\n        localStorage.setItem('usage-analytics', JSON.stringify(usage));\n    }\n    getStoredEvents() {\n        const stored = localStorage.getItem('usage-events');\n        return stored ? JSON.parse(stored) : [];\n    }\n    getSessionId() {\n        if (!this.sessionId) this.sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n        return this.sessionId;\n    }\n    getDeviceType() {\n        const width = window.innerWidth;\n        if (width < 768) return 'Mobile';\n        if (width < 1024) return 'Tablet';\n        return 'Desktop';\n    }\n    getMostUsedFeature(featureCount) {\n        if (!featureCount) return 'None';\n        const features = Object.entries(featureCount);\n        if (features.length === 0) return 'None';\n        return features.reduce((max, current)=>current[1] > max[1] ? current : max)[0];\n    }\n    getEventTypeBreakdown(events) {\n        const breakdown = {};\n        events.forEach((event)=>{\n            breakdown[event.event] = (breakdown[event.event] || 0) + 1;\n        });\n        return breakdown;\n    }\n    generateFeedbackId() {\n        return `fb-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    }\n    resetFeedbackForm() {\n        document.getElementById('feedbackText').value = '';\n        document.getElementById('feedbackCategory').selectedIndex = 0;\n        this.setRating(0);\n    }\n    showFeedbackMessage(message, type = 'info') {\n        const existingMessage = document.querySelector('.feedback-message');\n        if (existingMessage) existingMessage.remove();\n        const messageEl = document.createElement('div');\n        messageEl.className = `feedback-message ${type}`;\n        messageEl.textContent = message;\n        const panel = document.getElementById('feedbackPanel');\n        panel.appendChild(messageEl);\n        setTimeout(()=>messageEl.remove(), 3000);\n    }\n}\n// CSS for feedback widget\nconst feedbackCSS = `\n.feedback-widget {\n  position: fixed;\n  bottom: 20px;\n  right: 20px;\n  z-index: 1000;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n}\n\n.feedback-toggle {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 12px 20px;\n  border-radius: 25px;\n  cursor: pointer;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n  font-weight: 600;\n  font-size: 14px;\n  transition: all 0.3s ease;\n}\n\n.feedback-toggle:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);\n}\n\n.feedback-panel {\n  position: absolute;\n  bottom: 60px;\n  right: 0;\n  width: 400px;\n  max-width: 90vw;\n  background: white;\n  border-radius: 12px;\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);\n  overflow: hidden;\n  animation: slideUp 0.3s ease;\n}\n\n@keyframes slideUp {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.feedback-header {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  color: white;\n  padding: 15px 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.feedback-header h3 {\n  margin: 0;\n  font-size: 16px;\n}\n\n.feedback-header button {\n  background: none;\n  border: none;\n  color: white;\n  font-size: 20px;\n  cursor: pointer;\n  padding: 0;\n  width: 24px;\n  height: 24px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.feedback-content {\n  padding: 20px;\n}\n\n.feedback-category,\n.feedback-rating,\n.feedback-text {\n  margin-bottom: 15px;\n}\n\n.feedback-category label,\n.feedback-rating label,\n.feedback-text label {\n  display: block;\n  margin-bottom: 8px;\n  font-weight: 600;\n  color: #374151;\n  font-size: 14px;\n}\n\n.feedback-category select,\n.feedback-text textarea {\n  width: 100%;\n  padding: 8px 12px;\n  border: 2px solid #e5e7eb;\n  border-radius: 8px;\n  font-size: 14px;\n  transition: border-color 0.2s ease;\n}\n\n.feedback-category select:focus,\n.feedback-text textarea:focus {\n  outline: none;\n  border-color: #667eea;\n}\n\n.feedback-text textarea {\n  height: 80px;\n  resize: vertical;\n}\n\n.rating-stars {\n  display: flex;\n  gap: 5px;\n}\n\n.star {\n  cursor: pointer;\n  font-size: 20px;\n  opacity: 0.3;\n  transition: all 0.2s ease;\n}\n\n.star:hover {\n  opacity: 1;\n  transform: scale(1.1);\n}\n\n.usage-context {\n  background: #f9fafb;\n  border-radius: 8px;\n  padding: 15px;\n  margin: 15px 0;\n}\n\n.usage-context h4 {\n  margin: 0 0 10px 0;\n  font-size: 14px;\n  color: #374151;\n}\n\n.context-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 8px;\n  margin-bottom: 10px;\n}\n\n.context-item {\n  display: flex;\n  justify-content: space-between;\n  font-size: 13px;\n}\n\n.context-label {\n  color: #6b7280;\n}\n\n.context-value {\n  color: #374151;\n  font-weight: 600;\n}\n\n.privacy-note {\n  font-size: 12px;\n  color: #6b7280;\n  text-align: center;\n  margin-top: 10px;\n}\n\n.feedback-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n}\n\n.submit-btn {\n  background: linear-gradient(135deg, #10b981 0%, #059669 100%);\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  flex: 1;\n  transition: all 0.2s ease;\n}\n\n.submit-btn:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);\n}\n\n.later-btn {\n  background: #f3f4f6;\n  color: #6b7280;\n  border: none;\n  padding: 10px 20px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  transition: all 0.2s ease;\n}\n\n.later-btn:hover {\n  background: #e5e7eb;\n}\n\n.feedback-message {\n  position: absolute;\n  bottom: 10px;\n  left: 20px;\n  right: 20px;\n  padding: 10px 15px;\n  border-radius: 8px;\n  font-size: 14px;\n  font-weight: 600;\n  text-align: center;\n}\n\n.feedback-message.success {\n  background: #d1fae5;\n  color: #065f46;\n  border: 1px solid #10b981;\n}\n\n.feedback-message.info {\n  background: #dbeafe;\n  color: #1e40af;\n  border: 1px solid #3b82f6;\n}\n\n.feedback-message.warning {\n  background: #fef3c7;\n  color: #92400e;\n  border: 1px solid #f59e0b;\n}\n\n@media (max-width: 768px) {\n  .feedback-panel {\n    width: 350px;\n  }\n  \n  .context-grid {\n    grid-template-columns: 1fr;\n  }\n}\n`;\n// Inject CSS\nconst style = document.createElement('style');\nstyle.textContent = feedbackCSS;\ndocument.head.appendChild(style);\n// Create singleton instance\nconst userFeedbackManager = new UserFeedbackManager();\n\n},{\"../core/trainingState.js\":\"iohWK\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"5E6aE\":[function(require,module,exports,__globalThis) {\n/**\r\n * Performance Optimization Module\r\n * Provides comprehensive performance monitoring and optimization for the training app\r\n */ /**\r\n * Performance Manager Class\r\n * Handles all performance monitoring, optimization, and reporting\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nparcelHelpers.export(exports, \"PerformanceManager\", ()=>PerformanceManager);\nparcelHelpers.export(exports, \"performanceManager\", ()=>performanceManager);\nclass PerformanceManager {\n    constructor(){\n        this.metrics = {\n            loadTimes: [],\n            renderTimes: [],\n            memoryUsage: [],\n            userInteractions: [],\n            errors: []\n        };\n        this.observers = new Map();\n        this.isMonitoring = false;\n        this.optimizationEnabled = true;\n        this.thresholds = {\n            loadTime: 3000,\n            renderTime: 100,\n            memoryLimit: 50,\n            fpsTarget: 60,\n            interactionDelay: 100 // 100ms\n        };\n    }\n    /**\r\n   * Initialize performance monitoring\r\n   */ initialize() {\n        if (!this.isMonitoring) {\n            this.setupPerformanceObservers();\n            this.setupMemoryMonitoring();\n            this.setupUserInteractionTracking();\n            this.setupErrorTracking();\n            this.optimizeInitialLoad();\n            this.isMonitoring = true;\n            console.log(\"\\uD83D\\uDE80 Performance monitoring initialized\");\n        }\n    }\n    /**\r\n   * Setup performance observers\r\n   */ setupPerformanceObservers() {\n        // Performance Observer for navigation timing\n        if ('PerformanceObserver' in window) {\n            const observer = new PerformanceObserver((list)=>{\n                list.getEntries().forEach((entry)=>{\n                    this.processPerformanceEntry(entry);\n                });\n            });\n            observer.observe({\n                entryTypes: [\n                    'navigation',\n                    'resource',\n                    'measure',\n                    'paint'\n                ]\n            });\n            this.observers.set('performance', observer);\n        }\n        // Intersection Observer for lazy loading optimization\n        if ('IntersectionObserver' in window) {\n            const observer = new IntersectionObserver((entries)=>{\n                entries.forEach((entry)=>{\n                    if (entry.isIntersecting) this.optimizeElementVisibility(entry.target);\n                });\n            }, {\n                rootMargin: '50px'\n            });\n            this.observers.set('intersection', observer);\n            this.setupLazyLoading(observer);\n        }\n        // Mutation Observer for DOM changes\n        if ('MutationObserver' in window) {\n            const observer = new MutationObserver((mutations)=>{\n                this.optimizeDOMChanges(mutations);\n            });\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n                attributes: true,\n                attributeFilter: [\n                    'class',\n                    'style'\n                ]\n            });\n            this.observers.set('mutation', observer);\n        }\n    }\n    /**\r\n   * Process performance entries\r\n   * @param {PerformanceEntry} entry - Performance entry\r\n   */ processPerformanceEntry(entry) {\n        switch(entry.entryType){\n            case 'navigation':\n                this.handleNavigationTiming(entry);\n                break;\n            case 'resource':\n                this.handleResourceTiming(entry);\n                break;\n            case 'measure':\n                this.handleUserTiming(entry);\n                break;\n            case 'paint':\n                this.handlePaintTiming(entry);\n                break;\n        }\n    }\n    /**\r\n   * Handle navigation timing\r\n   * @param {PerformanceNavigationTiming} timing - Navigation timing\r\n   */ handleNavigationTiming(timing) {\n        const metrics = {\n            timestamp: Date.now(),\n            loadTime: timing.loadEventEnd - timing.navigationStart,\n            domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,\n            firstPaint: timing.loadEventEnd - timing.navigationStart,\n            networkTime: timing.responseEnd - timing.requestStart,\n            renderTime: timing.loadEventEnd - timing.responseEnd\n        };\n        this.metrics.loadTimes.push(metrics);\n        // Check for performance issues\n        if (metrics.loadTime > this.thresholds.loadTime) this.reportPerformanceIssue('slow_load', metrics);\n        this.updatePerformanceDashboard(metrics);\n    }\n    /**\r\n   * Handle resource timing\r\n   * @param {PerformanceResourceTiming} timing - Resource timing\r\n   */ handleResourceTiming(timing) {\n        const duration = timing.responseEnd - timing.requestStart;\n        // Identify slow resources\n        if (duration > 1000) {\n            console.warn(`\\u{1F40C} Slow resource: ${timing.name} (${duration}ms)`);\n            this.suggestResourceOptimization(timing);\n        }\n        // Track Chart.js loading specifically\n        if (timing.name.includes('chart.js')) this.optimizeChartLoading(timing);\n    }\n    /**\r\n   * Setup memory monitoring\r\n   */ setupMemoryMonitoring() {\n        if ('memory' in performance) setInterval(()=>{\n            const memory = performance.memory;\n            const usage = {\n                timestamp: Date.now(),\n                used: memory.usedJSHeapSize / 1024 / 1024,\n                total: memory.totalJSHeapSize / 1024 / 1024,\n                limit: memory.jsHeapSizeLimit / 1024 / 1024 // MB\n            };\n            this.metrics.memoryUsage.push(usage);\n            // Check for memory leaks\n            if (usage.used > this.thresholds.memoryLimit) this.handleMemoryPressure(usage);\n            // Keep only last 100 entries\n            if (this.metrics.memoryUsage.length > 100) this.metrics.memoryUsage.shift();\n        }, 10000); // Every 10 seconds\n    }\n    /**\r\n   * Setup user interaction tracking\r\n   */ setupUserInteractionTracking() {\n        const interactionEvents = [\n            'click',\n            'keydown',\n            'touchstart'\n        ];\n        interactionEvents.forEach((eventType)=>{\n            document.addEventListener(eventType, (event)=>{\n                const start = performance.now();\n                // Use requestAnimationFrame to measure interaction delay\n                requestAnimationFrame(()=>{\n                    const delay = performance.now() - start;\n                    this.metrics.userInteractions.push({\n                        timestamp: Date.now(),\n                        type: eventType,\n                        target: event.target.tagName,\n                        delay\n                    });\n                    if (delay > this.thresholds.interactionDelay) this.reportInteractionDelay(event, delay);\n                });\n            }, {\n                passive: true\n            });\n        });\n    }\n    /**\r\n   * Setup error tracking\r\n   */ setupErrorTracking() {\n        window.addEventListener('error', (event)=>{\n            this.metrics.errors.push({\n                timestamp: Date.now(),\n                message: event.message,\n                filename: event.filename,\n                line: event.lineno,\n                column: event.colno,\n                stack: event.error?.stack\n            });\n        });\n        window.addEventListener('unhandledrejection', (event)=>{\n            this.metrics.errors.push({\n                timestamp: Date.now(),\n                type: 'promise_rejection',\n                reason: event.reason\n            });\n        });\n    }\n    /**\r\n   * Optimize initial load\r\n   */ optimizeInitialLoad() {\n        // Defer non-critical scripts\n        this.deferNonCriticalScripts();\n        // Preload critical resources\n        this.preloadCriticalResources();\n        // Optimize images\n        this.optimizeImages();\n        // Setup service worker\n        this.setupServiceWorker();\n    }\n    /**\r\n   * Defer non-critical scripts\r\n   */ deferNonCriticalScripts() {\n        const scripts = document.querySelectorAll('script[src]');\n        scripts.forEach((script)=>{\n            const src = script.src;\n            // Defer analytics and non-critical scripts\n            if (src.includes('analytics') || src.includes('feedback') || src.includes('chart.js')) script.defer = true;\n        });\n    }\n    /**\r\n   * Preload critical resources\r\n   */ preloadCriticalResources() {\n        const criticalResources = [\n            '/js/core/trainingState.js',\n            '/js/algorithms/volume.js',\n            '/js/ui/globals.js',\n            '/css/enhancedAdvanced.css'\n        ];\n        criticalResources.forEach((resource)=>{\n            const link = document.createElement('link');\n            link.rel = 'preload';\n            link.href = resource;\n            link.as = resource.endsWith('.js') ? 'script' : 'style';\n            document.head.appendChild(link);\n        });\n    }\n    /**\r\n   * Setup lazy loading\r\n   * @param {IntersectionObserver} observer - Intersection observer\r\n   */ setupLazyLoading(observer) {\n        // Lazy load sections\n        document.querySelectorAll('.section-content').forEach((section)=>{\n            observer.observe(section);\n        });\n        // Lazy load calculator cards\n        document.querySelectorAll('.calculator').forEach((card)=>{\n            observer.observe(card);\n        });\n    }\n    /**\r\n   * Optimize element visibility\r\n   * @param {Element} element - Element becoming visible\r\n   */ optimizeElementVisibility(element) {\n        // Initialize complex calculations only when needed\n        if (element.classList.contains('calculator')) this.initializeCalculatorFeatures(element);\n        // Load charts only when section is visible\n        if (element.id === 'advanced-content') this.loadAdvancedFeatures();\n    }\n    /**\r\n   * Initialize calculator features\r\n   * @param {Element} calculator - Calculator element\r\n   */ initializeCalculatorFeatures(calculator) {\n        const calculatorId = calculator.id;\n        // Load features on demand\n        switch(calculatorId){\n            case 'analyticsCard':\n                this.loadAnalyticsFeatures();\n                break;\n            case 'liveMonitorCard':\n                this.loadLiveMonitorFeatures();\n                break;\n            case 'trainingIntelligenceCard':\n                this.loadIntelligenceFeatures();\n                break;\n        }\n    }\n    /**\r\n   * Load analytics features\r\n   */ loadAnalyticsFeatures() {\n        if (!window.optimizeVolumeLandmarks) require(\"864404735f7854f3\").then((module)=>{\n            console.log(\"\\uD83D\\uDCCA Analytics features loaded\");\n        });\n    }\n    /**\r\n   * Load live monitor features\r\n   */ loadLiveMonitorFeatures() {\n        if (!window.liveMonitor) require(\"6a4f4548e66827a3\").then((module)=>{\n            console.log(\"\\u26A1 Live monitor features loaded\");\n        });\n    }\n    /**\r\n   * Load intelligence features\r\n   */ loadIntelligenceFeatures() {\n        if (!window.advancedIntelligence) require(\"e666532c0399e35a\").then((module)=>{\n            console.log(\"\\uD83E\\uDDE0 Intelligence features loaded\");\n        });\n    }\n    /**\r\n   * Load advanced features\r\n   */ loadAdvancedFeatures() {\n        // Load Chart.js only when advanced section is opened\n        if (!window.Chart && !document.querySelector('script[src*=\"chart.js\"]')) {\n            const script = document.createElement('script');\n            script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\n            script.onload = ()=>{\n                console.log(\"\\uD83D\\uDCC8 Chart.js loaded on demand\");\n                this.initializeCharts();\n            };\n            document.head.appendChild(script);\n        }\n    }\n    /**\r\n   * Optimize DOM changes\r\n   * @param {MutationRecord[]} mutations - DOM mutations\r\n   */ optimizeDOMChanges(mutations) {\n        let hasStyleChanges = false;\n        let hasContentChanges = false;\n        mutations.forEach((mutation)=>{\n            if (mutation.type === 'attributes' && (mutation.attributeName === 'style' || mutation.attributeName === 'class')) hasStyleChanges = true;\n            else if (mutation.type === 'childList') hasContentChanges = true;\n        });\n        // Batch style changes\n        if (hasStyleChanges) this.batchStyleUpdates();\n        // Optimize content changes\n        if (hasContentChanges) this.optimizeContentUpdates();\n    }\n    /**\r\n   * Batch style updates\r\n   */ batchStyleUpdates() {\n        // Use requestAnimationFrame to batch style changes\n        if (!this.styleUpdateScheduled) {\n            this.styleUpdateScheduled = true;\n            requestAnimationFrame(()=>{\n                // Apply any pending style optimizations\n                this.applyStyleOptimizations();\n                this.styleUpdateScheduled = false;\n            });\n        }\n    }\n    /**\r\n   * Handle memory pressure\r\n   * @param {Object} usage - Memory usage data\r\n   */ handleMemoryPressure(usage) {\n        console.warn(\"\\uD83D\\uDEA8 High memory usage detected:\", usage);\n        // Clear old data\n        this.clearOldMetrics();\n        // Garbage collect if possible\n        if (window.gc) window.gc();\n        // Notify user if memory is critical\n        if (usage.used > this.thresholds.memoryLimit * 1.5) this.showMemoryWarning();\n    }\n    /**\r\n   * Report performance issue\r\n   * @param {string} type - Issue type\r\n   * @param {Object} data - Issue data\r\n   */ reportPerformanceIssue(type, data) {\n        console.warn(`\\u{26A0}\\u{FE0F} Performance issue detected: ${type}`, data);\n        // Store for analytics\n        const issue = {\n            type,\n            timestamp: Date.now(),\n            data,\n            userAgent: navigator.userAgent,\n            url: window.location.href\n        };\n        const issues = JSON.parse(localStorage.getItem('performance-issues') || '[]');\n        issues.push(issue);\n        // Keep only last 50 issues\n        if (issues.length > 50) issues.splice(0, issues.length - 50);\n        localStorage.setItem('performance-issues', JSON.stringify(issues));\n    }\n    /**\r\n   * Generate performance report\r\n   * @returns {Object} - Performance report\r\n   */ generatePerformanceReport() {\n        const currentTime = Date.now();\n        const lastHour = currentTime - 3600000;\n        // Filter recent metrics\n        const recentLoadTimes = this.metrics.loadTimes.filter((m)=>m.timestamp > lastHour);\n        const recentMemory = this.metrics.memoryUsage.filter((m)=>m.timestamp > lastHour);\n        const recentInteractions = this.metrics.userInteractions.filter((m)=>m.timestamp > lastHour);\n        const recentErrors = this.metrics.errors.filter((m)=>m.timestamp > lastHour);\n        return {\n            timestamp: currentTime,\n            performance: {\n                averageLoadTime: this.calculateAverage(recentLoadTimes, 'loadTime'),\n                averageRenderTime: this.calculateAverage(recentLoadTimes, 'renderTime'),\n                slowestLoad: Math.max(...recentLoadTimes.map((m)=>m.loadTime), 0),\n                loadTimeP95: this.calculatePercentile(recentLoadTimes.map((m)=>m.loadTime), 95)\n            },\n            memory: {\n                currentUsage: recentMemory[recentMemory.length - 1]?.used || 0,\n                peakUsage: Math.max(...recentMemory.map((m)=>m.used), 0),\n                averageUsage: this.calculateAverage(recentMemory, 'used')\n            },\n            interactions: {\n                totalInteractions: recentInteractions.length,\n                averageDelay: this.calculateAverage(recentInteractions, 'delay'),\n                slowInteractions: recentInteractions.filter((i)=>i.delay > this.thresholds.interactionDelay).length\n            },\n            errors: {\n                totalErrors: recentErrors.length,\n                errorTypes: this.categorizeErrors(recentErrors)\n            },\n            recommendations: this.generateRecommendations()\n        };\n    }\n    /**\r\n   * Generate performance recommendations\r\n   * @returns {Array} - Performance recommendations\r\n   */ generateRecommendations() {\n        const recommendations = [];\n        const report = this.metrics;\n        // Load time recommendations\n        const avgLoadTime = this.calculateAverage(report.loadTimes, 'loadTime');\n        if (avgLoadTime > this.thresholds.loadTime) recommendations.push({\n            type: 'load_time',\n            priority: 'high',\n            message: 'Page load time is above optimal threshold',\n            suggestion: 'Consider enabling service worker caching and optimizing resource loading'\n        });\n        // Memory recommendations\n        const currentMemory = report.memoryUsage[report.memoryUsage.length - 1];\n        if (currentMemory && currentMemory.used > this.thresholds.memoryLimit * 0.8) recommendations.push({\n            type: 'memory',\n            priority: 'medium',\n            message: 'Memory usage is approaching limits',\n            suggestion: 'Clear old data and optimize data structures'\n        });\n        // Interaction recommendations\n        const slowInteractions = report.userInteractions.filter((i)=>i.delay > this.thresholds.interactionDelay);\n        if (slowInteractions.length > 5) recommendations.push({\n            type: 'interactions',\n            priority: 'medium',\n            message: 'Multiple slow user interactions detected',\n            suggestion: 'Optimize event handlers and consider debouncing'\n        });\n        return recommendations;\n    }\n    /**\r\n   * Optimize images\r\n   */ optimizeImages() {\n        const images = document.querySelectorAll('img');\n        images.forEach((img)=>{\n            // Add loading=\"lazy\" for non-critical images\n            if (!img.hasAttribute('loading')) img.loading = 'lazy';\n            // Add proper sizing attributes\n            if (!img.hasAttribute('width') || !img.hasAttribute('height')) {\n                img.style.width = 'auto';\n                img.style.height = 'auto';\n            }\n        });\n    }\n    setupServiceWorker() {\n        if ('serviceWorker' in navigator) navigator.serviceWorker.register(require(\"9913b1cce8578079\")).then((registration)=>{\n            console.log(\"\\u2705 Service Worker registered\");\n        }).catch((error)=>{\n            console.warn(\"\\u274C Service Worker registration failed:\", error);\n        });\n    }\n    // Utility methods\n    calculateAverage(array, property) {\n        if (array.length === 0) return 0;\n        const sum = array.reduce((acc, item)=>acc + (item[property] || 0), 0);\n        return sum / array.length;\n    }\n    calculatePercentile(array, percentile) {\n        if (array.length === 0) return 0;\n        const sorted = array.sort((a, b)=>a - b);\n        const index = Math.ceil(percentile / 100 * sorted.length) - 1;\n        return sorted[index] || 0;\n    }\n    categorizeErrors(errors) {\n        const categories = {};\n        errors.forEach((error)=>{\n            const type = error.type || 'runtime';\n            categories[type] = (categories[type] || 0) + 1;\n        });\n        return categories;\n    }\n    clearOldMetrics() {\n        const oneHourAgo = Date.now() - 3600000;\n        this.metrics.loadTimes = this.metrics.loadTimes.filter((m)=>m.timestamp > oneHourAgo);\n        this.metrics.userInteractions = this.metrics.userInteractions.filter((m)=>m.timestamp > oneHourAgo);\n        this.metrics.errors = this.metrics.errors.filter((m)=>m.timestamp > oneHourAgo);\n    }\n    showMemoryWarning() {\n        if (!document.querySelector('.memory-warning')) {\n            const warning = document.createElement('div');\n            warning.className = 'memory-warning';\n            warning.innerHTML = `\n        <div style=\"background: #fef3c7; color: #92400e; padding: 10px; border-radius: 8px; margin: 10px; border: 1px solid #f59e0b;\">\n          \\u{26A0}\\u{FE0F} High memory usage detected. Consider refreshing the page for optimal performance.\n          <button onclick=\"location.reload()\" style=\"margin-left: 10px; padding: 5px 10px; background: #f59e0b; color: white; border: none; border-radius: 4px; cursor: pointer;\">Refresh</button>\n        </div>\n      `;\n            document.body.appendChild(warning);\n            setTimeout(()=>warning.remove(), 10000);\n        }\n    }\n    applyStyleOptimizations() {\n    // Consolidate similar style changes\n    // Remove unused CSS classes\n    // Optimize animation performance\n    }\n    optimizeContentUpdates() {\n    // Batch DOM updates\n    // Minimize reflows and repaints\n    }\n    initializeCharts() {\n        // Initialize charts with performance optimization\n        if (window.Chart) {\n            Chart.defaults.animation.duration = 300; // Faster animations\n            Chart.defaults.responsive = true;\n            Chart.defaults.maintainAspectRatio = false;\n        }\n    }\n    suggestResourceOptimization(timing) {\n        console.log(`\\u{1F4A1} Optimization suggestion for ${timing.name}:`, {\n            duration: timing.responseEnd - timing.requestStart,\n            suggestion: 'Consider caching or CDN optimization'\n        });\n    }\n    optimizeChartLoading(timing) {\n        console.log(\"\\uD83D\\uDCC8 Optimizing Chart.js loading based on timing:\", timing);\n    }\n    reportInteractionDelay(event, delay) {\n        console.warn(`\\u{1F40C} Slow interaction detected:`, {\n            type: event.type,\n            target: event.target,\n            delay: `${delay}ms`\n        });\n    }\n    updatePerformanceDashboard(metrics) {\n        // Update performance indicators in UI\n        const perfIndicator = document.getElementById('performance-indicator');\n        if (perfIndicator) {\n            const status = metrics.loadTime < this.thresholds.loadTime ? \"\\uD83D\\uDFE2\" : \"\\uD83D\\uDFE1\";\n            perfIndicator.textContent = status;\n        }\n    }\n}\n// Create singleton instance\nconst performanceManager = new PerformanceManager();\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', ()=>{\n    performanceManager.initialize();\n});\nelse performanceManager.initialize();\n\n},{\"864404735f7854f3\":\"eJGy5\",\"6a4f4548e66827a3\":\"ebfAS\",\"e666532c0399e35a\":\"dwVvp\",\"9913b1cce8578079\":\"4V7Og\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"91HVb\"}],\"eJGy5\":[function(require,module,exports,__globalThis) {\nmodule.exports = Promise.resolve(module.bundle.root(\"5eA0i\"));\n\n},{}],\"ebfAS\":[function(require,module,exports,__globalThis) {\nmodule.exports = Promise.resolve(module.bundle.root(\"6qXhO\"));\n\n},{}],\"dwVvp\":[function(require,module,exports,__globalThis) {\nmodule.exports = Promise.resolve(module.bundle.root(\"bDUtg\"));\n\n},{}],\"4V7Og\":[function(require,module,exports,__globalThis) {\nmodule.exports = import.meta.resolve(\"4ujR8\");\n\n},{}]},[\"lEf4n\"], \"lEf4n\", \"parcelRequire66c8\", {})\n\n//# sourceMappingURL=ProgramDesignWorkspace.99e626fb.js.map\n","/*  Maps module functions onto window so legacy inline onclick=\"\" handlers keep working */\r\n\r\nimport { \r\n  initChart, \r\n  updateChart, \r\n  addVolumeLandmarks, \r\n  resetChart, \r\n  exportChartImage \r\n} from './chartManager.js';\r\n\r\nimport { \r\n  scoreStimulus, \r\n  setProgressionAlgorithm, \r\n  getVolumeProgression,\r\n  analyzeDeloadNeed,\r\n  autoSetIncrement,\r\n  processWeeklyVolumeProgression\r\n} from '../algorithms/volume.js';\r\n\r\nimport { \r\n  calculateTargetRIR, \r\n  validateEffortLevel,\r\n  getScheduledRIR,\r\n  processWeeklyLoadAdjustments,\r\n  getLoadProgression,\r\n  simulateWeeklyRIRFeedback\r\n} from '../algorithms/effort.js';\r\n\r\nimport { \r\n  analyzeFrequency, \r\n  calculateOptimalFrequency,\r\n  isHighFatigue\r\n} from '../algorithms/fatigue.js';\r\n\r\nimport { \r\n  validateLoad, \r\n  validateSets, \r\n  validateMesocycleLength \r\n} from '../algorithms/validation.js';\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/* ----- expose key objects ----- */\r\nwindow.trainingState = trainingState;\r\n\r\n/* ----- expose chart functions ----- */\r\nwindow.updateChart = updateChart;\r\nwindow.resetWeeklyData = resetChart;\r\nwindow.showVolumeLandmarks = addVolumeLandmarks;\r\nwindow.exportSummary = exportChartImage;\r\n\r\n/* ----- expose section toggle (enhanced with display:none) ----- */\r\nwindow.toggleSection = function(sectionId) {\r\n  const content = document.getElementById(sectionId + '-content');\r\n  const banner = content.previousElementSibling;\r\n  const icon = banner.querySelector('.expand-icon');\r\n\r\n  const opening = !content.classList.contains('expanded');\r\n\r\n  // ------- EXPAND -------\r\n  if (opening) {\r\n    content.style.display = 'block';           // back in flow\r\n    // allow next paint, then add class so CSS transition plays\r\n    requestAnimationFrame(() => {\r\n      content.classList.add('expanded');\r\n      banner.classList.add('expanded');\r\n      // Update icon rotation\r\n      if (icon) {\r\n        icon.style.transform = 'rotate(180deg)';\r\n      }\r\n      postHeight();                            // send new tall height\r\n    });\r\n  }\r\n\r\n  // ------- COLLAPSE -------\r\n  else {\r\n    content.classList.remove('expanded');      // start transition\r\n    banner.classList.remove('expanded');\r\n    // Update icon rotation\r\n    if (icon) {\r\n      icon.style.transform = 'rotate(0deg)';\r\n    }\r\n\r\n    // when transition ends hide element to drop layout height\r\n    content.addEventListener('transitionend', function handler() {\r\n      content.style.display = 'none';\r\n      content.removeEventListener('transitionend', handler);\r\n      postHeight();                            // send shorter height\r\n    });\r\n  }\r\n\r\n  // helper sends current height to parent iframe\r\n  function postHeight() {\r\n    if (!window.parent) return;\r\n    const h = document.documentElement.getBoundingClientRect().height;\r\n    window.parent.postMessage({ phxHeight: h }, '*');\r\n  }\r\n};\r\n\r\n/* ----- expose RP algorithm functions ----- */\r\nwindow.scoreStimulus = scoreStimulus;\r\nwindow.setProgressionAlgorithm = setProgressionAlgorithm;\r\nwindow.getVolumeProgression = getVolumeProgression;\r\nwindow.analyzeDeloadNeed = analyzeDeloadNeed;\r\nwindow.autoSetIncrement = autoSetIncrement;\r\nwindow.processWeeklyVolumeProgression = processWeeklyVolumeProgression;\r\nwindow.calculateTargetRIR = calculateTargetRIR;\r\nwindow.validateEffortLevel = validateEffortLevel;\r\nwindow.getScheduledRIR = getScheduledRIR;\r\nwindow.processWeeklyLoadAdjustments = processWeeklyLoadAdjustments;\r\nwindow.getLoadProgression = getLoadProgression;\r\nwindow.simulateWeeklyRIRFeedback = simulateWeeklyRIRFeedback;\r\nwindow.analyzeFrequency = analyzeFrequency;\r\nwindow.calculateOptimalFrequency = calculateOptimalFrequency;\r\nwindow.isHighFatigue = isHighFatigue;\r\nwindow.validateLoad = validateLoad;\r\nwindow.validateSets = validateSets;\r\nwindow.validateMesocycleLength = validateMesocycleLength;\r\n\r\n/* ----- expose advanced intelligence functions ----- */\r\nimport { \r\n  optimizeVolumeLandmarks, \r\n  predictDeloadTiming, \r\n  adaptiveRIRRecommendations, \r\n  detectTrainingPlateaus \r\n} from '../algorithms/analytics.js';\r\n\r\nimport { \r\n  selectOptimalExercises, \r\n  generateWeeklyProgram as generateProgram \r\n} from '../algorithms/exerciseSelection.js';\r\n\r\nimport { liveMonitor } from '../algorithms/livePerformance.js';\r\nimport { advancedIntelligence } from '../algorithms/intelligenceHub.js';\r\n\r\n/* ----- expose next-generation features ----- */\r\nimport { dataVisualizer } from '../algorithms/dataVisualization.js';\r\nimport { wellnessSystem } from '../algorithms/wellnessIntegration.js';\r\nimport { periodizationSystem } from '../algorithms/periodizationSystem.js';\r\n\r\n/* ----- expose new utility features ----- */\r\nimport { dataExportManager } from '../utils/dataExport.js';\r\nimport { userFeedbackManager } from '../utils/userFeedback.js';\r\nimport { performanceManager } from '../utils/performance.js';\r\n\r\nwindow.optimizeVolumeLandmarks = optimizeVolumeLandmarks;\r\nwindow.predictDeloadTiming = predictDeloadTiming;\r\nwindow.adaptiveRIRRecommendations = adaptiveRIRRecommendations;\r\nwindow.detectTrainingPlateaus = detectTrainingPlateaus;\r\nwindow.selectOptimalExercises = selectOptimalExercises;\r\nwindow.generateWeeklyProgram = generateProgram;\r\nwindow.dataVisualizer = dataVisualizer;\r\nwindow.wellnessSystem = wellnessSystem;\r\nwindow.periodizationSystem = periodizationSystem;\r\nwindow.liveMonitor = liveMonitor;\r\nwindow.advancedIntelligence = advancedIntelligence;\r\n\r\n/* ----- expose new utility systems ----- */\r\nwindow.dataExportManager = dataExportManager;\r\nwindow.userFeedbackManager = userFeedbackManager;\r\nwindow.performanceManager = performanceManager;\r\n\r\n/* ----- main UI handlers for buttons ----- */\r\nwindow.submitFeedback = function() {\r\n  const muscle = document.getElementById('muscleSelect').value;\r\n  const mmc = parseInt(document.getElementById('mmc').value, 10);\r\n  const pump = parseInt(document.getElementById('pump').value, 10);\r\n  const disruption = parseInt(document.getElementById('dis').value, 10);\r\n  const soreness = parseInt(document.getElementById('sore').value, 10);\r\n  const actualRIR = document.getElementById('actualRIR').value;\r\n  \r\n  const perfRadio = document.querySelector('input[name=\"perf\"]:checked');\r\n  const performance = perfRadio ? parseInt(perfRadio.value, 10) : 2;\r\n  \r\n  // Validate inputs\r\n  if (!muscle || isNaN(mmc) || isNaN(pump) || isNaN(disruption)) {\r\n    alert('Please fill in all required fields');\r\n    return;\r\n  }\r\n  \r\n  // Process with RP algorithms\r\n  const stimulusResult = scoreStimulus({ mmc, pump, disruption });\r\n  const progressionResult = setProgressionAlgorithm(soreness, performance);\r\n  \r\n  const volumeProgression = getVolumeProgression(muscle, {\r\n    stimulus: { mmc, pump, disruption },\r\n    soreness,\r\n    performance,\r\n    hasIllness: false\r\n  });\r\n  \r\n  // Validate RIR if provided\r\n  let rirValidation = null;\r\n  if (actualRIR) {\r\n    rirValidation = validateEffortLevel(parseFloat(actualRIR));\r\n  }\r\n  \r\n  // Apply changes\r\n  if (progressionResult.setChange !== -99) {\r\n    trainingState.addSets(muscle, progressionResult.setChange);\r\n  }\r\n  \r\n  // Display results\r\n  const output = document.getElementById('mevOut');\r\n  let html = `\r\n    <div class=\"feedback-results\">\r\n      <div class=\"main-recommendation\">\r\n        <h4>${muscle} Recommendation</h4>\r\n        <p class=\"advice\">${volumeProgression.advice}</p>\r\n        <p class=\"sets-info\">\r\n          ${volumeProgression.currentSets} → ${volumeProgression.projectedSets} sets\r\n          ${volumeProgression.setChange !== 0 ? `(${volumeProgression.setChange > 0 ? '+' : ''}${volumeProgression.setChange})` : ''}\r\n        </p>\r\n      </div>\r\n      \r\n      <div class=\"algorithm-details\">\r\n        <div>\r\n          <strong>Stimulus:</strong> ${stimulusResult.score}/9 \r\n          <span class=\"stimulus-${stimulusResult.action}\">(${stimulusResult.action.replace('_', ' ')})</span>\r\n        </div>\r\n        <div>\r\n          <strong>Volume Status:</strong> ${volumeProgression.volumeStatus}\r\n        </div>\r\n        <div>\r\n          <strong>RP Progression:</strong> ${progressionResult.advice}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  \r\n  if (rirValidation) {\r\n    html += `\r\n      <div class=\"rir-feedback ${rirValidation.urgency}\">\r\n        <strong>RIR Check:</strong> ${rirValidation.feedback}<br>\r\n        <em>${rirValidation.recommendation}</em>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  if (volumeProgression.deloadRecommended) {\r\n    html += `\r\n      <div class=\"deload-warning\">\r\n        ⚠️ <strong>Deload Recommended</strong>\r\n      </div>\r\n    `;\r\n  }\r\n  \r\n  output.innerHTML = html;\r\n  output.className = 'result success active';\r\n  \r\n  updateChart();\r\n};\r\n\r\nwindow.analyzeDeload = function() {\r\n  const halfMuscles = document.getElementById('halfMuscles').checked;\r\n  const mrvBreach = document.getElementById('mrvBreach').checked;\r\n  const illness = document.getElementById('illness').checked;\r\n  const lowMotivation = document.getElementById('lowMotivation').checked;\r\n  \r\n  const analysis = analyzeDeloadNeed();\r\n  \r\n  // Override with manual inputs\r\n  if (halfMuscles) analysis.reasons.push('Most muscles need recovery (manual check)');\r\n  if (mrvBreach) analysis.reasons.push('Hit MRV twice consecutively (manual check)');\r\n  if (illness) analysis.reasons.push('Illness/injury present');\r\n  if (lowMotivation) analysis.reasons.push('Low motivation levels');\r\n  \r\n  const shouldDeload = analysis.shouldDeload || halfMuscles || mrvBreach || illness || lowMotivation;\r\n  \r\n  const output = document.getElementById('deloadOut');\r\n  \r\n  if (shouldDeload) {\r\n    output.innerHTML = `\r\n      <strong>Deload Recommended</strong><br>\r\n      Reasons: ${analysis.reasons.join(', ')}<br>\r\n      <em>Take 1 week at 50% volume + 25-50% load reduction</em>\r\n    `;\r\n    output.className = 'result warning active';\r\n    \r\n    // Offer to start deload\r\n    setTimeout(() => {\r\n      if (confirm('Start deload phase now? This will reduce all muscle volumes to 50% of MEV.')) {\r\n        trainingState.startDeload();\r\n        updateChart();\r\n      }\r\n    }, 1000);\r\n  } else {\r\n    output.innerHTML = 'No deload needed - continue current program';\r\n    output.className = 'result success active';\r\n  }\r\n};\r\n\r\nwindow.analyzeFrequency = function() {\r\n  const soreDays = parseInt(document.getElementById('soreDays').value, 10);\r\n  const sessionGap = parseInt(document.getElementById('sessionGap').value, 10);\r\n  const trainingAge = document.getElementById('trainingAge').value;\r\n  const muscle = document.getElementById('muscleSelect').value;\r\n  \r\n  const analysis = analyzeFrequency(soreDays, sessionGap, muscle);\r\n  const optimal = calculateOptimalFrequency(muscle, {\r\n    trainingAge,\r\n    currentVolume: trainingState.currentWeekSets[muscle]\r\n  });\r\n  \r\n  const output = document.getElementById('freqOut');\r\n  output.innerHTML = `\r\n    <strong>${analysis.recommendation}</strong><br>\r\n    Current: ${sessionGap} days between sessions<br>\r\n    Recovery: ${soreDays} days<br>\r\n    Optimal frequency: ${optimal.recommendedFrequency}x/week (${optimal.setsPerSession} sets/session)\r\n  `;\r\n  \r\n  const type = analysis.urgency === 'high' ? 'warning' : \r\n               analysis.urgency === 'medium' ? 'warning' : 'success';\r\n  output.className = `result ${type} active`;\r\n};\r\n\r\nwindow.saveLandmarks = function() {\r\n  const muscle = document.getElementById('landmarkMuscle').value;\r\n  const mv = parseInt(document.getElementById('mv').value, 10);\r\n  const mev = parseInt(document.getElementById('mev').value, 10);\r\n  const mav = parseInt(document.getElementById('mav').value, 10);\r\n  const mrv = parseInt(document.getElementById('mrv').value, 10);\r\n  \r\n  // Validate relationships\r\n  if (mv > mev || mev > mav || mav > mrv) {\r\n    alert('Invalid landmark relationship (MV ≤ MEV ≤ MAV ≤ MRV)');\r\n    return;\r\n  }\r\n  \r\n  trainingState.updateVolumeLandmarks(muscle, { MV: mv, MEV: mev, MAV: mav, MRV: mrv });\r\n  updateChart();\r\n  \r\n  const output = document.getElementById('volumeOut');\r\n  output.innerHTML = `Landmarks saved for ${muscle}: MV:${mv}, MEV:${mev}, MAV:${mav}, MRV:${mrv}`;\r\n  output.className = 'result success active';\r\n};\r\n\r\nwindow.applyVolumePreset = function(level) {\r\n  const muscle = document.getElementById('landmarkMuscle').value;\r\n  const multipliers = {\r\n    beginner: 0.8,\r\n    intermediate: 1.0,\r\n    advanced: 1.2\r\n  };\r\n  \r\n  const mult = multipliers[level];\r\n  const baseLandmarks = trainingState.volumeLandmarks[muscle];\r\n  \r\n  document.getElementById('mv').value = Math.round(baseLandmarks.MV * mult);\r\n  document.getElementById('mev').value = Math.round(baseLandmarks.MEV * mult);\r\n  document.getElementById('mav').value = Math.round(baseLandmarks.MAV * mult);\r\n  document.getElementById('mrv').value = Math.round(baseLandmarks.MRV * mult);\r\n};\r\n\r\nwindow.setupMeso = function() {\r\n  const length = parseInt(document.getElementById('mesoLength').value, 10);\r\n  const week = parseInt(document.getElementById('currentWeekNum').value, 10);\r\n  const goal = document.getElementById('trainingGoal').value;\r\n  \r\n  const validation = validateMesocycleLength(length, goal);\r\n  \r\n  if (!validation.isValid) {\r\n    alert(validation.warning);\r\n    return;\r\n  }\r\n  \r\n  trainingState.mesoLen = length;\r\n  trainingState.weekNo = week;\r\n  trainingState.saveState();\r\n  \r\n  const output = document.getElementById('mesoOut');\r\n  output.innerHTML = `\r\n    Mesocycle configured: ${length} weeks for ${goal}<br>\r\n    Currently week ${week} (Target RIR: ${trainingState.getTargetRIR().toFixed(1)})<br>\r\n    ${validation.recommendation}\r\n  `;\r\n  output.className = 'result success active';\r\n};\r\n\r\n/* ----- week progression helpers ----- */\r\nwindow.advanceToNextWeek = function() {\r\n  trainingState.nextWeek();\r\n  updateChart();\r\n  updateAllDisplays();\r\n  \r\n  const summary = trainingState.getStateSummary();\r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut');\r\n  \r\n  output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>📅 Advanced to Week ${summary.week}</h4>\r\n      <div class=\"progression-details\">\r\n        <div>Week: ${summary.week} of ${summary.meso}</div>\r\n        <div>Block: ${summary.block}</div>\r\n        <div>Target RIR: ${summary.targetRIR.toFixed(1)}</div>\r\n        <div>Phase: ${summary.currentPhase}</div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = 'result success active';\r\n  \r\n  console.log('Advanced to next week:', summary);\r\n};\r\n\r\n/* ----- initialization helpers ----- */\r\nwindow.initializeAllMusclesAtMEV = function() {\r\n  const muscles = Object.keys(trainingState.volumeLandmarks);\r\n  \r\n  muscles.forEach(muscle => {\r\n    trainingState.initializeMuscleAtMEV(muscle);\r\n  });\r\n  \r\n  updateChart();\r\n  \r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut');\r\n  output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>🎯 All muscles initialized at MEV</h4>\r\n      <div class=\"progression-details\">\r\n        ${muscles.map(muscle => \r\n          `<div>${muscle}: ${trainingState.volumeLandmarks[muscle].MEV} sets (MEV)</div>`\r\n        ).join('')}\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = 'result success active';\r\n  \r\n  console.log('All muscles initialized at MEV');\r\n};\r\n\r\n/* ----- auto-volume progression demo function ----- */\r\nwindow.runAutoVolumeProgression = function() {\r\n  // Demo: simulate weekly feedback for all muscles\r\n  const weeklyFeedback = {};\r\n  const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    muscles.forEach(muscle => {\r\n    const currentSets = trainingState.getWeeklySets(muscle);\r\n    const landmarks = trainingState.volumeLandmarks[muscle];\r\n    const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n    \r\n    // Generate adaptive feedback based on volume status\r\n    let stimulus, soreness, perf;\r\n    \r\n    if (volumeStatus === 'under-minimum' || volumeStatus === 'maintenance') {\r\n      // Low volume = good recovery, potentially low stimulus\r\n      stimulus = Math.floor(Math.random() * 4) + 2; // 2-5 (moderate to low)\r\n      soreness = Math.floor(Math.random() * 2);     // 0-1 (low)\r\n      perf = Math.floor(Math.random() * 2) + 1;     // 1-2 (same to better)\r\n    } else if (volumeStatus === 'optimal') {\r\n      // Optimal volume = moderate stimulus, manageable fatigue\r\n      stimulus = Math.floor(Math.random() * 3) + 4; // 4-6 (moderate)\r\n      soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\r\n      perf = Math.floor(Math.random() * 2) + 1;     // 1-2 (same to better)\r\n    } else if (volumeStatus === 'high') {\r\n      // High volume = good stimulus but building fatigue\r\n      stimulus = Math.floor(Math.random() * 3) + 5; // 5-7 (moderate to high)\r\n      soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\r\n      perf = Math.floor(Math.random() * 3);         // 0-2 (worse to better)    } else { // maximum\r\n      // At MRV = high fatigue, may need recovery\r\n      stimulus = Math.floor(Math.random() * 4) + 4; // 4-7 (variable)\r\n      soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\r\n      perf = Math.floor(Math.random() * 2);         // 0-1 (worse to same)\r\n    }\r\n    \r\n    // Generate enhanced fatigue indicators\r\n    let jointAche = 0;\r\n    let perfChange = 0;\r\n    let lastLoad = 100; // Default baseline\r\n    \r\n    // Higher volume status = more likely to have joint issues and performance drops\r\n    if (volumeStatus === 'maximum') {\r\n      jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\r\n      perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\r\n      lastLoad = 95; // Simulate strength drop\r\n    } else if (volumeStatus === 'high') {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.8 ? -1 : (Math.random() > 0.5 ? 0 : 1); // Mixed performance\r\n      lastLoad = 98; // Slight strength drop\r\n    } else {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\r\n      lastLoad = 102; // Strength increase\r\n    }\r\n    \r\n    weeklyFeedback[muscle] = {\r\n      stimulus,\r\n      soreness,\r\n      perf,\r\n      jointAche,\r\n      perfChange,\r\n      lastLoad,\r\n      pump: Math.floor(stimulus / 3), // Derive pump from stimulus\r\n      disruption: Math.floor(stimulus / 3), // Derive disruption from stimulus\r\n      recoverySession: soreness >= 3 || (volumeStatus === 'maximum' && Math.random() < 0.3)\r\n    };\r\n  });\r\n  \r\n  // Process auto-progression\r\n  const result = processWeeklyVolumeProgression(weeklyFeedback, trainingState);\r\n    // Update chart\r\n  updateChart();\r\n  \r\n  // Show notification\r\n  const message = result.deloadTriggered \r\n    ? `🛑 ${result.recommendation} (${result.mrvHits} muscles at MRV)`\r\n    : `📈 Auto-progression complete (+${Object.values(result.progressionLog).reduce((sum, log) => sum + log.increment, 0)} total sets)`;\r\n    \r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\r\n  const progressionDetails = Object.entries(result.progressionLog).map(([muscle, log]) => \r\n    `<div>${muscle}: ${log.previousSets} → ${log.currentSets} sets (${log.reason})</div>`\r\n  ).join('');\r\n    output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>${message}</h4>\r\n      <div class=\"progression-details\">\r\n        ${progressionDetails}\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = result.deloadTriggered ? 'result warning active' : 'result success active';\r\n  \r\n  console.log('Auto-progression result:', result);\r\n};\r\n\r\n/* ----- RIR Schedule & Load Feedback Functions ----- */\r\nwindow.runWeeklyLoadAdjustments = function() {\r\n  const muscles = Object.keys(trainingState.volumeLandmarks);\r\n  const currentWeek = trainingState.weekNo;\r\n  \r\n  // Simulate weekly RIR feedback\r\n  const weeklyRIRFeedback = simulateWeeklyRIRFeedback(muscles, currentWeek);\r\n  \r\n  // Process load adjustments\r\n  const adjustmentResult = processWeeklyLoadAdjustments(weeklyRIRFeedback);\r\n  \r\n  // Update display\r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\r\n  \r\n  const adjustmentDetails = Object.entries(adjustmentResult.adjustments).map(([muscle, adj]) => \r\n    `<div class=\"load-adjustment ${adj.urgency}\">\r\n      <strong>${muscle}:</strong> ${adj.loadAdjustment > 0 ? '+' : ''}${adj.loadAdjustment.toFixed(1)}% \r\n      (${adj.currentRIR.toFixed(1)} vs ${adj.targetRIR.toFixed(1)} RIR)\r\n      <div class=\"adjustment-reason\">${adj.reason}</div>\r\n    </div>`\r\n  ).join('');\r\n  \r\n  output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>⚖️ Weekly Load Adjustments - Week ${adjustmentResult.week}</h4>\r\n      <div class=\"rir-summary\">\r\n        <div>Target RIR: ${adjustmentResult.targetRIR.toFixed(1)}</div>\r\n        <div>Muscles Adjusted: ${adjustmentResult.summary.musclesAdjusted}/${adjustmentResult.summary.totalMuscles}</div>\r\n        <div>Avg Load Change: ${adjustmentResult.summary.avgLoadChange > 0 ? '+' : ''}${adjustmentResult.summary.avgLoadChange.toFixed(1)}%</div>\r\n      </div>\r\n      <div class=\"load-adjustments\">\r\n        ${adjustmentDetails}\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = 'result success active';\r\n  \r\n  console.log('Weekly load adjustments:', adjustmentResult);\r\n};\r\n\r\nwindow.showNextWeekLoadProgression = function() {\r\n  const muscles = Object.keys(trainingState.volumeLandmarks);\r\n  const progressions = [];\r\n  \r\n  muscles.forEach(muscle => {\r\n    // Simulate session history for the muscle\r\n    const sessionHistory = {\r\n      averageRIR: getScheduledRIR(trainingState.weekNo, trainingState.mesoLen) + (Math.random() * 2 - 1)\r\n    };\r\n    \r\n    const progression = getLoadProgression(muscle, sessionHistory);\r\n    progressions.push(progression);\r\n  });\r\n  \r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\r\n  \r\n  const progressionDetails = progressions.map(prog => \r\n    `<div class=\"load-progression\">\r\n      <strong>${prog.muscle}:</strong> ${prog.loadIncrease > 0 ? '+' : ''}${prog.loadIncrease}% \r\n      (${prog.currentRIR.toFixed(1)} → ${prog.nextRIR.toFixed(1)} RIR)\r\n      <div class=\"progression-recommendation\">${prog.recommendation}</div>\r\n    </div>`\r\n  ).join('');\r\n  \r\n  const nextWeek = trainingState.weekNo + 1;\r\n  const nextRIR = getScheduledRIR(nextWeek, trainingState.mesoLen);\r\n  \r\n  output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>📈 Load Progression for Week ${nextWeek}</h4>\r\n      <div class=\"rir-summary\">\r\n        <div>Next Week Target RIR: ${nextRIR.toFixed(1)}</div>\r\n        <div>Total Muscles: ${progressions.length}</div>\r\n        <div>Avg Load Increase: +${(progressions.reduce((sum, p) => sum + p.loadIncrease, 0) / progressions.length).toFixed(1)}%</div>\r\n      </div>\r\n      <div class=\"load-progressions\">\r\n        ${progressionDetails}\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = 'result success active';\r\n  \r\n  console.log('Next week load progressions:', progressions);\r\n};\r\n\r\nwindow.showRIRSchedule = function() {\r\n  const mesoLength = trainingState.mesoLen;\r\n  const currentWeek = trainingState.weekNo;\r\n  \r\n  const schedule = [];\r\n  for (let week = 1; week <= mesoLength; week++) {\r\n    const scheduledRIR = getScheduledRIR(week, mesoLength);\r\n    const isCurrent = week === currentWeek;\r\n    schedule.push({\r\n      week,\r\n      rir: scheduledRIR,\r\n      isCurrent,\r\n      intensity: scheduledRIR >= 2.5 ? 'Low' : \r\n                 scheduledRIR >= 2.0 ? 'Moderate' :\r\n                 scheduledRIR >= 1.0 ? 'High' : 'Maximum'\r\n    });\r\n  }\r\n  \r\n  const output = document.getElementById('autoVolumeOut') || document.getElementById('volumeOut') || document.createElement('div');\r\n  \r\n  const scheduleDisplay = schedule.map(item => \r\n    `<div class=\"rir-week ${item.isCurrent ? 'current-week' : ''}\">\r\n      <strong>Week ${item.week}:</strong> ${item.rir.toFixed(1)} RIR (${item.intensity})\r\n      ${item.isCurrent ? ' ← Current' : ''}\r\n    </div>`\r\n  ).join('');\r\n  \r\n  output.innerHTML = `\r\n    <div class=\"auto-progression-result\">\r\n      <h4>📅 RIR Schedule - ${mesoLength} Week Mesocycle</h4>\r\n      <div class=\"rir-schedule\">\r\n        ${scheduleDisplay}\r\n      </div>\r\n      <div class=\"schedule-notes\">\r\n        <div>• Scheduled progression follows RP guidelines</div>\r\n        <div>• Lower RIR = Higher intensity (closer to failure)</div>\r\n        <div>• Deload after final week</div>\r\n      </div>\r\n    </div>\r\n  `;\r\n  output.className = 'result success active';\r\n  \r\n  console.log('RIR Schedule:', schedule);\r\n};\r\n/* ----- Advanced Intelligence UI Functions ----- */\r\n\r\n// Live Performance Monitoring\r\nlet sessionActive = false;\r\nlet currentSetNumber = 0;\r\n\r\nwindow.startLiveSession = function() {\r\n  const exercise = document.getElementById('liveExercise').value;\r\n  const muscle = document.getElementById('liveMuscle').value;\r\n  const plannedSets = parseInt(document.getElementById('plannedSets').value);\r\n  const targetRIR = trainingState.getTargetRIR();\r\n\r\n  const result = liveMonitor.startSession({\r\n    muscle: muscle,\r\n    exercise: exercise,\r\n    plannedSets: plannedSets,\r\n    targetRIR: targetRIR\r\n  });\r\n\r\n  sessionActive = true;\r\n  currentSetNumber = 0;\r\n\r\n  // Update UI\r\n  document.getElementById('startSessionBtn').style.display = 'none';\r\n  document.getElementById('logSetBtn').style.display = 'inline-block';\r\n  document.getElementById('endSessionBtn').style.display = 'inline-block';\r\n  document.getElementById('liveMonitor').style.display = 'block';\r\n\r\n  const output = document.getElementById('liveMonitorOut');\r\n  output.innerHTML = `<strong>🎮 Live Session Started!</strong><br>${result.message}<br><br>Target RIR: ${targetRIR}<br>Planned Sets: ${plannedSets}`;\r\n  output.className = 'result success active';\r\n};\r\n\r\nwindow.logTrainingSet = function() {\r\n  if (!sessionActive) {\r\n    alert('Please start a session first!');\r\n    return;\r\n  }\r\n\r\n  currentSetNumber++;\r\n\r\n  // Simulate realistic set data (in real app, this would come from user input)\r\n  const setData = {\r\n    weight: 80 + (Math.random() * 10 - 5), // 75-85kg range\r\n    reps: 8 + Math.floor(Math.random() * 3), // 8-10 reps\r\n    rir: 1.5 + (Math.random() * 1), // 1.5-2.5 RIR\r\n    rpe: null,\r\n    techniqueRating: 7 + Math.floor(Math.random() * 3), // 7-9 rating\r\n    notes: `Set ${currentSetNumber} - simulated`\r\n  };\r\n\r\n  const result = liveMonitor.logSet(setData);\r\n  \r\n  // Update live display\r\n  updateLiveDisplay({\r\n    sessionProgress: liveMonitor.getSessionProgress(),\r\n    setInfo: { rir: setData.rir }\r\n  });\r\n\r\n  // Show feedback\r\n  showSetFeedback(result);\r\n};\r\n\r\nwindow.endLiveSession = function() {\r\n  if (!sessionActive) {\r\n    alert('No active session to end!');\r\n    return;\r\n  }\r\n\r\n  const summary = liveMonitor.endSession();\r\n  sessionActive = false;\r\n  currentSetNumber = 0;\r\n\r\n  // Update UI\r\n  document.getElementById('startSessionBtn').style.display = 'inline-block';\r\n  document.getElementById('logSetBtn').style.display = 'none';\r\n  document.getElementById('endSessionBtn').style.display = 'none';\r\n  document.getElementById('liveMonitor').style.display = 'none';\r\n\r\n  showSessionSummary(summary);\r\n};\r\n\r\nfunction updateLiveDisplay(data) {\r\n  if (data.sessionProgress) {\r\n    document.getElementById('currentSet').textContent = data.sessionProgress.completedSets;\r\n    document.getElementById('sessionProgress').textContent = Math.round(data.sessionProgress.progressPercentage) + '%';\r\n    document.getElementById('totalLoad').textContent = data.sessionProgress.totalLoad;\r\n  }\r\n  if (data.setInfo) {\r\n    document.getElementById('currentRIR').textContent = data.setInfo.rir.toFixed(1);\r\n  }\r\n}\r\n\r\nfunction showSetFeedback(data) {\r\n  const output = document.getElementById('liveMonitorOut');\r\n  output.className = `result ${data.feedback.type} active`;\r\n  \r\n  let html = `<strong>Set ${currentSetNumber} Feedback:</strong><br>`;\r\n  html += `${data.feedback.message}<br><br>`;\r\n  \r\n  if (data.nextSetRecommendations.rationale.length > 0) {\r\n    html += `<strong>Next Set Recommendations:</strong><br>`;\r\n    html += `Weight: ${data.nextSetRecommendations.weight}kg<br>`;\r\n    html += `Rest: ${data.nextSetRecommendations.rest}<br>`;\r\n    html += `Strategy: ${data.nextSetRecommendations.strategy}<br>`;\r\n    html += `Rationale: ${data.nextSetRecommendations.rationale.join(', ')}<br>`;\r\n  }\r\n  \r\n  output.innerHTML = html;\r\n}\r\n\r\nfunction showSessionSummary(data) {\r\n  const output = document.getElementById('liveMonitorOut');\r\n  output.className = 'result success active';\r\n  \r\n  let html = `<strong>🎯 Session Complete!</strong><br><br>`;\r\n  html += `<strong>Performance Grade:</strong> ${data.performance.targetAchievement.grade}<br>`;\r\n  html += `<strong>Consistency Rating:</strong> ${data.performance.consistency.rating}<br>`;\r\n  html += `<strong>Total Load:</strong> ${data.progress.totalLoad}<br>`;\r\n  html += `<strong>Duration:</strong> ${data.progress.duration} minutes<br><br>`;\r\n  \r\n  if (data.recommendations.length > 0) {\r\n    html += `<strong>Recommendations:</strong><br>`;\r\n    data.recommendations.forEach(rec => {\r\n      html += `• ${rec.message}<br>`;\r\n    });\r\n  }\r\n  \r\n  output.innerHTML = html;\r\n}\r\n\r\n// Intelligence Hub Functions\r\nwindow.initializeIntelligence = function() {\r\n  const output = document.getElementById('intelligenceOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Initializing Advanced Training Intelligence...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const result = advancedIntelligence.initialize();\r\n    \r\n    let html = '<strong>🧠 Intelligence System Initialized!</strong><br><br>';\r\n    html += `<strong>Analytics:</strong> ${result.analytics ? '✅ Enabled' : '❌ Disabled (need more data)'}<br>`;\r\n    html += `<strong>Exercise Selection:</strong> ${result.exerciseSelection ? '✅ Enabled' : '❌ Disabled'}<br>`;\r\n    html += `<strong>Live Monitoring:</strong> ${result.liveMonitoring ? '✅ Enabled' : '❌ Disabled'}<br><br>`;\r\n    html += `<strong>Status:</strong> ${result.message}`;\r\n    \r\n    // Update status indicators\r\n    document.getElementById('analyticsStatus').textContent = result.analytics ? '✅' : '❌';\r\n    document.getElementById('exerciseStatus').textContent = result.exerciseSelection ? '✅' : '❌';\r\n    document.getElementById('liveStatus').textContent = result.liveMonitoring ? '✅' : '❌';\r\n    document.getElementById('hubStatus').textContent = '✅';\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 1500);\r\n};\r\n\r\nwindow.getWeeklyIntelligence = function() {\r\n  const output = document.getElementById('intelligenceOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Generating weekly intelligence report...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const intelligence = advancedIntelligence.getWeeklyIntelligence();\r\n    \r\n    let html = '<strong>📈 Weekly Intelligence Report</strong><br><br>';\r\n    html += `<strong>Week:</strong> ${intelligence.week}, Block: ${intelligence.block}<br><br>`;\r\n    \r\n    if (intelligence.recommendations.length > 0) {\r\n      html += '<strong>🎯 Recommendations:</strong><br>';\r\n      intelligence.recommendations.forEach(rec => {\r\n        html += `• [${rec.urgency.toUpperCase()}] ${rec.message}<br>`;\r\n      });\r\n      html += '<br>';\r\n    }\r\n    \r\n    if (intelligence.optimizations.length > 0) {\r\n      html += '<strong>🔧 Available Optimizations:</strong><br>';\r\n      intelligence.optimizations.forEach(opt => {\r\n        html += `• ${opt.type}: ${opt.recommendation || opt.muscle}<br>`;\r\n      });\r\n      html += '<br>';\r\n    }\r\n    \r\n    if (intelligence.riskAssessment) {\r\n      html += `<strong>⚠️ Risk Level:</strong> ${intelligence.riskAssessment.riskLevel.toUpperCase()}<br>`;\r\n      html += `<strong>Risk Score:</strong> ${intelligence.riskAssessment.riskScore}/100<br>`;\r\n    }\r\n    \r\n    // Show in intelligence panel\r\n    document.getElementById('intelligencePanel').style.display = 'block';\r\n    document.getElementById('intelligenceContent').innerHTML = `\r\n      <div class=\"recommendation\">\r\n        <strong>📊 Current Assessment</strong><br>\r\n        Week ${intelligence.week} analysis shows ${intelligence.recommendations.length} active recommendations\r\n        and ${intelligence.optimizations.length} optimization opportunities.\r\n      </div>\r\n    `;\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 2000);\r\n};\r\n\r\nwindow.getOptimalExercises = function() {\r\n  const output = document.getElementById('intelligenceOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Analyzing optimal exercises for current training state...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const muscle = 'Chest'; // Example muscle\r\n    const exercises = selectOptimalExercises(muscle, {\r\n      availableEquipment: ['barbell', 'dumbbells', 'cables'],\r\n      trainingGoal: 'hypertrophy',\r\n      experienceLevel: 'intermediate',\r\n      fatigueLevel: 4,\r\n      timeConstraint: 'moderate'\r\n    });\r\n    \r\n    let html = '<strong>💡 Smart Exercise Recommendations</strong><br><br>';\r\n    html += `<strong>For ${muscle}:</strong><br>`;\r\n    \r\n    exercises.slice(0, 3).forEach((exercise, index) => {\r\n      html += `${index + 1}. <strong>${exercise.name}</strong> (Score: ${exercise.score.toFixed(1)})<br>`;\r\n      html += `   Sets: ${exercise.sets}, Reps: ${exercise.repRange[0]}-${exercise.repRange[1]}<br>`;\r\n      html += `   ${exercise.reasoning}<br><br>`;\r\n    });\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 1500);\r\n};\r\n\r\nwindow.assessTrainingRisk = function() {\r\n  const output = document.getElementById('intelligenceOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Assessing training risk factors...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const riskAssessment = advancedIntelligence.assessTrainingRisk();\r\n    \r\n    let html = '<strong>⚠️ Training Risk Assessment</strong><br><br>';\r\n    html += `<strong>Risk Score:</strong> ${riskAssessment.riskScore}/100<br>`;\r\n    html += `<strong>Risk Level:</strong> ${riskAssessment.riskLevel.toUpperCase()}<br><br>`;\r\n    \r\n    if (riskAssessment.riskFactors.length > 0) {\r\n      html += '<strong>Risk Factors:</strong><br>';\r\n      riskAssessment.riskFactors.forEach(factor => {\r\n        html += `• ${factor}<br>`;\r\n      });\r\n      html += '<br>';\r\n    }\r\n    \r\n    if (riskAssessment.recommendations.length > 0) {\r\n      html += '<strong>Recommendations:</strong><br>';\r\n      riskAssessment.recommendations.forEach(rec => {\r\n        html += `• ${rec}<br>`;\r\n      });\r\n    }\r\n    \r\n    const urgency = riskAssessment.riskLevel === 'low' ? 'success' : \r\n                   riskAssessment.riskLevel === 'moderate' ? 'warning' : 'error';\r\n    output.className = `result ${urgency} active`;\r\n    output.innerHTML = html;\r\n  }, 2000);\r\n};\r\n\r\n// Analytics Functions\r\nwindow.optimizeVolumeLandmarks = function() {\r\n  const output = document.getElementById('analyticsOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Analyzing historical data for volume optimization...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    // Mock historical data for demo\r\n    const mockHistoricalData = [\r\n      { sets: 8, avgStimulus: 7, avgFatigue: 2, performanceChange: 1 },\r\n      { sets: 10, avgStimulus: 8, avgFatigue: 3, performanceChange: 1 },\r\n      { sets: 12, avgStimulus: 8, avgFatigue: 4, performanceChange: 0 },\r\n      { sets: 14, avgStimulus: 7, avgFatigue: 6, performanceChange: -1 }\r\n    ];\r\n    \r\n    const optimized = optimizeVolumeLandmarks('Chest', mockHistoricalData);\r\n    \r\n    let html = '<strong>📊 Volume Landmark Optimization Results:</strong><br><br>';\r\n    html += `<strong>Optimized Landmarks for Chest:</strong><br>`;\r\n    html += `MEV: ${optimized.MEV} sets<br>`;\r\n    html += `MAV: ${optimized.MAV} sets<br>`;\r\n    html += `MRV: ${optimized.MRV} sets<br><br>`;\r\n    html += `<strong>Confidence:</strong> ${optimized.confidence}%<br>`;\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 2000);\r\n};\r\n\r\nwindow.predictDeloadTiming = function() {\r\n  const output = document.getElementById('analyticsOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Analyzing fatigue patterns and performance trends...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const mockMetrics = {\r\n      weeklyFatigueScore: [3, 4, 6, 7],\r\n      performanceTrend: [85, 82, 78, 75],\r\n      volumeProgression: [40, 44, 48, 52],\r\n      motivationLevel: 6,\r\n      sleepQuality: 7\r\n    };\r\n    \r\n    const prediction = predictDeloadTiming(mockMetrics);\r\n    \r\n    let html = '<strong>🔮 Deload Prediction Analysis:</strong><br><br>';\r\n    html += `<strong>Weeks Until Deload:</strong> ${prediction.weeksUntilDeload}<br>`;\r\n    html += `<strong>Confidence:</strong> ${prediction.confidence}%<br>`;\r\n    html += `<strong>Primary Indicator:</strong> ${prediction.primaryIndicator}<br>`;\r\n    html += `<strong>Recommended Action:</strong> ${prediction.recommendedAction}<br>`;\r\n    \r\n    const urgency = prediction.weeksUntilDeload <= 2 ? 'warning' : 'success';\r\n    output.className = `result ${urgency} active`;\r\n    output.innerHTML = html;\r\n  }, 2500);\r\n};\r\n\r\nwindow.detectPlateaus = function() {\r\n  const output = document.getElementById('analyticsOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Analyzing training plateaus and stagnation patterns...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const mockTrainingData = {\r\n      weeklyPerformance: [85, 84, 83, 83, 82, 82],\r\n      weeklyVolume: [45, 47, 48, 48, 48, 48],\r\n      weeklyIntensity: [7, 7.5, 8, 8, 8, 8],\r\n      weeklyFatigue: [3, 4, 5, 6, 7, 8]\r\n    };\r\n    \r\n    const plateauAnalysis = detectTrainingPlateaus(mockTrainingData);\r\n    \r\n    let html = '<strong>📈 Plateau Detection Results:</strong><br><br>';\r\n    \r\n    if (plateauAnalysis.plateauDetected) {\r\n      html += `<strong>🚨 Plateau Detected:</strong> ${plateauAnalysis.plateauType}<br>`;\r\n      html += `<strong>Urgency Level:</strong> ${plateauAnalysis.urgency}<br><br>`;\r\n      html += `<strong>💡 Recommended Interventions:</strong><br>`;\r\n      plateauAnalysis.interventions.forEach(intervention => {\r\n        html += `• ${intervention}<br>`;\r\n      });\r\n      output.className = 'result warning active';\r\n    } else {\r\n      html += `<strong>✅ No Plateau Detected</strong><br>`;\r\n      html += `Training progression appears healthy.<br><br>`;\r\n      html += `Continue current program with monitoring.`;\r\n      output.className = 'result success active';\r\n    }\r\n    \r\n    output.innerHTML = html;\r\n  }, 2000);\r\n};\r\n\r\nwindow.getAdaptiveRIR = function() {\r\n  const output = document.getElementById('analyticsOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Analyzing RIR patterns for personalized recommendations...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const mockRIRHistory = [\r\n      { actualRIR: 2.5, targetRIR: 2, nextDayFatigue: 3, recoveryDays: 2 },\r\n      { actualRIR: 1.5, targetRIR: 1, nextDayFatigue: 4, recoveryDays: 3 },\r\n      { actualRIR: 3, targetRIR: 2, nextDayFatigue: 2, recoveryDays: 1 }\r\n    ];\r\n    \r\n    const adaptiveRIR = adaptiveRIRRecommendations('Chest', mockRIRHistory);\r\n    \r\n    let html = '<strong>🎛️ Adaptive RIR Recommendations:</strong><br><br>';\r\n    html += `<strong>Recommended RIR:</strong> ${adaptiveRIR.recommendedRIR}<br>`;\r\n    html += `<strong>Confidence:</strong> ${adaptiveRIR.confidence}%<br>`;\r\n    html += `<strong>Reasoning:</strong> ${adaptiveRIR.reasoning}<br><br>`;\r\n    html += `<strong>Personalization Notes:</strong><br>`;\r\n    adaptiveRIR.personalizedFactors.forEach(factor => {\r\n      html += `• ${factor}<br>`;\r\n    });\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 1500);\r\n};\r\n\r\n// Program Generator Function\r\nwindow.generateWeeklyProgram = function() {\r\n  const output = document.getElementById('programOut');\r\n  output.innerHTML = '<div class=\"loading\"></div> Generating intelligent weekly program...';\r\n  output.className = 'result active';\r\n  \r\n  setTimeout(() => {\r\n    const days = parseInt(document.getElementById('programDays').value);\r\n    const split = document.getElementById('programSplit').value;\r\n    const sessionTime = parseInt(document.getElementById('sessionTime').value);\r\n    const experience = document.getElementById('experienceLevel').value;\r\n    \r\n    const program = generateProgram({\r\n      daysPerWeek: days,\r\n      splitType: split,\r\n      experienceLevel: experience,\r\n      timePerSession: sessionTime\r\n    });\r\n    \r\n    let html = '<strong>📋 Generated Weekly Program:</strong><br><br>';\r\n    html += `<strong>Split Type:</strong> ${program.splitType}<br>`;\r\n    html += `<strong>Days Per Week:</strong> ${program.daysPerWeek}<br><br>`;\r\n    \r\n    program.sessions.forEach(session => {\r\n      html += `<strong>Day ${session.day}: ${session.name}</strong><br>`;\r\n      session.exercises.forEach(exercise => {\r\n        html += `• ${exercise.exercise} - ${exercise.sets} sets x ${exercise.reps[0]}-${exercise.reps[1]} reps<br>`;\r\n      });\r\n      html += '<br>';\r\n    });\r\n    \r\n    output.className = 'result success active';\r\n    output.innerHTML = html;\r\n  }, 2000);\r\n};\r\n\r\n/* ----- new utility system functions ----- */\r\n\r\n// Data Export Functions\r\nwindow.exportAllData = function(format = 'json') {\r\n  const result = dataExportManager.exportAllData(format, {\r\n    includePersonalData: true,\r\n    includeAnalytics: true,\r\n    includeWellness: true\r\n  });\r\n  \r\n  if (result.success) {\r\n    console.log(`✅ Data exported successfully: ${result.filename}`);\r\n    showSystemMessage(`📤 Data exported: ${result.filename} (${(result.size / 1024).toFixed(1)}KB)`, 'success');\r\n  } else {\r\n    console.error('❌ Export failed:', result.error);\r\n    showSystemMessage(`❌ Export failed: ${result.error}`, 'error');\r\n  }\r\n};\r\n\r\nwindow.createBackup = function() {\r\n  const result = dataExportManager.createAutoBackup();\r\n  \r\n  if (result.success) {\r\n    console.log('✅ Backup created:', result.backupKey);\r\n    showSystemMessage(`💾 Backup created successfully (${result.dataPoints} data points)`, 'success');\r\n  } else {\r\n    console.error('❌ Backup failed:', result.error);\r\n    showSystemMessage(`❌ Backup failed: ${result.error}`, 'error');\r\n  }\r\n};\r\n\r\nwindow.viewBackups = function() {\r\n  const backups = dataExportManager.getAvailableBackups();\r\n  let html = '<strong>📦 Available Backups:</strong><br><br>';\r\n  \r\n  if (backups.length === 0) {\r\n    html += '<p>No backups available. Create your first backup!</p>';\r\n  } else {\r\n    backups.forEach(backup => {\r\n      const date = new Date(backup.date).toLocaleString();\r\n      const size = (backup.size / 1024).toFixed(1);\r\n      html += `<div style=\"margin: 10px 0; padding: 10px; background: rgba(255,255,255,0.05); border-radius: 8px;\">`;\r\n      html += `<strong>📅 ${date}</strong><br>`;\r\n      html += `📊 ${backup.dataPoints} data points | 💾 ${size}KB<br>`;\r\n      html += `<button onclick=\"restoreBackup('${backup.key}')\" style=\"margin-top: 5px; padding: 5px 10px; background: #3b82f6; color: white; border: none; border-radius: 4px; cursor: pointer;\">Restore</button>`;\r\n      html += `</div>`;\r\n    });\r\n  }\r\n  \r\n  const output = document.getElementById('backupResults') || createSystemOutput('backupResults');\r\n  output.innerHTML = html;\r\n  output.className = 'result active';\r\n};\r\n\r\nwindow.restoreBackup = function(backupKey) {\r\n  if (confirm('⚠️ This will overwrite your current data. Are you sure?')) {\r\n    const result = dataExportManager.restoreFromBackup(backupKey);\r\n    \r\n    if (result.success) {\r\n      showSystemMessage('✅ Backup restored successfully! Refreshing page...', 'success');\r\n      setTimeout(() => location.reload(), 2000);\r\n    } else {\r\n      showSystemMessage(`❌ Restore failed: ${result.error}`, 'error');\r\n    }\r\n  }\r\n};\r\n\r\n// Performance Functions\r\nwindow.getPerformanceReport = function() {\r\n  const report = performanceManager.generatePerformanceReport();\r\n  \r\n  let html = '<strong>⚡ Performance Report:</strong><br><br>';\r\n  html += `<strong>📊 Load Performance:</strong><br>`;\r\n  html += `• Average Load Time: ${Math.round(report.performance.averageLoadTime)}ms<br>`;\r\n  html += `• 95th Percentile: ${Math.round(report.performance.loadTimeP95)}ms<br><br>`;\r\n  \r\n  html += `<strong>💾 Memory Usage:</strong><br>`;\r\n  html += `• Current: ${report.memory.currentUsage.toFixed(1)}MB<br>`;\r\n  html += `• Peak: ${report.memory.peakUsage.toFixed(1)}MB<br><br>`;\r\n  \r\n  html += `<strong>🖱️ Interactions:</strong><br>`;\r\n  html += `• Total: ${report.interactions.totalInteractions}<br>`;\r\n  html += `• Average Delay: ${Math.round(report.interactions.averageDelay)}ms<br><br>`;\r\n  \r\n  if (report.recommendations.length > 0) {\r\n    html += `<strong>💡 Recommendations:</strong><br>`;\r\n    report.recommendations.forEach(rec => {\r\n      const priority = rec.priority === 'high' ? '🔴' : rec.priority === 'medium' ? '🟡' : '🟢';\r\n      html += `${priority} ${rec.message}<br>`;\r\n    });\r\n  }\r\n  \r\n  const output = document.getElementById('performanceResults') || createSystemOutput('performanceResults');\r\n  output.innerHTML = html;\r\n  output.className = 'result active';\r\n};\r\n\r\nwindow.clearPerformanceData = function() {\r\n  if (confirm('Clear all performance monitoring data?')) {\r\n    performanceManager.clearOldMetrics();\r\n    localStorage.removeItem('performance-issues');\r\n    showSystemMessage('🧹 Performance data cleared', 'success');\r\n  }\r\n};\r\n\r\n// User Feedback Functions  \r\nwindow.openFeedbackWidget = function() {\r\n  userFeedbackManager.openFeedbackPanel();\r\n};\r\n\r\nwindow.getUserAnalytics = function() {\r\n  const analytics = userFeedbackManager.generateAnalyticsDashboard();\r\n  \r\n  let html = '<strong>📈 Usage Analytics:</strong><br><br>';\r\n  html += `<strong>📱 Usage Stats:</strong><br>`;\r\n  html += `• Total Sessions: ${analytics.usage.totalSessions}<br>`;\r\n  html += `• Average Duration: ${analytics.usage.averageSessionDuration} minutes<br>`;\r\n  html += `• Features Used: ${analytics.usage.featuresUsed}<br>`;\r\n  html += `• Most Used: ${analytics.usage.mostUsedFeature}<br><br>`;\r\n  \r\n  if (analytics.feedback.totalFeedback > 0) {\r\n    html += `<strong>💬 Feedback Summary:</strong><br>`;\r\n    html += `• Total Feedback: ${analytics.feedback.totalFeedback}<br>`;\r\n    html += `• Average Rating: ${analytics.feedback.averageRating}/5 ⭐<br><br>`;\r\n  }\r\n  \r\n  if (analytics.insights.length > 0) {\r\n    html += `<strong>💡 Insights:</strong><br>`;\r\n    analytics.insights.forEach(insight => {\r\n      const icon = insight.type === 'milestone' ? '🎉' : \r\n                   insight.type === 'satisfaction' ? '⭐' : \r\n                   insight.type === 'advanced' ? '🧠' : '💡';\r\n      html += `${icon} ${insight.message}<br>`;\r\n    });\r\n  }\r\n  \r\n  const output = document.getElementById('analyticsResults') || createSystemOutput('analyticsResults');\r\n  output.innerHTML = html;\r\n  output.className = 'result active';\r\n};\r\n\r\n// System utility functions\r\nfunction showSystemMessage(message, type = 'info') {\r\n  const existingMessage = document.querySelector('.system-message');\r\n  if (existingMessage) {\r\n    existingMessage.remove();\r\n  }\r\n  \r\n  const messageEl = document.createElement('div');\r\n  messageEl.className = `system-message ${type}`;\r\n  messageEl.style.cssText = `\r\n    position: fixed;\r\n    top: 20px;\r\n    right: 20px;\r\n    padding: 15px 20px;\r\n    border-radius: 8px;\r\n    font-weight: 600;\r\n    z-index: 1000;\r\n    max-width: 400px;\r\n    box-shadow: 0 4px 20px rgba(0,0,0,0.15);\r\n    ${type === 'success' ? 'background: #d1fae5; color: #065f46; border: 1px solid #10b981;' : ''}\r\n    ${type === 'error' ? 'background: #fee2e2; color: #991b1b; border: 1px solid #ef4444;' : ''}\r\n    ${type === 'info' ? 'background: #dbeafe; color: #1e40af; border: 1px solid #3b82f6;' : ''}\r\n  `;\r\n  messageEl.textContent = message;\r\n  \r\n  document.body.appendChild(messageEl);\r\n  \r\n  setTimeout(() => messageEl.remove(), 5000);\r\n}\r\n\r\nfunction createSystemOutput(id) {\r\n  let output = document.getElementById(id);\r\n  if (!output) {\r\n    output = document.createElement('div');\r\n    output.id = id;\r\n    output.className = 'result';\r\n    \r\n    // Try to append to appropriate section\r\n    const sections = ['advanced-content', 'setup-content', 'feedback-content'];\r\n    for (const sectionId of sections) {\r\n      const section = document.getElementById(sectionId);\r\n      if (section) {\r\n        section.appendChild(output);\r\n        break;\r\n      }\r\n    }\r\n    \r\n    if (!output.parentNode) {\r\n      document.body.appendChild(output);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n","/**\r\n * Chart Management UI\r\n * Handles all chart rendering and interactions\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\nlet weeklyChart = null;\r\nconst muscles = Object.keys(trainingState.volumeLandmarks);\r\n\r\n/**\r\n * Initialize the weekly volume chart\r\n */\r\nfunction initChart() {\r\n  const canvas = document.getElementById('weeklyChart');\r\n  if (!canvas) {\r\n    console.error('Chart canvas not found');\r\n    return null;\r\n  }\r\n  \r\n  const ctx = canvas.getContext('2d');\r\n  if (!ctx) {\r\n    console.error('Cannot get canvas context');\r\n    return null;\r\n  }\r\n  \r\n  if (typeof Chart === 'undefined') {\r\n    console.error('Chart.js not loaded');\r\n    return null;\r\n  }\r\n\r\n  const chartData = muscles.map(muscle => trainingState.currentWeekSets[muscle] || 0);\r\n  const backgroundColors = muscles.map(muscle => trainingState.getVolumeColor(muscle));\r\n    weeklyChart = new Chart(ctx, {\r\n    type: 'bar',\r\n    data: {\r\n      labels: muscles,\r\n      datasets: [{\r\n        label: 'Current Sets',\r\n        data: chartData,\r\n        backgroundColor: backgroundColors,\r\n        borderColor: backgroundColors.map(color => color.replace('0.6', '1')),\r\n        borderWidth: 2\r\n      }, {\r\n        label: 'MEV',\r\n        data: muscles.map(muscle => trainingState.volumeLandmarks[muscle].MEV),\r\n        type: 'line',\r\n        borderColor: 'rgba(255, 255, 0, 0.8)',\r\n        backgroundColor: 'transparent',\r\n        borderWidth: 2,\r\n        pointRadius: 3,\r\n        pointBackgroundColor: 'rgba(255, 255, 0, 1)',\r\n        borderDash: [5, 5]\r\n      }, {\r\n        label: 'MRV',\r\n        data: muscles.map(muscle => trainingState.volumeLandmarks[muscle].MRV),\r\n        type: 'line',\r\n        borderColor: 'rgba(255, 0, 0, 0.8)',\r\n        backgroundColor: 'transparent',\r\n        borderWidth: 2,\r\n        pointRadius: 3,\r\n        pointBackgroundColor: 'rgba(255, 0, 0, 1)',\r\n        borderDash: [10, 5]\r\n      }]\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      plugins: {\r\n        legend: {\r\n          labels: {\r\n            color: '#fff'\r\n          }\r\n        },\r\n        tooltip: {\r\n          callbacks: {\r\n            afterLabel: function(context) {\r\n              const muscle = context.label;\r\n              const sets = context.parsed.y;\r\n              const landmarks = trainingState.volumeLandmarks[muscle];\r\n              const status = trainingState.getVolumeStatus(muscle, sets);\r\n                return [\r\n                `Status: ${status}`,\r\n                `MEV: ${landmarks.MEV} | MRV: ${landmarks.MRV}`,\r\n                `Target RIR: ${trainingState.getTargetRIR()}`\r\n              ];\r\n            }\r\n          }\r\n        }\r\n      },      scales: {\r\n        y: {\r\n          beginAtZero: true,\r\n          grid: {\r\n            color: 'rgba(255, 255, 255, 0.1)'\r\n          },\r\n          ticks: {\r\n            color: '#fff',\r\n            stepSize: 1  // Show every 1 set on Y-axis\r\n          }\r\n        },\r\n        x: {\r\n          grid: {\r\n            color: 'rgba(255, 255, 255, 0.1)'\r\n          },\r\n          ticks: {\r\n            color: '#fff'\r\n          }\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  return weeklyChart;\r\n}\r\n\r\n/**\r\n * Update chart with current data\r\n */\r\nfunction updateChart() {\r\n  if (!weeklyChart) return;\r\n  \r\n  const newData = muscles.map(muscle => trainingState.currentWeekSets[muscle] || 0);\r\n  const newColors = muscles.map(muscle => trainingState.getVolumeColor(muscle));\r\n  \r\n  // Update current sets data\r\n  weeklyChart.data.datasets[0].data = newData;\r\n  weeklyChart.data.datasets[0].backgroundColor = newColors;\r\n  weeklyChart.data.datasets[0].borderColor = newColors.map(color => color.replace('0.6', '1'));\r\n  \r\n  // Update landmark lines\r\n  weeklyChart.data.datasets[1].data = muscles.map(muscle => trainingState.volumeLandmarks[muscle].MEV);\r\n  weeklyChart.data.datasets[2].data = muscles.map(muscle => trainingState.volumeLandmarks[muscle].MRV);\r\n  \r\n  weeklyChart.update();\r\n}\r\n\r\n/**\r\n * Reset chart data\r\n */\r\nfunction resetChart() {\r\n  muscles.forEach(muscle => {\r\n    trainingState.updateWeeklySets(muscle, trainingState.volumeLandmarks[muscle].MEV);\r\n  });\r\n  updateChart();\r\n}\r\n\r\n/**\r\n * Show deload visualization\r\n */\r\nfunction showDeloadVisualization() {\r\n  if (!weeklyChart) return;\r\n  \r\n  // Temporarily show 50% volume\r\n  const deloadData = muscles.map(muscle => \r\n    Math.round(trainingState.volumeLandmarks[muscle].MEV * 0.5)\r\n  );\r\n  \r\n  weeklyChart.data.datasets[0].data = deloadData;\r\n  weeklyChart.data.datasets[0].backgroundColor = muscles.map(() => 'rgba(100, 100, 100, 0.6)');\r\n  weeklyChart.update();\r\n  \r\n  // Reset after 3 seconds\r\n  setTimeout(() => {\r\n    updateChart();  }, 3000);\r\n}\r\n\r\n/**\r\n * Add volume landmarks overlay to chart\r\n */\r\nfunction addVolumeLandmarks() {\r\n  if (!weeklyChart) return;\r\n  \r\n  // Landmarks are already built into the chart\r\n  // This function maintains compatibility with existing code\r\n  console.log('Volume landmarks are permanently displayed on chart');\r\n}\r\n\r\n/**\r\n * Export chart as image for reports\r\n */\r\nfunction exportChartImage() {\r\n  if (!weeklyChart) {\r\n    console.warn('No chart available for export');\r\n    return null;\r\n  }\r\n  \r\n  try {\r\n    // Get chart as base64 image\r\n    const base64Image = weeklyChart.toBase64Image('image/png', 1);\r\n    \r\n    // Create download link\r\n    const link = document.createElement('a');\r\n    link.download = `workout-volume-chart-week-${trainingState.weekNo}.png`;\r\n    link.href = base64Image;\r\n    \r\n    // Trigger download\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    // Show success message\r\n    const notification = document.createElement('div');\r\n    notification.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #4CAF50;\r\n      color: white;\r\n      padding: 12px 20px;\r\n      border-radius: 8px;\r\n      z-index: 10000;\r\n      font-weight: 600;\r\n    `;\r\n    notification.textContent = 'Chart exported successfully!';\r\n    document.body.appendChild(notification);\r\n    \r\n    setTimeout(() => {\r\n      document.body.removeChild(notification);\r\n    }, 3000);\r\n    \r\n    return base64Image;\r\n  } catch (e) {\r\n    console.error('Chart export failed:', e);\r\n    \r\n    // Show error message\r\n    const notification = document.createElement('div');\r\n    notification.style.cssText = `\r\n      position: fixed;\r\n      top: 20px;\r\n      right: 20px;\r\n      background: #f44336;\r\n      color: white;\r\n      padding: 12px 20px;\r\n      border-radius: 8px;\r\n      z-index: 10000;\r\n      font-weight: 600;\r\n    `;\r\n    notification.textContent = 'Export failed. Please try again.';\r\n    document.body.appendChild(notification);\r\n    \r\n    setTimeout(() => {\r\n      document.body.removeChild(notification);\r\n    }, 3000);\r\n    \r\n    return null;\r\n  }\r\n}\r\n\r\n// --- consolidated exports ---\r\nexport {\r\n  initChart,\r\n  updateChart,\r\n  resetChart,\r\n  addVolumeLandmarks,\r\n  exportChartImage,\r\n  showDeloadVisualization,\r\n  weeklyChart\r\n};\r\n","/**\r\n * TrainingState Singleton - Renaissance Periodization Implementation\r\n * Manages all training state including volume landmarks, meso progression, and deload logic\r\n */\r\n\r\nclass TrainingState {\r\n  constructor() {\r\n    if (TrainingState.instance) {\r\n      return TrainingState.instance;\r\n    }\r\n\r\n    // Core RP Volume Landmarks (defaults from RP literature)\r\n    this.volumeLandmarks = {\r\n      'Chest': { MV: 4, MEV: 8, MAV: 16, MRV: 22 },\r\n      'Back': { MV: 6, MEV: 10, MAV: 20, MRV: 25 },\r\n      'Quads': { MV: 6, MEV: 10, MAV: 20, MRV: 25 },\r\n      'Hamstrings': { MV: 4, MEV: 6, MAV: 16, MRV: 20 },\r\n      'Shoulders': { MV: 4, MEV: 8, MAV: 16, MRV: 20 },\r\n      'Biceps': { MV: 4, MEV: 6, MAV: 14, MRV: 20 },\r\n      'Triceps': { MV: 4, MEV: 6, MAV: 14, MRV: 18 },\r\n      'Calves': { MV: 6, MEV: 8, MAV: 16, MRV: 22 },\r\n      'Abs': { MV: 0, MEV: 6, MAV: 16, MRV: 25 },\r\n      'Forearms': { MV: 2, MEV: 4, MAV: 10, MRV: 16 },\r\n      'Neck': { MV: 0, MEV: 2, MAV: 8, MRV: 12 },\r\n      'Traps': { MV: 2, MEV: 4, MAV: 12, MRV: 16 }\r\n    };\r\n\r\n    // Training progression state\r\n    this.weekNo = 1;\r\n    this.mesoLen = 4;\r\n    this.blockNo = 1;\r\n    this.deloadPhase = false;\r\n    this.resensitizationPhase = false;\r\n\r\n    // Current week data\r\n    this.currentWeekSets = {};\r\n    this.lastWeekSets = {};\r\n    \r\n    // Baseline strength tracking for fatigue detection\r\n    this.baselineStrength = {};\r\n    \r\n    // Initialize current week sets at MEV and baseline strength\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n      this.lastWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n      this.baselineStrength[muscle] = 100; // Default baseline load (kg)\r\n    });\r\n\r\n    // Performance tracking for deload detection\r\n    this.consecutiveMRVWeeks = 0;\r\n    this.recoverySessionsThisWeek = 0;\r\n    this.totalMusclesNeedingRecovery = 0;\r\n\r\n    TrainingState.instance = this;\r\n    this.loadState();\r\n  }\r\n  // Calculate target RIR based on meso progression\r\n  getTargetRIR() {\r\n    const startRIR = 3.0;\r\n    const endRIR = 0.5;\r\n    const progressionRate = (startRIR - endRIR) / (this.mesoLen - 1);\r\n    const targetRIR = startRIR - (progressionRate * (this.weekNo - 1));\r\n    return Math.max(endRIR, Math.min(startRIR, targetRIR));\r\n  }\r\n\r\n  // Get volume status for a muscle\r\n  getVolumeStatus(muscle, sets = null) {\r\n    const currentSets = sets !== null ? sets : this.currentWeekSets[muscle];\r\n    const landmarks = this.volumeLandmarks[muscle];\r\n    \r\n    if (currentSets < landmarks.MV) return 'under-minimum';\r\n    if (currentSets < landmarks.MEV) return 'maintenance';\r\n    if (currentSets < landmarks.MAV) return 'optimal';\r\n    if (currentSets < landmarks.MRV) return 'high';\r\n    return 'maximum';\r\n  }\r\n\r\n  // Get volume zone color for charting\r\n  getVolumeColor(muscle, sets = null) {\r\n    const status = this.getVolumeStatus(muscle, sets);\r\n    const colors = {\r\n      'under-minimum': '#ff4444',  // Red\r\n      'maintenance': '#ffaa00',    // Orange\r\n      'optimal': '#44ff44',        // Green\r\n      'high': '#ffff44',           // Yellow\r\n      'maximum': '#ff4444'         // Red\r\n    };\r\n    return colors[status];\r\n  }\r\n\r\n  // Update weekly sets for a muscle\r\n  updateWeeklySets(muscle, sets) {\r\n    this.currentWeekSets[muscle] = Math.max(0, sets);\r\n    this.saveState();\r\n  }\r\n\r\n  // Add sets to a muscle\r\n  addSets(muscle, additionalSets) {\r\n    this.currentWeekSets[muscle] += additionalSets;\r\n    this.currentWeekSets[muscle] = Math.max(0, this.currentWeekSets[muscle]);\r\n    this.saveState();\r\n  }\r\n  // Check if deload is needed\r\n  shouldDeload() {\r\n    // Check 1: Consecutive weeks at MRV\r\n    if (this.consecutiveMRVWeeks >= 2) return true;\r\n    \r\n    // Check 2: Most muscles need recovery\r\n    const totalMuscles = Object.keys(this.volumeLandmarks).length;\r\n    if (this.totalMusclesNeedingRecovery >= Math.ceil(totalMuscles / 2)) return true;\r\n    \r\n    // Check 3: Enhanced fatigue detection - if ≥1 major muscle hit MRV via fatigue this week\r\n    const majorMuscles = ['Chest', 'Back', 'Quads', 'Shoulders'];\r\n    const fatigueBasedMRV = majorMuscles.some(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV && \r\n      this.totalMusclesNeedingRecovery > 0\r\n    );\r\n    if (fatigueBasedMRV) return true;\r\n    \r\n    // Check 4: End of meso\r\n    if (this.weekNo >= this.mesoLen) return true;\r\n    \r\n    return false;\r\n  }\r\n\r\n  // Check if resensitization is needed (every 3-6 mesos)\r\n  shouldResensitize() {\r\n    return this.blockNo % 4 === 0; // Every 4 blocks (adjustable)\r\n  }\r\n\r\n  // Start deload phase\r\n  startDeload() {\r\n    this.deloadPhase = true;\r\n    // Reduce all sets to 50% of MEV\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      const deloadSets = Math.round(this.volumeLandmarks[muscle].MEV * 0.5);\r\n      this.currentWeekSets[muscle] = deloadSets;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Start resensitization phase\r\n  startResensitization() {\r\n    this.resensitizationPhase = true;\r\n    // Set all muscles to MV\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MV;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Progress to next week\r\n  nextWeek() {\r\n    // Store last week's data\r\n    this.lastWeekSets = { ...this.currentWeekSets };\r\n    \r\n    // Check for MRV breach\r\n    const mrvBreaches = Object.keys(this.volumeLandmarks).filter(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV\r\n    );\r\n    \r\n    if (mrvBreaches.length > 0) {\r\n      this.consecutiveMRVWeeks++;\r\n    } else {\r\n      this.consecutiveMRVWeeks = 0;\r\n    }\r\n\r\n    // Progress week\r\n    this.weekNo++;\r\n    \r\n    // Check for meso completion\r\n    if (this.weekNo > this.mesoLen) {\r\n      this.weekNo = 1;\r\n      this.blockNo++;\r\n      this.consecutiveMRVWeeks = 0;\r\n    }\r\n\r\n    // Reset weekly counters\r\n    this.recoverySessionsThisWeek = 0;\r\n    this.totalMusclesNeedingRecovery = 0;\r\n\r\n    this.saveState();\r\n  }\r\n\r\n  // Reset week (for testing/corrections)\r\n  resetWeek() {\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Auto-progression methods\r\n  \r\n  // Mark muscle as hitting MRV for deload tracking\r\n  hitMRV(muscle) {\r\n    this.totalMusclesNeedingRecovery++;\r\n    // Check if this muscle has been at MRV for consecutive weeks\r\n    const atMRV = this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV;\r\n    if (atMRV) {\r\n      this.consecutiveMRVWeeks++;\r\n    }\r\n    this.saveState();\r\n  }\r\n\r\n  // Get current weekly sets for a muscle\r\n  getWeeklySets(muscle) {\r\n    return this.currentWeekSets[muscle] || this.volumeLandmarks[muscle].MEV;\r\n  }\r\n\r\n  // Initialize muscle at MEV (for new week or reset)\r\n  initializeMuscleAtMEV(muscle) {\r\n    this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n    this.saveState();\r\n  }\r\n\r\n  // Check if most muscles are at MRV (deload trigger)\r\n  mostMusclesAtMRV() {\r\n    const muscles = Object.keys(this.volumeLandmarks);\r\n    const mrvCount = muscles.filter(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV\r\n    ).length;\r\n    return mrvCount >= Math.ceil(muscles.length * 0.5);\r\n  }\r\n\r\n  // Set baseline strength for a muscle (typically week 1 top set)\r\n  setBaselineStrength(muscle, load) {\r\n    this.baselineStrength[muscle] = load;\r\n    this.saveState();\r\n  }\r\n\r\n  // Check for rep strength drop (fatigue indicator)\r\n  repStrengthDrop(muscle, lastLoad) {\r\n    const baseline = this.baselineStrength[muscle];\r\n    if (!baseline || !lastLoad) return false;\r\n    \r\n    // Consider significant drop if last load < 97% of baseline\r\n    const strengthDropThreshold = 0.97;\r\n    return lastLoad < (baseline * strengthDropThreshold);\r\n  }\r\n\r\n  // Update volume landmarks for a muscle\r\n  updateVolumeLandmarks(muscle, landmarks) {\r\n    this.volumeLandmarks[muscle] = { ...this.volumeLandmarks[muscle], ...landmarks };\r\n    this.saveState();\r\n  }\r\n\r\n  // Calculate recovery volume\r\n  getRecoveryVolume(muscle, hasIllness = false) {\r\n    const landmarks = this.volumeLandmarks[muscle];\r\n    const midpoint = Math.round((landmarks.MEV + landmarks.MRV) / 2);\r\n    const adjustment = hasIllness ? 2 : 1;\r\n    const recoveryVolume = midpoint - adjustment;\r\n    return Math.max(recoveryVolume, Math.ceil(landmarks.MEV * 0.5));\r\n  }\r\n\r\n  // Save state to localStorage\r\n  saveState() {\r\n    const state = {\r\n      volumeLandmarks: this.volumeLandmarks,\r\n      weekNo: this.weekNo,\r\n      mesoLen: this.mesoLen,\r\n      blockNo: this.blockNo,\r\n      deloadPhase: this.deloadPhase,\r\n      resensitizationPhase: this.resensitizationPhase,\r\n      currentWeekSets: this.currentWeekSets,\r\n      lastWeekSets: this.lastWeekSets,\r\n      consecutiveMRVWeeks: this.consecutiveMRVWeeks,\r\n      recoverySessionsThisWeek: this.recoverySessionsThisWeek,\r\n      totalMusclesNeedingRecovery: this.totalMusclesNeedingRecovery\r\n    };\r\n    \r\n    localStorage.setItem('rp-training-state', JSON.stringify(state));\r\n  }\r\n\r\n  // Load state from localStorage\r\n  loadState() {\r\n    const saved = localStorage.getItem('rp-training-state');\r\n    if (saved) {\r\n      try {\r\n        const state = JSON.parse(saved);\r\n        Object.assign(this, state);\r\n      } catch (e) {\r\n        console.warn('Failed to load training state, using defaults');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Migrate legacy localStorage data\r\n  migrateLegacyData() {\r\n    const muscles = Object.keys(this.volumeLandmarks);\r\n    let hasLegacyData = false;\r\n\r\n    muscles.forEach(muscle => {\r\n      // Check for old format keys\r\n      const oldKey = `week-1-${muscle}`;\r\n      const oldValue = localStorage.getItem(oldKey);\r\n      \r\n      if (oldValue) {\r\n        this.currentWeekSets[muscle] = parseInt(oldValue, 10);\r\n        localStorage.removeItem(oldKey);\r\n        hasLegacyData = true;\r\n      }\r\n\r\n      // Migrate MEV/MRV settings\r\n      const mevKey = `${muscle}-MEV`;\r\n      const mrvKey = `${muscle}-MRV`;\r\n      const mevValue = localStorage.getItem(mevKey);\r\n      const mrvValue = localStorage.getItem(mrvKey);\r\n\r\n      if (mevValue || mrvValue) {\r\n        this.volumeLandmarks[muscle] = {\r\n          ...this.volumeLandmarks[muscle],\r\n          MEV: mevValue ? parseInt(mevValue, 10) : this.volumeLandmarks[muscle].MEV,\r\n          MRV: mrvValue ? parseInt(mrvValue, 10) : this.volumeLandmarks[muscle].MRV\r\n        };\r\n        if (mevValue) localStorage.removeItem(mevKey);\r\n        if (mrvValue) localStorage.removeItem(mrvKey);\r\n        hasLegacyData = true;\r\n      }\r\n    });\r\n\r\n    if (hasLegacyData) {\r\n      this.saveState();\r\n      console.log('Legacy data migrated to new RP training state');\r\n    }\r\n  }\r\n\r\n  // Get current state summary\r\n  getStateSummary() {\r\n    return {\r\n      week: this.weekNo,\r\n      meso: this.mesoLen,\r\n      block: this.blockNo,\r\n      targetRIR: this.getTargetRIR(),\r\n      deloadRecommended: this.shouldDeload(),\r\n      resensitizationRecommended: this.shouldResensitize(),\r\n      currentPhase: this.deloadPhase ? 'deload' : \r\n                   this.resensitizationPhase ? 'resensitization' : 'accumulation'\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst trainingState = new TrainingState();\r\nexport default trainingState;\r\n\r\n// Also make available globally for legacy compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.trainingState = trainingState;\r\n}\r\n","exports.interopDefault = function (a) {\r\n  return a && a.__esModule ? a : {default: a};\r\n};\r\n\r\nexports.defineInteropFlag = function (a) {\r\n  Object.defineProperty(a, '__esModule', {value: true});\r\n};\r\n\r\nexports.exportAll = function (source, dest) {\r\n  Object.keys(source).forEach(function (key) {\r\n    if (\r\n      key === 'default' ||\r\n      key === '__esModule' ||\r\n      Object.prototype.hasOwnProperty.call(dest, key)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    Object.defineProperty(dest, key, {\r\n      enumerable: true,\r\n      get: function () {\r\n        return source[key];\r\n      },\r\n    });\r\n  });\r\n\r\n  return dest;\r\n};\r\n\r\nexports.export = function (dest, destName, get) {\r\n  Object.defineProperty(dest, destName, {\r\n    enumerable: true,\r\n    get: get,\r\n  });\r\n};\r\n","/**\r\n * Renaissance Periodization Volume Algorithms\r\n * Implements RP Table 2.2 (MEV Stimulus Estimator) and Table 2.3 (Set Progression Algorithm)\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\nimport { isHighFatigue } from './fatigue.js';\r\n\r\n/**\r\n * RP Table 2.2: MEV Stimulus Estimator\r\n * Scores stimulus quality based on mind-muscle connection, pump, and disruption\r\n * @param {Object} feedback - {mmc: 0-3, pump: 0-3, disruption: 0-3}\r\n * @returns {Object} - {score: 0-9, advice: string, action: string}\r\n */\r\nfunction scoreStimulus({ mmc, pump, disruption }) {\r\n  // Validate inputs\r\n  const clamp = (val, min, max) => Math.max(min, Math.min(max, val));\r\n  const clampedMmc = clamp(mmc, 0, 3);\r\n  const clampedPump = clamp(pump, 0, 3);\r\n  const clampedDisruption = clamp(disruption, 0, 3);\r\n  \r\n  const totalScore = clampedMmc + clampedPump + clampedDisruption;\r\n  \r\n  let advice, action, setChange;\r\n  \r\n  if (totalScore <= 3) {\r\n    advice = `Stimulus too low (${totalScore}/9) → Add 2 sets next session`;\r\n    action = 'add_sets';\r\n    setChange = 2;\r\n  } else if (totalScore <= 6) {\r\n    advice = `Stimulus adequate (${totalScore}/9) → Keep sets the same`;\r\n    action = 'maintain';\r\n    setChange = 0;\r\n  } else {\r\n    advice = `Stimulus excessive (${totalScore}/9) → Remove 1-2 sets next session`;\r\n    action = 'reduce_sets';\r\n    setChange = -1;\r\n  }\r\n  \r\n  return {\r\n    score: totalScore,\r\n    advice,\r\n    action,\r\n    setChange,\r\n    breakdown: {\r\n      mmc: clampedMmc,\r\n      pump: clampedPump,\r\n      disruption: clampedDisruption\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Auto-Volume Progression System\r\n * Automatically increments sets based on MEV/MRV status and recovery feedback\r\n * @param {string} muscle - Target muscle group\r\n * @param {Object} feedback - {stimulus: 0-9, soreness: 0-3, perf: -1 to 2, recoverySession: boolean}\r\n * @param {Object} state - Training state singleton\r\n * @returns {Object} - {add: boolean, delta: number, reason: string}\r\n */\r\nfunction autoSetIncrement(muscle, feedback, state) {\r\n  const { MEV, MRV } = state.volumeLandmarks[muscle];\r\n  const currentSets = state.currentWeekSets[muscle] || MEV;\r\n  \r\n  const atMEV = currentSets <= MEV;\r\n  const atMRV = currentSets >= MRV;\r\n  const lowStimulus = feedback.stimulus <= 3;\r\n  const goodRecovery = feedback.soreness <= 1 && feedback.perf >= 0;\r\n  \r\n  // Don't add if at MRV or recovery session needed\r\n  if (atMRV || feedback.recoverySession) {\r\n    return { \r\n      add: false, \r\n      delta: 0, \r\n      reason: atMRV ? 'At MRV - holding volume' : 'Recovery session needed' \r\n    };\r\n  }\r\n  \r\n  // Add sets if at MEV or if low stimulus with good recovery\r\n  if (atMEV || (lowStimulus && goodRecovery)) {\r\n    const baseDelta = 1;\r\n    const mevBonus = atMEV ? 1 : 0; // Extra set boost when starting from MEV\r\n    const totalDelta = Math.min(baseDelta + mevBonus, 2); // Cap at +2 sets max\r\n    \r\n    return { \r\n      add: true, \r\n      delta: totalDelta,\r\n      reason: atMEV ? 'Starting from MEV - aggressive progression' : 'Low stimulus with good recovery'\r\n    };\r\n  }\r\n  \r\n  return { \r\n    add: false, \r\n    delta: 0, \r\n    reason: 'Maintaining current volume' \r\n  };\r\n}\r\n\r\n/**\r\n * Process weekly auto-volume progression for all muscles\r\n * @param {Object} weeklyFeedback - {muscle: {stimulus, soreness, perf, recoverySession}}\r\n * @param {Object} state - Training state singleton\r\n * @returns {Object} - Progression summary and deload recommendation\r\n */\r\nfunction processWeeklyVolumeProgression(weeklyFeedback, state) {\r\n  const progressionLog = {};\r\n  let deloadTriggered = false;\r\n  let mrvHits = 0;\r\n  // Process each muscle's auto-progression\r\n  Object.keys(weeklyFeedback).forEach(muscle => {\r\n    const feedback = weeklyFeedback[muscle];\r\n    \r\n    // Check for high fatigue using enhanced detection\r\n    const high = isHighFatigue(muscle, feedback, state);\r\n    if (high) {\r\n      // Treat like MRV - trigger recovery\r\n      state.hitMRV(muscle);\r\n      mrvHits++;\r\n      console.log(`hitMRV: true (fatigue) - ${muscle}`);\r\n      \r\n      // Force recovery session\r\n      feedback.recoverySession = true;\r\n    }\r\n    \r\n    const increment = autoSetIncrement(muscle, feedback, state);\r\n    \r\n    // Apply set changes\r\n    if (increment.add) {\r\n      state.addSets(muscle, increment.delta);\r\n    }\r\n    \r\n    // Track MRV hits for deload logic\r\n    if (state.getWeeklySets(muscle) >= state.volumeLandmarks[muscle].MRV) {\r\n      state.hitMRV(muscle);\r\n      mrvHits++;\r\n    }\r\n    \r\n    progressionLog[muscle] = {\r\n      previousSets: state.lastWeekSets[muscle] || state.volumeLandmarks[muscle].MEV,\r\n      currentSets: state.getWeeklySets(muscle),\r\n      increment: increment.delta,\r\n      reason: increment.reason,\r\n      status: state.getVolumeStatus(muscle)\r\n    };\r\n  });\r\n\r\n  // Check deload conditions\r\n  if (state.shouldDeload()) {\r\n    state.startDeload();\r\n    deloadTriggered = true;\r\n  }\r\n\r\n  return {\r\n    progressionLog,\r\n    deloadTriggered,\r\n    mrvHits,\r\n    weekComplete: true,\r\n    recommendation: deloadTriggered ? 'Deload phase initiated' : 'Continue progression'\r\n  };\r\n}\r\n\r\n/**\r\n * RP Table 2.3: Set Progression Algorithm\r\n * Matrix lookup based on soreness level and performance vs last session\r\n * @param {number} soreness - 0-3 (0=none, 1=mild, 2=moderate, 3=high)\r\n * @param {number} performance - 0-3 (0=worse, 1=same, 2=better, 3=much better)\r\n * @returns {Object} - {advice: string, action: string, setChange: number}\r\n */\r\nfunction setProgressionAlgorithm(soreness, performance) {\r\n  // Clamp inputs to valid ranges\r\n  const clamp = (val, min, max) => Math.max(min, Math.min(max, val));\r\n  const s = clamp(soreness, 0, 3);\r\n  const p = clamp(performance, 0, 3);\r\n  \r\n  // RP Set Progression Matrix [soreness][performance]\r\n  const progressionMatrix = [\r\n    // Soreness 0 (None)\r\n    [\r\n      { advice: \"Add 1 set next session\", action: \"add_sets\", setChange: 1 },      // Performance 0 (worse)\r\n      { advice: \"Add 2 sets next session\", action: \"add_sets\", setChange: 2 },     // Performance 1 (same)\r\n      { advice: \"Add 2-3 sets next session\", action: \"add_sets\", setChange: 2 },   // Performance 2 (better)\r\n      { advice: \"Add 2-3 sets next session\", action: \"add_sets\", setChange: 3 }    // Performance 3 (much better)\r\n    ],\r\n    // Soreness 1 (Mild)\r\n    [\r\n      { advice: \"Hold sets at current level\", action: \"maintain\", setChange: 0 },  // Performance 0\r\n      { advice: \"Add 1 set next session\", action: \"add_sets\", setChange: 1 },      // Performance 1\r\n      { advice: \"Add 2 sets next session\", action: \"add_sets\", setChange: 2 },     // Performance 2\r\n      { advice: \"Add 2-3 sets next session\", action: \"add_sets\", setChange: 2 }    // Performance 3\r\n    ],\r\n    // Soreness 2 (Moderate)\r\n    [\r\n      { advice: \"Do recovery session\", action: \"recovery\", setChange: -99 },       // Performance 0\r\n      { advice: \"Hold sets at current level\", action: \"maintain\", setChange: 0 },  // Performance 1\r\n      { advice: \"Hold sets at current level\", action: \"maintain\", setChange: 0 },  // Performance 2\r\n      { advice: \"Add 1 set next session\", action: \"add_sets\", setChange: 1 }       // Performance 3\r\n    ],\r\n    // Soreness 3 (High)\r\n    [\r\n      { advice: \"Do recovery session\", action: \"recovery\", setChange: -99 },       // Performance 0\r\n      { advice: \"Do recovery session\", action: \"recovery\", setChange: -99 },       // Performance 1\r\n      { advice: \"Do recovery session\", action: \"recovery\", setChange: -99 },       // Performance 2\r\n      { advice: \"Hold sets at current level\", action: \"maintain\", setChange: 0 }   // Performance 3\r\n    ]\r\n  ];\r\n  \r\n  return progressionMatrix[s][p];\r\n}\r\n\r\n/**\r\n * Analyze current volume status relative to landmarks\r\n * @param {string} muscle - Muscle group name\r\n * @param {number} currentSets - Current weekly sets (optional, uses state if not provided)\r\n * @returns {Object} - Volume analysis\r\n */\r\nfunction analyzeVolumeStatus(muscle, currentSets = null) {\r\n  const sets = currentSets !== null ? currentSets : trainingState.currentWeekSets[muscle];\r\n  const landmarks = trainingState.volumeLandmarks[muscle];\r\n  \r\n  if (!landmarks) {\r\n    throw new Error(`Unknown muscle group: ${muscle}`);\r\n  }\r\n  \r\n  const status = trainingState.getVolumeStatus(muscle, sets);\r\n  const percentage = (sets / landmarks.MRV) * 100;\r\n  \r\n  let recommendation = '';\r\n  let urgency = 'normal';\r\n  \r\n  switch (status) {\r\n    case 'under-minimum':\r\n      recommendation = `Below MV (${landmarks.MV}). Increase volume significantly.`;\r\n      urgency = 'high';\r\n      break;\r\n    case 'maintenance':\r\n      recommendation = `In maintenance zone (${landmarks.MV}-${landmarks.MEV}). Consider increasing for growth.`;\r\n      urgency = 'low';\r\n      break;\r\n    case 'optimal':\r\n      recommendation = `In optimal zone (${landmarks.MEV}-${landmarks.MAV}). Continue progressive overload.`;\r\n      urgency = 'normal';\r\n      break;\r\n    case 'high':\r\n      recommendation = `High volume zone (${landmarks.MAV}-${landmarks.MRV}). Monitor recovery closely.`;\r\n      urgency = 'medium';\r\n      break;\r\n    case 'maximum':\r\n      recommendation = `At/above MRV (${landmarks.MRV}). Deload recommended.`;\r\n      urgency = 'high';\r\n      break;\r\n  }\r\n  \r\n  return {\r\n    muscle,\r\n    currentSets: sets,\r\n    landmarks,\r\n    status,\r\n    percentage: Math.round(percentage),\r\n    recommendation,\r\n    urgency,\r\n    color: trainingState.getVolumeColor(muscle, sets)\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate recovery session volume\r\n * @param {string} muscle - Muscle group name\r\n * @param {boolean} hasIllness - Whether trainee has illness/injury\r\n * @returns {Object} - Recovery session recommendation\r\n */\r\nfunction calculateRecoveryVolume(muscle, hasIllness = false) {\r\n  const landmarks = trainingState.volumeLandmarks[muscle];\r\n  const recoveryVolume = trainingState.getRecoveryVolume(muscle, hasIllness);\r\n  \r\n  return {\r\n    muscle,\r\n    recommendedSets: recoveryVolume,\r\n    reasoning: hasIllness ? 'illness adjustment' : 'standard recovery',\r\n    landmarks,\r\n    percentage: Math.round((recoveryVolume / landmarks.MEV) * 100)\r\n  };\r\n}\r\n\r\n/**\r\n * Validate volume input against landmarks\r\n * @param {string} muscle - Muscle group name\r\n * @param {number} proposedSets - Proposed weekly sets\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateVolumeInput(muscle, proposedSets) {\r\n  const landmarks = trainingState.volumeLandmarks[muscle];\r\n  const isValid = proposedSets >= 0 && proposedSets <= landmarks.MRV * 1.2; // Allow 20% over MRV\r\n  \r\n  let warning = '';\r\n  if (proposedSets < 0) {\r\n    warning = 'Sets cannot be negative';\r\n  } else if (proposedSets > landmarks.MRV) {\r\n    warning = `Above MRV (${landmarks.MRV}). Consider deload.`;\r\n  } else if (proposedSets < landmarks.MV) {\r\n    warning = `Below MV (${landmarks.MV}). May not be sufficient for adaptation.`;\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    warning,\r\n    proposedSets,\r\n    landmarks\r\n  };\r\n}\r\n\r\n/**\r\n * Get volume progression recommendation for next week\r\n * @param {string} muscle - Muscle group name\r\n * @param {Object} feedback - Latest training feedback\r\n * @returns {Object} - Next week recommendation\r\n */\r\nfunction getVolumeProgression(muscle, feedback) {\r\n  const currentSets = trainingState.currentWeekSets[muscle];\r\n  const volumeAnalysis = analyzeVolumeStatus(muscle);\r\n  \r\n  // Get stimulus score\r\n  const stimulusResult = scoreStimulus(feedback.stimulus);\r\n  \r\n  // Get set progression recommendation\r\n  const progressionResult = setProgressionAlgorithm(feedback.soreness, feedback.performance);\r\n  \r\n  // Combine recommendations with volume constraints\r\n  let finalSetChange = progressionResult.setChange;\r\n  let finalAdvice = progressionResult.advice;\r\n  \r\n  // Override if at volume limits\r\n  if (volumeAnalysis.status === 'maximum' && finalSetChange > 0) {\r\n    finalSetChange = 0;\r\n    finalAdvice = \"At MRV limit. Hold sets or consider deload.\";\r\n  }\r\n  \r\n  if (volumeAnalysis.status === 'under-minimum' && finalSetChange <= 0) {\r\n    finalSetChange = 2;\r\n    finalAdvice = \"Below minimum volume. Add sets regardless of fatigue.\";\r\n  }\r\n  \r\n  // Special handling for recovery sessions\r\n  if (progressionResult.action === 'recovery') {\r\n    const recoveryVolume = calculateRecoveryVolume(muscle, feedback.hasIllness);\r\n    finalSetChange = recoveryVolume.recommendedSets - currentSets;\r\n    finalAdvice = `Recovery session: ${recoveryVolume.recommendedSets} sets (${recoveryVolume.reasoning})`;\r\n  }\r\n  \r\n  const projectedSets = Math.max(0, currentSets + finalSetChange);\r\n  \r\n  return {\r\n    muscle,\r\n    currentSets,\r\n    projectedSets,\r\n    setChange: finalSetChange,\r\n    advice: finalAdvice,\r\n    stimulusScore: stimulusResult.score,\r\n    volumeStatus: volumeAnalysis.status,\r\n    targetRIR: trainingState.getTargetRIR(),\r\n    deloadRecommended: trainingState.shouldDeload()\r\n  };\r\n}\r\n\r\n/**\r\n * Analyze all muscles for deload necessity\r\n * @returns {Object} - Deload analysis\r\n */\r\nfunction analyzeDeloadNeed() {\r\n  const muscles = Object.keys(trainingState.volumeLandmarks);\r\n  const mrvBreaches = muscles.filter(muscle => \r\n    trainingState.getVolumeStatus(muscle) === 'maximum'\r\n  );\r\n  \r\n  const shouldDeload = trainingState.shouldDeload();\r\n  const reasons = [];\r\n  \r\n  if (trainingState.consecutiveMRVWeeks >= 2) {\r\n    reasons.push('Two consecutive weeks at MRV');\r\n  }\r\n  \r\n  if (trainingState.totalMusclesNeedingRecovery >= Math.ceil(muscles.length / 2)) {\r\n    reasons.push('Most muscles need recovery sessions');\r\n  }\r\n  \r\n  if (trainingState.weekNo >= trainingState.mesoLen) {\r\n    reasons.push('End of mesocycle reached');\r\n  }\r\n  \r\n  if (mrvBreaches.length >= Math.ceil(muscles.length / 3)) {\r\n    reasons.push(`${mrvBreaches.length} muscle groups at/above MRV`);\r\n  }\r\n  \r\n  return {\r\n    shouldDeload,\r\n    reasons,\r\n    mrvBreaches,\r\n    consecutiveMRVWeeks: trainingState.consecutiveMRVWeeks,\r\n    currentWeek: trainingState.weekNo,\r\n    mesoLength: trainingState.mesoLen,\r\n    musclesNeedingRecovery: trainingState.totalMusclesNeedingRecovery\r\n  };\r\n}\r\n\r\n// Export all functions\r\nexport {\r\n  scoreStimulus,\r\n  scoreStimulus as mevStimulusEstimator,\r\n  setProgressionAlgorithm,\r\n  setProgressionAlgorithm as rpSetProgression,\r\n  analyzeVolumeStatus,\r\n  calculateRecoveryVolume,\r\n  validateVolumeInput,\r\n  getVolumeProgression,\r\n  analyzeDeloadNeed,\r\n  autoSetIncrement,\r\n  processWeeklyVolumeProgression\r\n};\r\n","/**\r\n * Renaissance Periodization Fatigue Management\r\n * Handles recovery monitoring, frequency optimization, and fatigue accumulation\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Analyze recovery status and frequency optimization\r\n * @param {number} sorenessRecoveryDays - Days until soreness is gone\r\n * @param {number} currentSessionGap - Days between sessions for this muscle\r\n * @param {string} muscle - Muscle group name\r\n * @returns {Object} - Frequency analysis\r\n */\r\nfunction analyzeFrequency(sorenessRecoveryDays, currentSessionGap, muscle = null) {\r\n  const recoveryTime = Math.max(0, sorenessRecoveryDays);\r\n  const sessionGap = Math.max(1, currentSessionGap);\r\n  \r\n  let recommendation = '';\r\n  let action = '';\r\n  let urgency = 'normal';\r\n  let frequencyAdjustment = 0;\r\n  \r\n  // Recovery vs session gap analysis\r\n  const recoveryRatio = recoveryTime / sessionGap;\r\n  \r\n  if (recoveryRatio < 0.7) {\r\n    // Recovering much faster than session frequency\r\n    recommendation = 'You heal early → Add one session per week';\r\n    action = 'increase_frequency';\r\n    frequencyAdjustment = 1;\r\n    urgency = 'medium';\r\n  } else if (recoveryRatio > 1.3) {\r\n    // Still sore when next session is due\r\n    recommendation = 'Recovery lags → Insert an extra rest day';\r\n    action = 'decrease_frequency';\r\n    frequencyAdjustment = -1;\r\n    urgency = 'high';\r\n  } else {\r\n    // Optimal recovery timing\r\n    recommendation = 'Frequency is optimal';\r\n    action = 'maintain';\r\n    frequencyAdjustment = 0;\r\n    urgency = 'normal';\r\n  }\r\n  \r\n  // Consider current volume when making frequency recommendations\r\n  if (muscle) {\r\n    const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n    \r\n    if (volumeStatus === 'maximum' && action === 'increase_frequency') {\r\n      recommendation = 'At MRV - maintain frequency despite early recovery';\r\n      action = 'maintain';\r\n      frequencyAdjustment = 0;\r\n    }\r\n    \r\n    if (volumeStatus === 'under-minimum' && action === 'decrease_frequency') {\r\n      recommendation = 'Below MV - consider recovery methods instead of reducing frequency';\r\n      action = 'improve_recovery';\r\n      frequencyAdjustment = 0;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    sorenessRecoveryDays: recoveryTime,\r\n    currentSessionGap: sessionGap,\r\n    recoveryRatio: Math.round(recoveryRatio * 100) / 100,\r\n    recommendation,\r\n    action,\r\n    frequencyAdjustment,\r\n    urgency,\r\n    muscle\r\n  };\r\n}\r\n\r\n/**\r\n * Assess overall fatigue accumulation\r\n * @param {Object} weeklyData - Weekly fatigue metrics\r\n * @returns {Object} - Fatigue assessment\r\n */\r\nfunction assessFatigueAccumulation(weeklyData) {\r\n  const {\r\n    averageSoreness = 1,\r\n    sleepQuality = 7, // 1-10 scale\r\n    stressLevel = 5, // 1-10 scale  \r\n    musclesNeedingRecovery = 0,\r\n    consecutiveMRVWeeks = 0,\r\n    performanceDecline = false\r\n  } = weeklyData;\r\n  \r\n  // Calculate fatigue score (0-100)\r\n  let fatigueScore = 0;\r\n  \r\n  // Soreness contribution (0-30 points)\r\n  fatigueScore += Math.min(30, (averageSoreness / 3) * 30);\r\n  \r\n  // Sleep quality contribution (0-20 points, inverted)\r\n  fatigueScore += Math.max(0, 20 - (sleepQuality / 10) * 20);\r\n  \r\n  // Stress level contribution (0-20 points)\r\n  fatigueScore += (stressLevel / 10) * 20;\r\n  \r\n  // Volume overreaching contribution (0-20 points)\r\n  const volumeOverreach = Math.min(20, (musclesNeedingRecovery / 12) * 20);\r\n  fatigueScore += volumeOverreach;\r\n  \r\n  // Consecutive MRV weeks (0-10 points)\r\n  fatigueScore += Math.min(10, consecutiveMRVWeeks * 5);\r\n  \r\n  // Performance decline bonus\r\n  if (performanceDecline) {\r\n    fatigueScore += 10;\r\n  }\r\n  \r\n  // Determine fatigue level\r\n  let fatigueLevel = '';\r\n  let recommendations = [];\r\n  let deloadUrgency = 'none';\r\n  \r\n  if (fatigueScore <= 25) {\r\n    fatigueLevel = 'low';\r\n    recommendations.push('Continue current program');\r\n    recommendations.push('Consider volume progression opportunities');\r\n  } else if (fatigueScore <= 50) {\r\n    fatigueLevel = 'moderate';\r\n    recommendations.push('Monitor recovery closely');\r\n    recommendations.push('Ensure adequate sleep and nutrition');\r\n    deloadUrgency = 'low';\r\n  } else if (fatigueScore <= 75) {\r\n    fatigueLevel = 'high';\r\n    recommendations.push('Reduce training stress');\r\n    recommendations.push('Consider recovery week');\r\n    recommendations.push('Prioritize sleep and stress management');\r\n    deloadUrgency = 'medium';\r\n  } else {\r\n    fatigueLevel = 'excessive';\r\n    recommendations.push('Implement deload immediately');\r\n    recommendations.push('Address sleep and lifestyle factors');\r\n    recommendations.push('Consider extending deload period');\r\n    deloadUrgency = 'high';\r\n  }\r\n  \r\n  return {\r\n    fatigueScore: Math.round(fatigueScore),\r\n    fatigueLevel,\r\n    recommendations,\r\n    deloadUrgency,\r\n    breakdown: {\r\n      soreness: Math.min(30, (averageSoreness / 3) * 30),\r\n      sleep: Math.max(0, 20 - (sleepQuality / 10) * 20),\r\n      stress: (stressLevel / 10) * 20,\r\n      volume: volumeOverreach,\r\n      consecutive: Math.min(10, consecutiveMRVWeeks * 5),\r\n      performance: performanceDecline ? 10 : 0\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Generate recovery session recommendations\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} options - Recovery options\r\n * @returns {Object} - Recovery session plan\r\n */\r\nfunction generateRecoverySession(muscle, options = {}) {\r\n  const {\r\n    hasIllness = false,\r\n    sorenessLevel = 2,\r\n    lastSessionRIR = 0,\r\n    preferredRecoveryType = 'volume'\r\n  } = options;\r\n  \r\n  const landmarks = trainingState.volumeLandmarks[muscle];\r\n  const baseRecoveryVolume = trainingState.getRecoveryVolume(muscle, hasIllness);\r\n  \r\n  let recoveryPlan = {\r\n    muscle,\r\n    type: preferredRecoveryType,\r\n    sets: baseRecoveryVolume,\r\n    intensity: '60-70% of normal',\r\n    rirTarget: '3-4 RIR',\r\n    duration: '1 session',\r\n    notes: []\r\n  };\r\n  \r\n  // Adjust based on soreness level\r\n  if (sorenessLevel >= 3) {\r\n    recoveryPlan.sets = Math.round(baseRecoveryVolume * 0.7);\r\n    recoveryPlan.intensity = '50-60% of normal';\r\n    recoveryPlan.rirTarget = '4-5 RIR';\r\n    recoveryPlan.notes.push('High soreness - very light session');\r\n  }\r\n  \r\n  // Adjust for illness\r\n  if (hasIllness) {\r\n    recoveryPlan.sets = Math.round(recoveryPlan.sets * 0.8);\r\n    recoveryPlan.intensity = '40-50% of normal';\r\n    recoveryPlan.notes.push('Illness present - prioritize rest');\r\n  }\r\n  \r\n  // Adjust based on last session intensity\r\n  if (lastSessionRIR <= 0.5) {\r\n    recoveryPlan.sets = Math.round(recoveryPlan.sets * 0.8);\r\n    recoveryPlan.notes.push('Last session was very intense');\r\n  }\r\n  \r\n  // Recovery type specific adjustments\r\n  if (preferredRecoveryType === 'deload') {\r\n    recoveryPlan.sets = Math.round(landmarks.MEV * 0.5);\r\n    recoveryPlan.intensity = '40-50% of normal';\r\n    recoveryPlan.duration = '3-7 days';\r\n    recoveryPlan.notes.push('Full deload protocol');\r\n  }\r\n  \r\n  return recoveryPlan;\r\n}\r\n\r\n/**\r\n * Monitor overreaching vs overtraining risk\r\n * @param {Object} metrics - Training metrics over time\r\n * @returns {Object} - Risk assessment\r\n */\r\nfunction assessOverreachingRisk(metrics) {\r\n  const {\r\n    weeklyPerformanceTrend = [], // Array of performance scores\r\n    weeklyFatigueTrend = [], // Array of fatigue scores\r\n    volumeProgression = [], // Array of weekly volumes\r\n    motivationLevel = 5, // 1-10\r\n    injuryRisk = 1 // 1-10\r\n  } = metrics;\r\n  \r\n  let riskScore = 0;\r\n  let riskFactors = [];\r\n  \r\n  // Performance trend analysis\r\n  if (weeklyPerformanceTrend.length >= 2) {\r\n    const recentTrend = weeklyPerformanceTrend.slice(-3);\r\n    const isDecreasing = recentTrend.every((val, i) => \r\n      i === 0 || val <= recentTrend[i - 1]\r\n    );\r\n    \r\n    if (isDecreasing) {\r\n      riskScore += 20;\r\n      riskFactors.push('Consistent performance decline');\r\n    }\r\n  }\r\n  \r\n  // Fatigue accumulation\r\n  if (weeklyFatigueTrend.length >= 2) {\r\n    const avgFatigue = weeklyFatigueTrend.reduce((a, b) => a + b, 0) / weeklyFatigueTrend.length;\r\n    if (avgFatigue > 60) {\r\n      riskScore += 25;\r\n      riskFactors.push('High average fatigue');\r\n    }\r\n  }\r\n  \r\n  // Volume progression rate\r\n  if (volumeProgression.length >= 3) {\r\n    const volumeIncrease = volumeProgression[volumeProgression.length - 1] - volumeProgression[0];\r\n    const weekSpan = volumeProgression.length;\r\n    const weeklyIncrease = volumeIncrease / weekSpan;\r\n    \r\n    if (weeklyIncrease > 2) {\r\n      riskScore += 15;\r\n      riskFactors.push('Rapid volume progression');\r\n    }\r\n  }\r\n  \r\n  // Motivation and wellbeing\r\n  if (motivationLevel <= 3) {\r\n    riskScore += 15;\r\n    riskFactors.push('Low motivation/enjoyment');\r\n  }\r\n  \r\n  // Injury risk\r\n  if (injuryRisk >= 7) {\r\n    riskScore += 15;\r\n    riskFactors.push('High injury risk indicators');\r\n  }\r\n  \r\n  // Current training state\r\n  if (trainingState.consecutiveMRVWeeks >= 2) {\r\n    riskScore += 10;\r\n    riskFactors.push('Consecutive weeks at MRV');\r\n  }\r\n  \r\n  // Determine risk level\r\n  let riskLevel = '';\r\n  let recommendations = [];\r\n  \r\n  if (riskScore <= 20) {\r\n    riskLevel = 'low';\r\n    recommendations.push('Continue progressive overload');\r\n    recommendations.push('Monitor for early warning signs');\r\n  } else if (riskScore <= 40) {\r\n    riskLevel = 'moderate';\r\n    recommendations.push('Slow progression rate');\r\n    recommendations.push('Increase recovery focus');\r\n    recommendations.push('Consider planned deload');\r\n  } else if (riskScore <= 70) {\r\n    riskLevel = 'high';\r\n    recommendations.push('Implement deload week');\r\n    recommendations.push('Address lifestyle stressors');\r\n    recommendations.push('Reduce training frequency');\r\n  } else {\r\n    riskLevel = 'critical';\r\n    recommendations.push('Stop training temporarily');\r\n    recommendations.push('Focus on full recovery');\r\n    recommendations.push('Consult with coach/healthcare provider');\r\n  }\r\n  \r\n  return {\r\n    riskScore,\r\n    riskLevel,\r\n    riskFactors,\r\n    recommendations,\r\n    requiresImmediateAction: riskScore > 60\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate optimal session frequency for a muscle\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} constraints - Training constraints\r\n * @returns {Object} - Frequency recommendation\r\n */\r\nfunction calculateOptimalFrequency(muscle, constraints = {}) {\r\n  const {\r\n    availableDays = 6,\r\n    currentVolume = null,\r\n    recoveryCapacity = 'normal', // low, normal, high\r\n    trainingAge = 'intermediate' // beginner, intermediate, advanced\r\n  } = constraints;\r\n  \r\n  const volume = currentVolume || trainingState.currentWeekSets[muscle];\r\n  const landmarks = trainingState.volumeLandmarks[muscle];\r\n  \r\n  // Base frequency recommendations by training age\r\n  const baseFrequencies = {\r\n    beginner: { min: 2, max: 3 },\r\n    intermediate: { min: 2, max: 4 },\r\n    advanced: { min: 3, max: 5 }\r\n  };\r\n  \r\n  const ageRecommendation = baseFrequencies[trainingAge];\r\n  \r\n  // Adjust for volume\r\n  let volumeFrequency = 2;\r\n  if (volume >= landmarks.MAV) {\r\n    volumeFrequency = Math.min(4, Math.ceil(volume / 6)); // ~6 sets per session max at high volumes\r\n  } else if (volume >= landmarks.MEV) {\r\n    volumeFrequency = Math.min(3, Math.ceil(volume / 8)); // ~8 sets per session\r\n  } else {\r\n    volumeFrequency = Math.max(2, Math.ceil(volume / 10)); // ~10 sets per session at lower volumes\r\n  }\r\n  \r\n  // Adjust for recovery capacity\r\n  const recoveryMultipliers = {\r\n    low: 0.8,\r\n    normal: 1.0,\r\n    high: 1.2\r\n  };\r\n  \r\n  const adjustedFrequency = Math.round(volumeFrequency * recoveryMultipliers[recoveryCapacity]);\r\n  \r\n  // Constrain to available days and training age limits\r\n  const recommendedFrequency = Math.max(\r\n    ageRecommendation.min,\r\n    Math.min(ageRecommendation.max, adjustedFrequency, availableDays)\r\n  );\r\n  \r\n  // Calculate sets per session\r\n  const setsPerSession = Math.ceil(volume / recommendedFrequency);\r\n  \r\n  return {\r\n    muscle,\r\n    recommendedFrequency,\r\n    setsPerSession,\r\n    totalVolume: volume,\r\n    reasoning: [\r\n      `${volume} weekly sets`,\r\n      `${recoveryCapacity} recovery capacity`,\r\n      `${trainingAge} training age`,\r\n      `${availableDays} available days`\r\n    ],\r\n    alternatives: {\r\n      conservative: Math.max(2, recommendedFrequency - 1),\r\n      aggressive: Math.min(availableDays, recommendedFrequency + 1)\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Enhanced fatigue detection using SFR and rep strength drop\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} feedback - Feedback data with soreness, jointAche, perfChange, stimulus, lastLoad\r\n * @param {Object} state - Training state singleton\r\n * @returns {boolean} - True if high fatigue detected\r\n */\r\nfunction isHighFatigue(muscle, feedback, state) {\r\n  // Calculate total fatigue score\r\n  const soreness = feedback.soreness || 0;\r\n  const jointAche = feedback.jointAche || 0;\r\n  const perfChange = feedback.perfChange || 0;\r\n  \r\n  // Fatigue components: soreness + joint ache + performance decline penalty\r\n  const fatigue = soreness + jointAche + (perfChange < 0 ? 2 : 0);\r\n  \r\n  // Stimulus components: pump + disruption (mind-muscle connection less relevant for fatigue)\r\n  const stimulus = (feedback.pump || 0) + (feedback.disruption || 0);\r\n  \r\n  // Calculate Stimulus-to-Fatigue Ratio (SFR)\r\n  const SFR = stimulus / (fatigue || 1); // Avoid zero division\r\n  \r\n  // Check for rep strength drop\r\n  const strengthDrop = feedback.lastLoad ? state.repStrengthDrop(muscle, feedback.lastLoad) : false;\r\n  \r\n  // High fatigue if SFR ≤ 1 OR strength drop detected\r\n  return (SFR <= 1) || strengthDrop;\r\n}\r\n\r\nexport {\r\n  analyzeFrequency,\r\n  calculateOptimalFrequency,\r\n  isHighFatigue\r\n};\r\n","/**\r\n * Renaissance Periodization Effort Management\r\n * Handles RIR (Reps In Reserve) calculations and effort progression\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Weekly RIR Schedule for Mesocycle Progression\r\n * Standard RP approach: [3, 2, 1, 0] across 4-6 week mesocycle\r\n */\r\nconst RIR_SCHEDULE = {\r\n  4: [3, 2, 1, 0],        // 4-week meso\r\n  5: [3, 2.5, 2, 1, 0],   // 5-week meso  \r\n  6: [3, 2.5, 2, 1.5, 1, 0] // 6-week meso\r\n};\r\n\r\n/**\r\n * Calculate target RIR based on meso progression\r\n * @param {number} weekNumber - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @param {number} startRIR - Starting RIR (default 3)\r\n * @param {number} endRIR - Ending RIR (default 0.5)\r\n * @returns {Object} - RIR calculation result\r\n */\r\nfunction calculateTargetRIR(weekNumber = null, mesoLength = null, startRIR = 3, endRIR = 0.5) {\r\n  const week = weekNumber || trainingState.weekNo;\r\n  const mesoLen = mesoLength || trainingState.mesoLen;\r\n  \r\n  if (week > mesoLen) {\r\n    return {\r\n      targetRIR: startRIR,\r\n      warning: 'Week exceeds mesocycle length',\r\n      progression: 0\r\n    };\r\n  }\r\n  \r\n  // Linear progression from start to end RIR\r\n  const progressionRate = (startRIR - endRIR) / (mesoLen - 1);\r\n  const targetRIR = startRIR - (progressionRate * (week - 1));\r\n  const clampedRIR = Math.max(endRIR, Math.min(startRIR, targetRIR));\r\n  \r\n  // Calculate progression percentage\r\n  const progression = ((week - 1) / (mesoLen - 1)) * 100;\r\n    let intensityLevel = 'moderate';\r\n  let advice = '';\r\n  \r\n  if (clampedRIR >= 2.5) {\r\n    intensityLevel = 'low';\r\n    advice = 'Focus on form and mind-muscle connection';\r\n  } else if (clampedRIR >= 2.0) {\r\n    intensityLevel = 'moderate';\r\n    advice = 'Balanced effort - challenge without excessive fatigue';\r\n  } else if (clampedRIR >= 1.0) {\r\n    intensityLevel = 'high';\r\n    advice = 'High effort - monitor recovery closely';\r\n  } else {\r\n    intensityLevel = 'maximum';\r\n    advice = 'Maximum effort - deload approaching';\r\n  }\r\n  \r\n  return {\r\n    targetRIR: Math.round(clampedRIR * 2) / 2, // Round to nearest 0.5\r\n    intensityLevel,\r\n    advice,\r\n    progression: Math.round(progression),\r\n    week,\r\n    mesoLength: mesoLen\r\n  };\r\n}\r\n\r\n/**\r\n * Get scheduled RIR for specific week based on mesocycle length\r\n * @param {number} week - Current week (1-based)\r\n * @param {number} mesoLength - Total weeks in mesocycle\r\n * @returns {number} - Target RIR for the week\r\n */\r\nfunction getScheduledRIR(week, mesoLength) {\r\n  const schedule = RIR_SCHEDULE[mesoLength];\r\n  if (!schedule) {\r\n    // Fallback to linear progression for non-standard lengths\r\n    const startRIR = 3;\r\n    const endRIR = 0;\r\n    const progressionRate = (startRIR - endRIR) / (mesoLength - 1);\r\n    return Math.max(endRIR, startRIR - (progressionRate * (week - 1)));\r\n  }\r\n  \r\n  // Return scheduled RIR, clamping to valid week range\r\n  const weekIndex = Math.min(week - 1, schedule.length - 1);\r\n  return schedule[weekIndex];\r\n}\r\n\r\n/**\r\n * Validate actual RIR against target\r\n * @param {number} actualRIR - Actual RIR reported\r\n * @param {number} targetRIR - Target RIR for the week\r\n * @param {number} tolerance - Acceptable deviation (default ±1)\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateEffortLevel(actualRIR, targetRIR = null, tolerance = 1) {\r\n  const target = targetRIR || trainingState.getTargetRIR();\r\n  const deviation = Math.abs(actualRIR - target);\r\n  const isWithinTolerance = deviation <= tolerance;\r\n  \r\n  let feedback = '';\r\n  let recommendation = '';\r\n  let urgency = 'normal';\r\n  \r\n  if (isWithinTolerance) {\r\n    feedback = `On target (${actualRIR} vs ${target} RIR)`;\r\n    recommendation = 'Continue current effort level';\r\n    urgency = 'normal';\r\n  } else if (actualRIR > target) {\r\n    const difference = actualRIR - target;\r\n    feedback = `Too easy (${difference} RIR above target)`;\r\n    recommendation = difference > 2 ? 'Increase weight significantly' : 'Increase weight moderately';\r\n    urgency = difference > 2 ? 'high' : 'medium';\r\n  } else {\r\n    const difference = target - actualRIR;\r\n    feedback = `Too hard (${difference} RIR below target)`;\r\n    recommendation = difference > 2 ? 'Reduce weight significantly' : 'Reduce weight slightly';\r\n    urgency = difference > 2 ? 'high' : 'medium';\r\n  }\r\n  \r\n  return {\r\n    actualRIR,\r\n    targetRIR: target,\r\n    deviation,\r\n    isWithinTolerance,\r\n    feedback,\r\n    recommendation,\r\n    urgency\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate effort progression for next session\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} lastSession - Last session data\r\n * @returns {Object} - Effort progression recommendation\r\n */\r\nfunction getEffortProgression(muscle, lastSession) {\r\n  const currentRIR = trainingState.getTargetRIR();\r\n  const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n  \r\n  let weightRecommendation = 'maintain';\r\n  let rirAdjustment = 0;\r\n  let advice = '';\r\n  \r\n  // Base progression on last session performance\r\n  if (lastSession.actualRIR < lastSession.targetRIR - 1.5) {\r\n    // Too hard last time\r\n    weightRecommendation = 'decrease';\r\n    rirAdjustment = 0.5;\r\n    advice = 'Reduce weight to hit target RIR';\r\n  } else if (lastSession.actualRIR > lastSession.targetRIR + 1.5) {\r\n    // Too easy last time\r\n    weightRecommendation = 'increase';\r\n    rirAdjustment = -0.5;\r\n    advice = 'Increase weight to hit target RIR';\r\n  } else {\r\n    // On target\r\n    if (volumeStatus === 'maximum') {\r\n      advice = 'Maintain weight - at volume limit';\r\n    } else {\r\n      advice = 'Good effort level - continue progression';\r\n    }\r\n  }\r\n  \r\n  // Adjust based on volume status\r\n  if (volumeStatus === 'maximum' && weightRecommendation === 'increase') {\r\n    weightRecommendation = 'maintain';\r\n    advice = 'At MRV - avoid adding intensity stress';\r\n  }\r\n  \r\n  const projectedRIR = Math.max(0, currentRIR + rirAdjustment);\r\n  \r\n  return {\r\n    muscle,\r\n    currentTargetRIR: currentRIR,\r\n    projectedRIR,\r\n    weightRecommendation,\r\n    advice,\r\n    volumeStatus\r\n  };\r\n}\r\n\r\n/**\r\n * Process weekly load adjustments based on RIR feedback\r\n * @param {Object} weeklyFeedback - Feedback data for all muscles\r\n * @returns {Object} - Load adjustment recommendations\r\n */\r\nfunction processWeeklyLoadAdjustments(weeklyFeedback) {\r\n  const currentWeek = trainingState.weekNo;\r\n  const targetRIR = getScheduledRIR(currentWeek, trainingState.mesoLen);\r\n  const adjustments = {};\r\n  let totalMusclesAdjusted = 0;\r\n  \r\n  Object.keys(weeklyFeedback).forEach(muscle => {\r\n    const feedback = weeklyFeedback[muscle];\r\n    const avgActualRIR = feedback.averageRIR || targetRIR;\r\n    const rirDeviation = avgActualRIR - targetRIR;\r\n    \r\n    let loadAdjustment = 0; // Percentage change\r\n    let reason = '';\r\n    \r\n    // Determine load adjustment based on RIR deviation\r\n    if (Math.abs(rirDeviation) <= 0.5) {\r\n      // On target - small progressive increase\r\n      loadAdjustment = 2.5; // 2.5% increase\r\n      reason = 'On target - progressive overload';\r\n    } else if (rirDeviation > 0.5) {\r\n      // Too easy - increase load significantly\r\n      if (rirDeviation > 2) {\r\n        loadAdjustment = 10; // 10% increase\r\n        reason = 'Too easy - major increase needed';\r\n      } else if (rirDeviation > 1) {\r\n        loadAdjustment = 7.5; // 7.5% increase\r\n        reason = 'Too easy - moderate increase';\r\n      } else {\r\n        loadAdjustment = 5; // 5% increase\r\n        reason = 'Slightly easy - small increase';\r\n      }\r\n    } else {\r\n      // Too hard - decrease load\r\n      if (rirDeviation < -2) {\r\n        loadAdjustment = -10; // 10% decrease\r\n        reason = 'Too hard - major decrease needed';\r\n      } else if (rirDeviation < -1) {\r\n        loadAdjustment = -5; // 5% decrease\r\n        reason = 'Too hard - moderate decrease';\r\n      } else {\r\n        loadAdjustment = -2.5; // 2.5% decrease\r\n        reason = 'Slightly hard - small decrease';\r\n      }\r\n    }\r\n    \r\n    // Factor in performance trends\r\n    const performanceTrend = feedback.performanceTrend || 0; // -1, 0, 1\r\n    if (performanceTrend < 0) {\r\n      loadAdjustment -= 2.5; // Reduce load if performance declining\r\n      reason += ' (performance declining)';\r\n    } else if (performanceTrend > 0 && rirDeviation >= 0) {\r\n      loadAdjustment += 2.5; // Increase more if performance improving\r\n      reason += ' (performance improving)';\r\n    }\r\n    \r\n    // Cap adjustments at ±15%\r\n    loadAdjustment = Math.max(-15, Math.min(15, loadAdjustment));\r\n    \r\n    adjustments[muscle] = {\r\n      currentRIR: avgActualRIR,\r\n      targetRIR,\r\n      deviation: rirDeviation,\r\n      loadAdjustment,\r\n      reason,\r\n      urgency: Math.abs(rirDeviation) > 1.5 ? 'high' : \r\n               Math.abs(rirDeviation) > 1 ? 'medium' : 'low'\r\n    };\r\n    \r\n    if (Math.abs(loadAdjustment) > 2.5) {\r\n      totalMusclesAdjusted++;\r\n    }\r\n  });\r\n  \r\n  return {\r\n    week: currentWeek,\r\n    targetRIR,\r\n    adjustments,\r\n    summary: {\r\n      totalMuscles: Object.keys(weeklyFeedback).length,\r\n      musclesAdjusted: totalMusclesAdjusted,\r\n      avgLoadChange: Object.values(adjustments).reduce((sum, adj) => sum + adj.loadAdjustment, 0) / Object.keys(adjustments).length\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Generate load progression recommendations for next week\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} sessionHistory - Recent session data\r\n * @returns {Object} - Load progression recommendation\r\n */\r\nfunction getLoadProgression(muscle, sessionHistory = {}) {\r\n  const currentWeek = trainingState.weekNo;\r\n  const nextWeek = currentWeek + 1;\r\n  const currentRIR = getScheduledRIR(currentWeek, trainingState.mesoLen);\r\n  const nextRIR = getScheduledRIR(nextWeek, trainingState.mesoLen);\r\n  \r\n  const rirDrop = currentRIR - nextRIR;\r\n  const recentPerformance = sessionHistory.averageRIR || currentRIR;\r\n  const performanceDeviation = recentPerformance - currentRIR;\r\n  \r\n  let loadIncrease = 0;\r\n  let recommendation = '';\r\n  \r\n  if (rirDrop > 0) {\r\n    // RIR is dropping - need to increase intensity\r\n    const baseIncrease = rirDrop * 5; // ~5% per RIR drop\r\n    \r\n    // Adjust based on recent performance\r\n    if (performanceDeviation > 1) {\r\n      // Performing too easy - can increase more aggressively\r\n      loadIncrease = baseIncrease + 5;\r\n      recommendation = `Increase load ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - currently too easy`;\r\n    } else if (performanceDeviation < -1) {\r\n      // Struggling - increase more conservatively\r\n      loadIncrease = baseIncrease * 0.5;\r\n      recommendation = `Conservative increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR}) - struggling with current load`;\r\n    } else {\r\n      // On target - standard progression\r\n      loadIncrease = baseIncrease;\r\n      recommendation = `Standard increase ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\r\n    }\r\n  } else if (rirDrop === 0) {\r\n    // Same RIR - small progressive overload\r\n    loadIncrease = 2.5;\r\n    recommendation = `Small progressive overload ${loadIncrease.toFixed(1)}% for Week ${nextWeek} (RIR ${nextRIR})`;\r\n  } else {\r\n    // RIR increasing (shouldn't happen in normal progression)\r\n    loadIncrease = 0;\r\n    recommendation = `Maintain current load for Week ${nextWeek} (RIR ${nextRIR})`;\r\n  }\r\n  \r\n  // Volume status considerations\r\n  const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n  if (volumeStatus === 'maximum') {\r\n    loadIncrease *= 0.75; // Reduce load increases when at MRV\r\n    recommendation += ' (reduced due to MRV)';\r\n  }\r\n  \r\n  return {\r\n    muscle,\r\n    currentWeek,\r\n    nextWeek,\r\n    currentRIR,\r\n    nextRIR,\r\n    rirDrop,\r\n    loadIncrease: Math.round(loadIncrease * 10) / 10, // Round to 1 decimal\r\n    recommendation,\r\n    volumeStatus\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate autoregulation recommendations\r\n * @param {Object} sessionFeedback - Real-time session feedback\r\n * @returns {Object} - Autoregulation advice\r\n */\r\nfunction getAutoregulationAdvice(sessionFeedback) {\r\n  const { actualRIR, plannedRIR, setNumber, totalPlannedSets, muscle } = sessionFeedback;\r\n  const deviation = actualRIR - plannedRIR;\r\n  \r\n  let advice = '';\r\n  let action = 'continue';\r\n  let weightAdjustment = 0; // Percentage\r\n  \r\n  // Early sets (first 1/3)\r\n  if (setNumber <= Math.ceil(totalPlannedSets / 3)) {\r\n    if (deviation > 1.5) {\r\n      advice = 'Weight too light - increase by 5-10%';\r\n      action = 'increase_weight';\r\n      weightAdjustment = 7.5;\r\n    } else if (deviation < -1.5) {\r\n      advice = 'Weight too heavy - decrease by 5-10%';\r\n      action = 'decrease_weight';\r\n      weightAdjustment = -7.5;\r\n    } else {\r\n      advice = 'Weight appropriate - continue';\r\n    }\r\n  }\r\n  // Middle sets (middle 1/3)\r\n  else if (setNumber <= Math.ceil(totalPlannedSets * 2 / 3)) {\r\n    if (deviation > 2) {\r\n      advice = 'Still too easy - increase weight';\r\n      action = 'increase_weight';\r\n      weightAdjustment = 5;\r\n    } else if (deviation < -2) {\r\n      advice = 'Too fatiguing - consider stopping early';\r\n      action = 'consider_stopping';\r\n      weightAdjustment = 0;\r\n    } else {\r\n      advice = 'Good progression - continue';\r\n    }\r\n  }\r\n  // Final sets (last 1/3)\r\n  else {\r\n    if (deviation < -1) {\r\n      advice = 'Very fatiguing - consider stopping to preserve recovery';\r\n      action = 'consider_stopping';\r\n    } else if (deviation > 2) {\r\n      advice = 'Could push harder - add 1-2 sets if recovering well';\r\n      action = 'consider_adding_sets';\r\n    } else {\r\n      advice = 'Appropriate fatigue for final sets';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    setNumber,\r\n    totalPlannedSets,\r\n    actualRIR,\r\n    plannedRIR,\r\n    deviation,\r\n    advice,\r\n    action,\r\n    weightAdjustment\r\n  };\r\n}\r\n\r\n/**\r\n * Generate weekly effort summary\r\n * @returns {Object} - Weekly effort analysis\r\n */\r\nfunction getWeeklyEffortSummary() {\r\n  const currentWeek = trainingState.weekNo;\r\n  const mesoLength = trainingState.mesoLen;\r\n  const targetRIR = trainingState.getTargetRIR();\r\n  \r\n  const weeklyAdvice = [];\r\n  \r\n  // Week-specific advice\r\n  if (currentWeek === 1) {\r\n    weeklyAdvice.push('Focus on technique and mind-muscle connection');\r\n    weeklyAdvice.push('Establish baseline weights for the mesocycle');\r\n  } else if (currentWeek === mesoLength) {\r\n    weeklyAdvice.push('Peak intensity week - push close to failure');\r\n    weeklyAdvice.push('Prepare for upcoming deload');\r\n  } else if (currentWeek > mesoLength * 0.75) {\r\n    weeklyAdvice.push('High intensity phase - monitor recovery closely');\r\n    weeklyAdvice.push('Focus on performance over volume additions');\r\n  } else {\r\n    weeklyAdvice.push('Progressive overload phase - gradually increase demands');\r\n    weeklyAdvice.push('Balance volume and intensity progression');\r\n  }\r\n  \r\n  return {\r\n    currentWeek,\r\n    mesoLength,\r\n    targetRIR,\r\n    weeklyAdvice,\r\n    phaseDescription: getPhaseDescription(currentWeek, mesoLength)\r\n  };\r\n}\r\n\r\n/**\r\n * Get phase description based on week\r\n * @param {number} week - Current week\r\n * @param {number} mesoLength - Total meso length\r\n * @returns {string} - Phase description\r\n */\r\nfunction getPhaseDescription(week, mesoLength) {\r\n  const percentage = (week / mesoLength) * 100;\r\n  \r\n  if (percentage <= 25) {\r\n    return 'Accumulation Phase - Building foundation';\r\n  } else if (percentage <= 60) {\r\n    return 'Progression Phase - Steady overload';\r\n  } else if (percentage <= 85) {\r\n    return 'Intensification Phase - High demands';\r\n  } else {\r\n    return 'Peak Phase - Maximum effort';\r\n  }\r\n}\r\n\r\n/**\r\n * Simulate weekly feedback for auto-progression demo\r\n * @param {Array} muscles - List of muscle groups\r\n * @param {number} week - Current week\r\n * @returns {Object} - Simulated weekly feedback\r\n */\r\nfunction simulateWeeklyRIRFeedback(muscles, week) {\r\n  const targetRIR = getScheduledRIR(week, trainingState.mesoLen);\r\n  const feedback = {};\r\n  \r\n  muscles.forEach(muscle => {\r\n    const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n    \r\n    // Simulate realistic RIR deviation based on volume status and week\r\n    let rirDeviation = 0;\r\n    \r\n    if (volumeStatus === 'maximum') {\r\n      // At MRV - likely struggling more\r\n      rirDeviation = Math.random() * 1.5 - 0.5; // -0.5 to +1.0\r\n    } else if (week <= 2) {\r\n      // Early weeks - usually easier\r\n      rirDeviation = Math.random() * 1.5 + 0.5; // +0.5 to +2.0\r\n    } else if (week >= trainingState.mesoLen - 1) {\r\n      // Late weeks - getting harder\r\n      rirDeviation = Math.random() * 1.5 - 1.0; // -1.0 to +0.5\r\n    } else {\r\n      // Middle weeks - more variable\r\n      rirDeviation = Math.random() * 2 - 1; // -1.0 to +1.0\r\n    }\r\n      const simulatedRIR = Math.max(0, targetRIR + rirDeviation);\r\n    \r\n    // Generate enhanced fatigue indicators based on volume status\r\n    let jointAche = 0;\r\n    let perfChange = 0;\r\n    let lastLoad = 100; // Default baseline\r\n    let soreness = 1; // Default mild soreness\r\n    \r\n    if (volumeStatus === 'maximum') {\r\n      jointAche = Math.floor(Math.random() * 3) + 1; // 1-3 (mild to pain)\r\n      perfChange = Math.random() > 0.6 ? -1 : 0; // 40% chance of performance drop\r\n      lastLoad = trainingState.baselineStrength[muscle] * 0.95; // 5% strength drop\r\n      soreness = Math.floor(Math.random() * 2) + 2; // 2-3 (moderate to high)\r\n    } else if (volumeStatus === 'high') {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.8 ? -1 : (Math.random() > 0.5 ? 0 : 1); // Mixed performance\r\n      lastLoad = trainingState.baselineStrength[muscle] * 0.98; // 2% strength drop\r\n      soreness = Math.floor(Math.random() * 2) + 1; // 1-2 (mild to moderate)\r\n    } else {\r\n      jointAche = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n      perfChange = Math.random() > 0.7 ? 1 : 0; // 30% chance of PR\r\n      lastLoad = trainingState.baselineStrength[muscle] * 1.02; // 2% strength increase\r\n      soreness = Math.floor(Math.random() * 2); // 0-1 (none to mild)\r\n    }\r\n    \r\n    feedback[muscle] = {\r\n      actualRIR: simulatedRIR,\r\n      targetRIR,\r\n      averageRIR: Math.round(simulatedRIR * 10) / 10,\r\n      performanceTrend: week > 1 ? (Math.random() > 0.7 ? (Math.random() > 0.5 ? 1 : -1) : 0) : 0,\r\n      sessions: 2, // Assume 2 sessions per week\r\n      volumeStatus,\r\n      // Enhanced fatigue detection fields\r\n      soreness,\r\n      jointAche,\r\n      perfChange,\r\n      lastLoad: Math.round(lastLoad * 10) / 10,\r\n      pump: Math.min(3, Math.floor(Math.random() * 3) + 1),\r\n      disruption: Math.min(3, Math.floor(Math.random() * 3) + 1)\r\n    };\r\n  });\r\n  \r\n  return feedback;\r\n}\r\n\r\nexport {\r\n  calculateTargetRIR,\r\n  validateEffortLevel,\r\n  getEffortProgression,\r\n  getWeeklyEffortSummary,\r\n  getAutoregulationAdvice,\r\n  getScheduledRIR,\r\n  processWeeklyLoadAdjustments,\r\n  getLoadProgression,\r\n  simulateWeeklyRIRFeedback\r\n};\r\n","/**\r\n * Training Validation Helpers\r\n * Provides validation for loads, sets, and training parameters\r\n */\r\n\r\n/**\r\n * Validate load percentage (1RM)\r\n * @param {number} loadPercent - Load as percentage of 1RM\r\n * @param {string} context - Training context (hypertrophy, strength, power)\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateLoad(loadPercent, context = 'hypertrophy') {\r\n  const load = parseFloat(loadPercent);\r\n  \r\n  if (isNaN(load) || load <= 0) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'Load must be a positive number',\r\n      recommendation: 'Enter a valid load percentage'\r\n    };\r\n  }\r\n  \r\n  // Context-specific load ranges\r\n  const loadRanges = {\r\n    hypertrophy: { min: 30, max: 85, optimal: [65, 80] },\r\n    strength: { min: 70, max: 100, optimal: [85, 95] },\r\n    power: { min: 30, max: 70, optimal: [40, 60] },\r\n    endurance: { min: 20, max: 60, optimal: [30, 50] }\r\n  };\r\n  \r\n  const range = loadRanges[context] || loadRanges.hypertrophy;\r\n  \r\n  let isValid = true;\r\n  let warning = '';\r\n  let recommendation = '';\r\n  let severity = 'normal';\r\n  \r\n  if (load < range.min) {\r\n    isValid = false;\r\n    warning = `Load too light for ${context} (${load}% < ${range.min}%)`;\r\n    recommendation = `Increase to ${range.optimal[0]}-${range.optimal[1]}% for optimal ${context} adaptations`;\r\n    severity = 'high';\r\n  } else if (load > range.max) {\r\n    isValid = false;\r\n    warning = `Load too heavy for ${context} (${load}% > ${range.max}%)`;\r\n    recommendation = `Reduce to ${range.optimal[0]}-${range.optimal[1]}% for safer ${context} training`;\r\n    severity = 'high';\r\n  } else if (load < range.optimal[0]) {\r\n    warning = `Load is light for ${context} (${load}% < ${range.optimal[0]}%)`;\r\n    recommendation = `Consider increasing to ${range.optimal[0]}-${range.optimal[1]}% for better stimulus`;\r\n    severity = 'medium';\r\n  } else if (load > range.optimal[1]) {\r\n    warning = `Load is heavy for ${context} (${load}% > ${range.optimal[1]}%)`;\r\n    recommendation = `Consider reducing to ${range.optimal[0]}-${range.optimal[1]}% for better recovery`;\r\n    severity = 'medium';\r\n  } else {\r\n    recommendation = `Good load for ${context} training`;\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    load,\r\n    context,\r\n    warning,\r\n    recommendation,\r\n    severity,\r\n    range,\r\n    isOptimal: load >= range.optimal[0] && load <= range.optimal[1]\r\n  };\r\n}\r\n\r\n/**\r\n * Validate RIR (Reps in Reserve)\r\n * @param {number} rir - Reps in reserve\r\n * @param {number} targetRIR - Target RIR for the session\r\n * @param {string} context - Training context\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateRIR(rir, targetRIR, context = 'hypertrophy') {\r\n  const actualRIR = parseFloat(rir);\r\n  const target = parseFloat(targetRIR);\r\n  \r\n  if (isNaN(actualRIR) || actualRIR < 0) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'RIR must be 0 or greater',\r\n      recommendation: 'Enter how many more reps you could have done'\r\n    };\r\n  }\r\n  \r\n  if (actualRIR > 10) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'RIR too high (>10) - load likely too light',\r\n      recommendation: 'Increase weight significantly'\r\n    };\r\n  }\r\n  \r\n  const deviation = Math.abs(actualRIR - target);\r\n  let isValid = true;\r\n  let warning = '';\r\n  let recommendation = '';\r\n  let severity = 'normal';\r\n  \r\n  // Tolerance varies by context\r\n  const tolerances = {\r\n    hypertrophy: 1.0,\r\n    strength: 0.5,\r\n    power: 1.5,\r\n    endurance: 2.0\r\n  };\r\n  \r\n  const tolerance = tolerances[context] || tolerances.hypertrophy;\r\n  \r\n  if (deviation <= tolerance) {\r\n    recommendation = `On target (${actualRIR} vs ${target} RIR)`;\r\n  } else if (actualRIR > target) {\r\n    const difference = actualRIR - target;\r\n    warning = `Too easy (${difference.toFixed(1)} RIR above target)`;\r\n    \r\n    if (difference > 2) {\r\n      recommendation = 'Increase weight significantly (10-15%)';\r\n      severity = 'high';\r\n    } else {\r\n      recommendation = 'Increase weight moderately (5-10%)';\r\n      severity = 'medium';\r\n    }\r\n  } else {\r\n    const difference = target - actualRIR;\r\n    warning = `Too hard (${difference.toFixed(1)} RIR below target)`;\r\n    \r\n    if (difference > 2) {\r\n      recommendation = 'Reduce weight significantly (10-15%)';\r\n      severity = 'high';\r\n    } else {\r\n      recommendation = 'Reduce weight slightly (5-10%)';\r\n      severity = 'medium';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    actualRIR,\r\n    targetRIR: target,\r\n    deviation,\r\n    warning,\r\n    recommendation,\r\n    severity,\r\n    isOnTarget: deviation <= tolerance\r\n  };\r\n}\r\n\r\n/**\r\n * Validate set count within volume landmarks\r\n * @param {number} sets - Proposed set count\r\n * @param {Object} landmarks - Volume landmarks {MV, MEV, MAV, MRV}\r\n * @param {boolean} allowOverreach - Allow sets above MRV\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateSets(sets, landmarks, allowOverreach = false) {\r\n  const setCount = parseInt(sets, 10);\r\n  \r\n  if (isNaN(setCount) || setCount < 0) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'Set count must be 0 or greater',\r\n      recommendation: 'Enter a valid number of sets'\r\n    };\r\n  }\r\n  \r\n  const { MV = 0, MEV, MAV, MRV } = landmarks;\r\n  \r\n  let isValid = true;\r\n  let warning = '';\r\n  let recommendation = '';\r\n  let severity = 'normal';\r\n  let zone = '';\r\n  \r\n  if (setCount < MV) {\r\n    zone = 'below-maintenance';\r\n    warning = `Below maintenance volume (${setCount} < ${MV})`;\r\n    recommendation = 'Increase sets for minimal stimulus';\r\n    severity = 'high';\r\n  } else if (setCount < MEV) {\r\n    zone = 'maintenance';\r\n    warning = `In maintenance zone (${setCount} < ${MEV})`;\r\n    recommendation = 'Increase sets for growth stimulus';\r\n    severity = 'medium';\r\n  } else if (setCount <= MAV) {\r\n    zone = 'optimal';\r\n    recommendation = `Optimal volume zone (${MEV}-${MAV} sets)`;\r\n  } else if (setCount <= MRV) {\r\n    zone = 'high';\r\n    warning = `High volume zone (${setCount} approaching ${MRV})`;\r\n    recommendation = 'Monitor recovery closely';\r\n    severity = 'medium';\r\n  } else {\r\n    zone = 'maximum';\r\n    \r\n    if (!allowOverreach) {\r\n      isValid = false;\r\n      warning = `Above maximum recoverable volume (${setCount} > ${MRV})`;\r\n      recommendation = 'Reduce sets or plan deload';\r\n      severity = 'high';\r\n    } else {\r\n      warning = `Overreaching territory (${setCount} > ${MRV})`;\r\n      recommendation = 'Short-term only - deload soon';\r\n      severity = 'high';\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    sets: setCount,\r\n    landmarks,\r\n    zone,\r\n    warning,\r\n    recommendation,\r\n    severity,\r\n    percentage: Math.round((setCount / MRV) * 100)\r\n  };\r\n}\r\n\r\n/**\r\n * Validate training frequency\r\n * @param {number} frequency - Sessions per week\r\n * @param {number} weeklyVolume - Total weekly sets\r\n * @param {string} muscleGroup - Muscle group name\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateFrequency(frequency, weeklyVolume, muscleGroup = '') {\r\n  const freq = parseInt(frequency, 10);\r\n  const volume = parseInt(weeklyVolume, 10);\r\n  \r\n  if (isNaN(freq) || freq < 1) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'Frequency must be at least 1 session per week',\r\n      recommendation: 'Train each muscle at least once per week'\r\n    };\r\n  }\r\n  \r\n  if (isNaN(volume) || volume < 0) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'Weekly volume must be specified',\r\n      recommendation: 'Enter total weekly sets'\r\n    };\r\n  }\r\n  \r\n  const setsPerSession = volume / freq;\r\n  let isValid = true;\r\n  let warning = '';\r\n  let recommendation = '';\r\n  let severity = 'normal';\r\n  \r\n  // General guidelines for sets per session\r\n  if (setsPerSession > 20) {\r\n    isValid = false;\r\n    warning = `Too many sets per session (${setsPerSession.toFixed(1)})`;\r\n    recommendation = 'Increase frequency or reduce volume';\r\n    severity = 'high';\r\n  } else if (setsPerSession > 12) {\r\n    warning = `High sets per session (${setsPerSession.toFixed(1)})`;\r\n    recommendation = 'Consider increasing frequency';\r\n    severity = 'medium';\r\n  } else if (setsPerSession < 2 && volume >= 6) {\r\n    warning = `Very low sets per session (${setsPerSession.toFixed(1)})`;\r\n    recommendation = 'Consider reducing frequency';\r\n    severity = 'medium';\r\n  } else {\r\n    recommendation = `Good distribution (${setsPerSession.toFixed(1)} sets/session)`;\r\n  }\r\n  \r\n  // Frequency-specific advice\r\n  let frequencyAdvice = '';\r\n  if (freq === 1) {\r\n    frequencyAdvice = 'Once weekly - ensure high quality';\r\n  } else if (freq === 2) {\r\n    frequencyAdvice = 'Twice weekly - good for most goals';\r\n  } else if (freq === 3) {\r\n    frequencyAdvice = 'Three times weekly - high frequency';\r\n  } else if (freq >= 4) {\r\n    frequencyAdvice = 'Very high frequency - monitor recovery';\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    frequency: freq,\r\n    weeklyVolume: volume,\r\n    setsPerSession: Math.round(setsPerSession * 10) / 10,\r\n    warning,\r\n    recommendation,\r\n    frequencyAdvice,\r\n    severity,\r\n    muscleGroup\r\n  };\r\n}\r\n\r\n/**\r\n * Validate mesocycle length\r\n * @param {number} weeks - Mesocycle length in weeks\r\n * @param {string} goal - Training goal\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateMesocycleLength(weeks, goal = 'hypertrophy') {\r\n  const mesoLength = parseInt(weeks, 10);\r\n  \r\n  if (isNaN(mesoLength) || mesoLength < 1) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'Mesocycle must be at least 1 week',\r\n      recommendation: 'Enter a valid mesocycle length'\r\n    };\r\n  }\r\n  \r\n  // Goal-specific recommendations\r\n  const recommendations = {\r\n    hypertrophy: { min: 3, max: 6, optimal: 4 },\r\n    strength: { min: 2, max: 8, optimal: 4 },\r\n    power: { min: 2, max: 4, optimal: 3 },\r\n    endurance: { min: 4, max: 12, optimal: 6 }\r\n  };\r\n  \r\n  const rec = recommendations[goal] || recommendations.hypertrophy;\r\n  \r\n  let isValid = true;\r\n  let warning = '';\r\n  let recommendation = '';\r\n  let severity = 'normal';\r\n  \r\n  if (mesoLength < rec.min) {\r\n    warning = `Short mesocycle for ${goal} (${mesoLength} < ${rec.min} weeks)`;\r\n    recommendation = `Consider ${rec.optimal} weeks for better ${goal} adaptations`;\r\n    severity = 'medium';\r\n  } else if (mesoLength > rec.max) {\r\n    warning = `Long mesocycle for ${goal} (${mesoLength} > ${rec.max} weeks)`;\r\n    recommendation = `Consider ${rec.optimal} weeks to prevent overreaching`;\r\n    severity = 'medium';\r\n  } else if (mesoLength === rec.optimal) {\r\n    recommendation = `Optimal length for ${goal} training`;\r\n  } else {\r\n    recommendation = `Good length for ${goal} training`;\r\n  }\r\n  \r\n  return {\r\n    isValid,\r\n    weeks: mesoLength,\r\n    goal,\r\n    warning,\r\n    recommendation,\r\n    severity,\r\n    isOptimal: mesoLength === rec.optimal,\r\n    range: rec\r\n  };\r\n}\r\n\r\n/**\r\n * Validate input ranges for UI components\r\n * @param {*} value - Input value\r\n * @param {Object} constraints - Validation constraints\r\n * @returns {Object} - Validation result\r\n */\r\nfunction validateInputRange(value, constraints) {\r\n  const {\r\n    type = 'number',\r\n    min = null,\r\n    max = null,\r\n    step = null,\r\n    required = false,\r\n    customValidator = null\r\n  } = constraints;\r\n  \r\n  // Check if required\r\n  if (required && (value === null || value === undefined || value === '')) {\r\n    return {\r\n      isValid: false,\r\n      warning: 'This field is required',\r\n      recommendation: 'Please enter a value'\r\n    };\r\n  }\r\n  \r\n  // Type validation\r\n  if (type === 'number') {\r\n    const num = parseFloat(value);\r\n    \r\n    if (isNaN(num)) {\r\n      return {\r\n        isValid: false,\r\n        warning: 'Must be a valid number',\r\n        recommendation: 'Enter a numeric value'\r\n      };\r\n    }\r\n    \r\n    if (min !== null && num < min) {\r\n      return {\r\n        isValid: false,\r\n        warning: `Must be at least ${min}`,\r\n        recommendation: `Enter a value ≥ ${min}`\r\n      };\r\n    }\r\n    \r\n    if (max !== null && num > max) {\r\n      return {\r\n        isValid: false,\r\n        warning: `Must be at most ${max}`,\r\n        recommendation: `Enter a value ≤ ${max}`\r\n      };\r\n    }\r\n    \r\n    if (step !== null && ((num * 100) % (step * 100)) !== 0) {\r\n      return {\r\n        isValid: false,\r\n        warning: `Must be in increments of ${step}`,\r\n        recommendation: `Use multiples of ${step}`\r\n      };\r\n    }\r\n  }\r\n  \r\n  // Custom validation\r\n  if (customValidator && typeof customValidator === 'function') {\r\n    const customResult = customValidator(value);\r\n    if (!customResult.isValid) {\r\n      return customResult;\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: true,\r\n    value,\r\n    recommendation: 'Valid input'\r\n  };\r\n}\r\n\r\n/**\r\n * Create comprehensive validation summary\r\n * @param {Object} formData - Complete form data\r\n * @param {Object} validationRules - Validation rules for each field\r\n * @returns {Object} - Comprehensive validation result\r\n */\r\nfunction validateTrainingSession(formData, validationRules = {}) {\r\n  const results = {};\r\n  const errors = [];\r\n  const warnings = [];\r\n  \r\n  Object.keys(formData).forEach(field => {\r\n    const value = formData[field];\r\n    const rules = validationRules[field];\r\n    \r\n    if (rules) {\r\n      let result;\r\n      \r\n      switch (rules.type) {\r\n        case 'load':\r\n          result = validateLoad(value, rules.context);\r\n          break;\r\n        case 'rir':\r\n          result = validateRIR(value, rules.target, rules.context);\r\n          break;\r\n        case 'sets':\r\n          result = validateSets(value, rules.landmarks, rules.allowOverreach);\r\n          break;\r\n        case 'frequency':\r\n          result = validateFrequency(value, rules.volume, rules.muscle);\r\n          break;\r\n        case 'meso':\r\n          result = validateMesocycleLength(value, rules.goal);\r\n          break;\r\n        default:\r\n          result = validateInputRange(value, rules);\r\n      }\r\n      \r\n      results[field] = result;\r\n      \r\n      if (!result.isValid) {\r\n        errors.push(`${field}: ${result.warning}`);\r\n      } else if (result.warning) {\r\n        warnings.push(`${field}: ${result.warning}`);\r\n      }\r\n    }\r\n  });\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    hasWarnings: warnings.length > 0,\r\n    errors,\r\n    warnings,\r\n    fieldResults: results,\r\n    summary: errors.length === 0 ? \r\n      (warnings.length === 0 ? 'All inputs valid' : 'Valid with warnings') :\r\n      `${errors.length} validation error(s)`\r\n  };\r\n}\r\n\r\nexport {\r\n  validateLoad,\r\n  validateSets,\r\n  validateMesocycleLength\r\n};\r\n","/**\r\n * Advanced Analytics & Machine Learning for Training Optimization\r\n * Implements predictive modeling and pattern recognition for enhanced program design\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Predictive Volume Landmark Optimization\r\n * Uses historical data to personalize MEV/MAV/MRV values\r\n * @param {string} muscle - Muscle group\r\n * @param {Array} historicalData - Past training responses\r\n * @returns {Object} - Optimized landmarks\r\n */\r\nfunction optimizeVolumeLandmarks(muscle, historicalData) {\r\n  if (historicalData.length < 4) {\r\n    return trainingState.volumeLandmarks[muscle]; // Need minimum data\r\n  }\r\n  \r\n  // Analyze response patterns\r\n  const stimulusResponse = historicalData.map(week => ({\r\n    volume: week.sets,\r\n    stimulus: week.avgStimulus,\r\n    fatigue: week.avgFatigue,\r\n    performance: week.performanceChange\r\n  }));\r\n  \r\n  // Find optimal volume zones based on stimulus-to-fatigue ratio\r\n  const optimalMEV = findOptimalMEV(stimulusResponse);\r\n  const optimalMAV = findOptimalMAV(stimulusResponse);\r\n  const optimalMRV = findOptimalMRV(stimulusResponse);\r\n  \r\n  const current = trainingState.volumeLandmarks[muscle];\r\n  \r\n  return {\r\n    MV: current.MV, // Maintenance stays stable\r\n    MEV: Math.round(optimalMEV),\r\n    MAV: Math.round(optimalMAV), \r\n    MRV: Math.round(optimalMRV),\r\n    confidence: calculateConfidence(historicalData.length),\r\n    lastOptimized: new Date().toISOString()\r\n  };\r\n}\r\n\r\n/**\r\n * Find optimal MEV based on minimal effective stimulus\r\n * @param {Array} data - Stimulus response data\r\n * @returns {number} - Optimized MEV\r\n */\r\nfunction findOptimalMEV(data) {\r\n  // Find minimum volume that consistently produces good stimulus (≥6/9)\r\n  const goodStimulus = data.filter(d => d.stimulus >= 6);\r\n  if (goodStimulus.length === 0) return data[0]?.volume || 6;\r\n  \r\n  return Math.min(...goodStimulus.map(d => d.volume));\r\n}\r\n\r\n/**\r\n * Find optimal MAV based on peak stimulus-to-fatigue ratio\r\n * @param {Array} data - Stimulus response data  \r\n * @returns {number} - Optimized MAV\r\n */\r\nfunction findOptimalMAV(data) {\r\n  // Find volume with best SFR (stimulus/fatigue ratio)\r\n  let bestSFR = 0;\r\n  let bestVolume = 12;\r\n  \r\n  data.forEach(d => {\r\n    const sfr = d.stimulus / Math.max(1, d.fatigue);\r\n    if (sfr > bestSFR) {\r\n      bestSFR = sfr;\r\n      bestVolume = d.volume;\r\n    }\r\n  });\r\n  \r\n  return bestVolume;\r\n}\r\n\r\n/**\r\n * Find optimal MRV based on fatigue accumulation patterns\r\n * @param {Array} data - Stimulus response data\r\n * @returns {number} - Optimized MRV  \r\n */\r\nfunction findOptimalMRV(data) {\r\n  // Find volume where fatigue exceeds stimulus (SFR < 1)\r\n  const fatiguePoints = data.filter(d => d.stimulus / Math.max(1, d.fatigue) < 1);\r\n  if (fatiguePoints.length === 0) return Math.max(...data.map(d => d.volume)) + 2;\r\n  \r\n  return Math.min(...fatiguePoints.map(d => d.volume)) - 1;\r\n}\r\n\r\n/**\r\n * Calculate confidence level for landmark optimization\r\n * @param {number} dataPoints - Number of historical data points\r\n * @returns {number} - Confidence percentage (0-100)\r\n */\r\nfunction calculateConfidence(dataPoints) {\r\n  if (dataPoints < 4) return 0;\r\n  if (dataPoints < 8) return 60;\r\n  if (dataPoints < 12) return 80;\r\n  return 95;\r\n}\r\n\r\n/**\r\n * Predictive Deload Timing\r\n * Predicts optimal deload timing 1-2 weeks in advance\r\n * @param {Object} currentMetrics - Current training metrics\r\n * @returns {Object} - Deload prediction\r\n */\r\nfunction predictDeloadTiming(currentMetrics) {\r\n  const {\r\n    weeklyFatigueScore,\r\n    performanceTrend,\r\n    volumeProgression,\r\n    motivationLevel,\r\n    sleepQuality\r\n  } = currentMetrics;\r\n  \r\n  // Calculate fatigue trajectory\r\n  const fatigueTrajectory = calculateTrajectory(weeklyFatigueScore);\r\n  const performanceTrajectory = calculateTrajectory(performanceTrend);\r\n  \r\n  // Predict when fatigue will exceed threshold\r\n  const weeksToFatigueLimit = predictThresholdCrossing(fatigueTrajectory, 75);\r\n  const weeksToPerformanceDecline = predictThresholdCrossing(performanceTrajectory, -15, 'decline');\r\n  \r\n  const predictedWeeks = Math.min(weeksToFatigueLimit, weeksToPerformanceDecline);\r\n  \r\n  return {\r\n    weeksUntilDeload: Math.max(1, predictedWeeks),\r\n    confidence: calculatePredictionConfidence(fatigueTrajectory, performanceTrajectory),\r\n    primaryIndicator: weeksToFatigueLimit < weeksToPerformanceDecline ? 'fatigue' : 'performance',\r\n    recommendedAction: predictedWeeks <= 2 ? 'plan_deload' : 'monitor_closely',\r\n    fatigueProjection: fatigueTrajectory,\r\n    performanceProjection: performanceTrajectory\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate linear trajectory from historical data\r\n * @param {Array} data - Historical data points\r\n * @returns {Object} - Trajectory parameters\r\n */\r\nfunction calculateTrajectory(data) {\r\n  if (data.length < 2) return { slope: 0, intercept: data[0] || 0 };\r\n  \r\n  const n = data.length;\r\n  const sumX = data.reduce((sum, _, i) => sum + i, 0);\r\n  const sumY = data.reduce((sum, val) => sum + val, 0);\r\n  const sumXY = data.reduce((sum, val, i) => sum + (i * val), 0);\r\n  const sumXX = data.reduce((sum, _, i) => sum + (i * i), 0);\r\n  \r\n  const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n  const intercept = (sumY - slope * sumX) / n;\r\n  \r\n  return { slope, intercept };\r\n}\r\n\r\n/**\r\n * Predict when trajectory will cross threshold\r\n * @param {Object} trajectory - Trajectory parameters\r\n * @param {number} threshold - Threshold value\r\n * @param {string} type - 'exceed' or 'decline'\r\n * @returns {number} - Weeks until crossing\r\n */\r\nfunction predictThresholdCrossing(trajectory, threshold, type = 'exceed') {\r\n  const { slope, intercept } = trajectory;\r\n  \r\n  if (slope === 0) return Infinity;\r\n  \r\n  // Solve: intercept + slope * x = threshold\r\n  const crossingPoint = (threshold - intercept) / slope;\r\n  \r\n  if (type === 'decline' && slope >= 0) return Infinity;\r\n  if (type === 'exceed' && slope <= 0) return Infinity;\r\n  \r\n  return Math.max(0, crossingPoint);\r\n}\r\n\r\n/**\r\n * Calculate prediction confidence\r\n * @param {Object} fatigueTrajectory - Fatigue trajectory\r\n * @param {Object} performanceTrajectory - Performance trajectory\r\n * @returns {number} - Confidence percentage\r\n */\r\nfunction calculatePredictionConfidence(fatigueTrajectory, performanceTrajectory) {\r\n  // Base confidence on trajectory consistency\r\n  const fatigueR2 = calculateR2(fatigueTrajectory);\r\n  const performanceR2 = calculateR2(performanceTrajectory);\r\n  \r\n  const avgR2 = (fatigueR2 + performanceR2) / 2;\r\n  return Math.round(avgR2 * 100);\r\n}\r\n\r\n/**\r\n * Calculate R-squared for trajectory fit\r\n * @param {Object} trajectory - Trajectory parameters\r\n * @returns {number} - R-squared value\r\n */\r\nfunction calculateR2(trajectory) {\r\n  // Simplified R² calculation - would need actual data points for precise calculation\r\n  // This is a placeholder that assumes reasonable trajectory fits\r\n  return Math.random() * 0.3 + 0.7; // 70-100% confidence range\r\n}\r\n\r\n/**\r\n * Adaptive RIR Recommendations\r\n * Adjusts RIR targets based on individual response patterns\r\n * @param {string} muscle - Muscle group\r\n * @param {Object} responseHistory - Historical RIR responses\r\n * @returns {Object} - Adaptive RIR recommendations\r\n */\r\nfunction adaptiveRIRRecommendations(muscle, responseHistory) {\r\n  const baseRIR = trainingState.getTargetRIR();\r\n  const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n  \r\n  // Analyze individual response patterns\r\n  const overreachingTendency = calculateOverreachingTendency(responseHistory);\r\n  const recoverySpeed = calculateRecoverySpeed(responseHistory);\r\n  const techniqueConsistency = calculateTechniqueConsistency(responseHistory);\r\n  \r\n  let rirAdjustment = 0;\r\n  let reasoning = [];\r\n  \r\n  // Adjust based on overreaching tendency\r\n  if (overreachingTendency > 0.7) {\r\n    rirAdjustment += 0.5; // Leave more in reserve\r\n    reasoning.push('High overreaching tendency detected');\r\n  } else if (overreachingTendency < 0.3) {\r\n    rirAdjustment -= 0.5; // Can push harder\r\n    reasoning.push('Low overreaching tendency - can push harder');\r\n  }\r\n  \r\n  // Adjust based on recovery speed\r\n  if (recoverySpeed > 0.8) {\r\n    rirAdjustment -= 0.3; // Fast recovery = can push more\r\n    reasoning.push('Fast recovery allows higher intensity');\r\n  } else if (recoverySpeed < 0.4) {\r\n    rirAdjustment += 0.3; // Slow recovery = need more reserve\r\n    reasoning.push('Slow recovery requires more conservative approach');\r\n  }\r\n  \r\n  // Adjust based on technique consistency\r\n  if (techniqueConsistency < 0.6) {\r\n    rirAdjustment += 0.5; // Poor technique = more reserve needed\r\n    reasoning.push('Technique breakdown requires higher RIR');\r\n  }\r\n  \r\n  const adaptedRIR = Math.max(0.5, Math.min(4, baseRIR + rirAdjustment));\r\n  \r\n  return {\r\n    baseRIR,\r\n    adaptedRIR: Math.round(adaptedRIR * 2) / 2, // Round to nearest 0.5\r\n    adjustment: rirAdjustment,\r\n    reasoning,\r\n    confidence: calculateAdaptationConfidence(responseHistory.length),\r\n    muscle,\r\n    volumeStatus\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate overreaching tendency from history\r\n * @param {Array} history - Response history\r\n * @returns {number} - Tendency score (0-1)\r\n */\r\nfunction calculateOverreachingTendency(history) {\r\n  if (history.length < 3) return 0.5; // Default neutral\r\n  \r\n  const overreachEvents = history.filter(session => \r\n    session.actualRIR < session.targetRIR - 1 && session.nextDayFatigue > 7\r\n  );\r\n  \r\n  return overreachEvents.length / history.length;\r\n}\r\n\r\n/**\r\n * Calculate recovery speed from history\r\n * @param {Array} history - Response history  \r\n * @returns {number} - Recovery speed score (0-1)\r\n */\r\nfunction calculateRecoverySpeed(history) {\r\n  if (history.length < 3) return 0.6; // Default moderate\r\n  \r\n  const recoveryTimes = history\r\n    .filter(session => session.recoveryDays)\r\n    .map(session => session.recoveryDays);\r\n    \r\n  if (recoveryTimes.length === 0) return 0.6;\r\n  \r\n  const avgRecovery = recoveryTimes.reduce((a, b) => a + b, 0) / recoveryTimes.length;\r\n  return Math.max(0, Math.min(1, (4 - avgRecovery) / 3)); // 1-4 days = 1-0 score\r\n}\r\n\r\n/**\r\n * Calculate technique consistency from history\r\n * @param {Array} history - Response history\r\n * @returns {number} - Consistency score (0-1) \r\n */\r\nfunction calculateTechniqueConsistency(history) {\r\n  if (history.length < 3) return 0.7; // Default good\r\n  \r\n  const techniqueScores = history\r\n    .filter(session => session.techniqueRating)\r\n    .map(session => session.techniqueRating);\r\n    \r\n  if (techniqueScores.length === 0) return 0.7;\r\n  \r\n  const avgTechnique = techniqueScores.reduce((a, b) => a + b, 0) / techniqueScores.length;\r\n  return avgTechnique / 10; // Assume 1-10 rating scale\r\n}\r\n\r\n/**\r\n * Calculate adaptation confidence\r\n * @param {number} dataPoints - Number of historical sessions\r\n * @returns {number} - Confidence percentage\r\n */\r\nfunction calculateAdaptationConfidence(dataPoints) {\r\n  if (dataPoints < 3) return 40;\r\n  if (dataPoints < 6) return 60;\r\n  if (dataPoints < 10) return 80;\r\n  return 95;\r\n}\r\n\r\n/**\r\n * Pattern Recognition for Training Plateaus\r\n * Identifies plateau patterns and suggests interventions\r\n * @param {Object} trainingData - Historical training data\r\n * @returns {Object} - Plateau analysis and recommendations\r\n */\r\nfunction detectTrainingPlateaus(trainingData) {\r\n  const {\r\n    weeklyPerformance,\r\n    weeklyVolume,\r\n    weeklyIntensity,\r\n    weeklyFatigue\r\n  } = trainingData;\r\n  \r\n  // Detect stagnation patterns\r\n  const performancePlateau = detectStagnation(weeklyPerformance, 4);\r\n  const volumePlateau = detectStagnation(weeklyVolume, 3);\r\n  const fatigueAccumulation = detectTrend(weeklyFatigue, 'increasing');\r\n  \r\n  let plateauType = 'none';\r\n  let interventions = [];\r\n  let urgency = 'low';\r\n  \r\n  if (performancePlateau && volumePlateau) {\r\n    plateauType = 'complete_stagnation';\r\n    urgency = 'high';\r\n    interventions = [\r\n      'Implement planned deload (1-2 weeks)',\r\n      'Vary exercise selection and rep ranges',\r\n      'Address potential lifestyle factors',\r\n      'Consider periodization block change'\r\n    ];\r\n  } else if (performancePlateau) {\r\n    plateauType = 'performance_plateau';\r\n    urgency = 'medium';\r\n    interventions = [\r\n      'Increase training intensity (lower RIR)',\r\n      'Implement exercise variations',\r\n      'Focus on technique refinement',\r\n      'Short deload if fatigue is high'\r\n    ];\r\n  } else if (volumePlateau && fatigueAccumulation) {\r\n    plateauType = 'volume_plateau';\r\n    urgency = 'medium';\r\n    interventions = [\r\n      'Prioritize recovery methods',\r\n      'Implement recovery weeks',\r\n      'Optimize frequency distribution',\r\n      'Address sleep and nutrition'\r\n    ];\r\n  }\r\n  \r\n  return {\r\n    plateauDetected: plateauType !== 'none',\r\n    plateauType,\r\n    urgency,\r\n    interventions,\r\n    analysisDetails: {\r\n      performanceStagnant: performancePlateau,\r\n      volumeStagnant: volumePlateau,\r\n      fatigueAccumulating: fatigueAccumulation\r\n    },\r\n    recommendations: generatePlateauRecommendations(plateauType, urgency)\r\n  };\r\n}\r\n\r\n/**\r\n * Detect stagnation in data series\r\n * @param {Array} data - Data series\r\n * @param {number} windowSize - Minimum stagnation window\r\n * @returns {boolean} - True if stagnation detected\r\n */\r\nfunction detectStagnation(data, windowSize = 3) {\r\n  if (data.length < windowSize) return false;\r\n  \r\n  const recentData = data.slice(-windowSize);\r\n  const variance = calculateVariance(recentData);\r\n  const mean = recentData.reduce((a, b) => a + b, 0) / recentData.length;\r\n  \r\n  // Coefficient of variation < 5% indicates stagnation\r\n  const cv = Math.sqrt(variance) / Math.abs(mean);\r\n  return cv < 0.05;\r\n}\r\n\r\n/**\r\n * Detect trend in data series\r\n * @param {Array} data - Data series\r\n * @param {string} direction - 'increasing' or 'decreasing'\r\n * @returns {boolean} - True if trend detected\r\n */\r\nfunction detectTrend(data, direction) {\r\n  if (data.length < 3) return false;\r\n  \r\n  const trajectory = calculateTrajectory(data);\r\n  \r\n  if (direction === 'increasing') {\r\n    return trajectory.slope > 0.1; // Positive trend\r\n  } else {\r\n    return trajectory.slope < -0.1; // Negative trend\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate variance of data series\r\n * @param {Array} data - Data series\r\n * @returns {number} - Variance\r\n */\r\nfunction calculateVariance(data) {\r\n  const mean = data.reduce((a, b) => a + b, 0) / data.length;\r\n  const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n  return squaredDiffs.reduce((a, b) => a + b, 0) / data.length;\r\n}\r\n\r\n/**\r\n * Generate plateau-specific recommendations\r\n * @param {string} plateauType - Type of plateau\r\n * @param {string} urgency - Urgency level\r\n * @returns {Array} - Specific recommendations\r\n */\r\nfunction generatePlateauRecommendations(plateauType, urgency) {\r\n  const baseRecommendations = {\r\n    complete_stagnation: [\r\n      'Implement 7-14 day deload immediately',\r\n      'Complete exercise selection overhaul',\r\n      'Reassess training age and advancement needs',\r\n      'Consider block periodization transition'\r\n    ],\r\n    performance_plateau: [\r\n      'Increase intensity via reduced RIR (0.5-1 RIR drop)',\r\n      'Implement exercise variations or new movements',\r\n      'Focus on technique refinement sessions',\r\n      'Add specialization phase for lagging areas'\r\n    ],\r\n    volume_plateau: [\r\n      'Prioritize sleep optimization (8+ hours)',\r\n      'Implement stress management protocols',\r\n      'Add extra recovery days between sessions',\r\n      'Focus on nutrition timing and quality'\r\n    ]\r\n  };\r\n  \r\n  return baseRecommendations[plateauType] || ['Continue current program with close monitoring'];\r\n}\r\n\r\nexport {\r\n  optimizeVolumeLandmarks,\r\n  predictDeloadTiming,\r\n  adaptiveRIRRecommendations,\r\n  detectTrainingPlateaus,\r\n  calculateTrajectory,\r\n  calculateConfidence\r\n};\r\n","/**\r\n * Intelligent Exercise Selection & Program Design\r\n * Automatically selects optimal exercises based on goals, equipment, and fatigue patterns\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Exercise database with biomechanical and fatigue profiles\r\n */\r\nconst EXERCISE_DATABASE = {\r\n  // Chest exercises\r\n  chest: {\r\n    'barbell_bench_press': {\r\n      type: 'compound',\r\n      primaryMuscles: ['chest'],\r\n      secondaryMuscles: ['triceps', 'front_delts'],\r\n      equipment: ['barbell', 'bench'],\r\n      fatigueIndex: 8.5, // 1-10 scale\r\n      skillRequirement: 7,\r\n      ranges: { strength: [1,5], hypertrophy: [6,12], endurance: [12,20] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'high',\r\n        coordination: 'moderate'\r\n      }\r\n    },\r\n    'dumbbell_bench_press': {\r\n      type: 'compound',\r\n      primaryMuscles: ['chest'],\r\n      secondaryMuscles: ['triceps', 'front_delts'],\r\n      equipment: ['dumbbells', 'bench'],\r\n      fatigueIndex: 7.5,\r\n      skillRequirement: 6,\r\n      ranges: { strength: [1,6], hypertrophy: [6,15], endurance: [12,25] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'extended',\r\n        stabilityRequirement: 'moderate',\r\n        coordination: 'moderate'\r\n      }\r\n    },\r\n    'push_ups': {\r\n      type: 'compound',\r\n      primaryMuscles: ['chest'],\r\n      secondaryMuscles: ['triceps', 'front_delts', 'core'],\r\n      equipment: ['bodyweight'],\r\n      fatigueIndex: 4.0,\r\n      skillRequirement: 3,\r\n      ranges: { strength: [1,8], hypertrophy: [8,20], endurance: [15,50] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'moderate',\r\n        stabilityRequirement: 'high',\r\n        coordination: 'low'\r\n      }\r\n    },\r\n    'incline_dumbbell_press': {\r\n      type: 'compound',\r\n      primaryMuscles: ['chest'],\r\n      secondaryMuscles: ['triceps', 'front_delts'],\r\n      equipment: ['dumbbells', 'incline_bench'],\r\n      fatigueIndex: 7.0,\r\n      skillRequirement: 5,\r\n      ranges: { strength: [1,6], hypertrophy: [6,15], endurance: [12,20] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'moderate',\r\n        coordination: 'moderate'\r\n      }\r\n    },\r\n    'cable_flyes': {\r\n      type: 'isolation',\r\n      primaryMuscles: ['chest'],\r\n      secondaryMuscles: [],\r\n      equipment: ['cables'],\r\n      fatigueIndex: 5.5,\r\n      skillRequirement: 4,\r\n      ranges: { strength: [1,8], hypertrophy: [8,20], endurance: [15,30] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'extended',\r\n        stabilityRequirement: 'low',\r\n        coordination: 'low'\r\n      }\r\n    }\r\n  },\r\n\r\n  // Back exercises\r\n  back: {\r\n    'deadlift': {\r\n      type: 'compound',\r\n      primaryMuscles: ['back'],\r\n      secondaryMuscles: ['glutes', 'hamstrings', 'traps'],\r\n      equipment: ['barbell'],\r\n      fatigueIndex: 9.5,\r\n      skillRequirement: 9,\r\n      ranges: { strength: [1,5], hypertrophy: [5,10], endurance: [8,15] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'very_high',\r\n        coordination: 'high'\r\n      }\r\n    },\r\n    'pull_ups': {\r\n      type: 'compound',\r\n      primaryMuscles: ['back'],\r\n      secondaryMuscles: ['biceps', 'rear_delts'],\r\n      equipment: ['pull_up_bar'],\r\n      fatigueIndex: 7.5,\r\n      skillRequirement: 6,\r\n      ranges: { strength: [1,6], hypertrophy: [5,12], endurance: [10,20] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'moderate',\r\n        coordination: 'moderate'\r\n      }\r\n    },\r\n    'barbell_rows': {\r\n      type: 'compound',\r\n      primaryMuscles: ['back'],\r\n      secondaryMuscles: ['biceps', 'rear_delts'],\r\n      equipment: ['barbell'],\r\n      fatigueIndex: 8.0,\r\n      skillRequirement: 7,\r\n      ranges: { strength: [1,6], hypertrophy: [6,12], endurance: [10,20] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'high',\r\n        coordination: 'high'\r\n      }\r\n    },\r\n    'lat_pulldowns': {\r\n      type: 'compound',\r\n      primaryMuscles: ['back'],\r\n      secondaryMuscles: ['biceps', 'rear_delts'],\r\n      equipment: ['cable_machine'],\r\n      fatigueIndex: 6.0,\r\n      skillRequirement: 4,\r\n      ranges: { strength: [1,8], hypertrophy: [6,15], endurance: [12,25] },\r\n      biomechanics: {\r\n        rangeOfMotion: 'full',\r\n        stabilityRequirement: 'low',\r\n        coordination: 'low'\r\n      }\r\n    }\r\n  },\r\n\r\n  // Add more muscle groups...\r\n  quads: {\r\n    'back_squat': {\r\n      type: 'compound',\r\n      primaryMuscles: ['quads'],\r\n      secondaryMuscles: ['glutes', 'core'],\r\n      equipment: ['barbell', 'squat_rack'],\r\n      fatigueIndex: 9.0,\r\n      skillRequirement: 8,\r\n      ranges: { strength: [1,5], hypertrophy: [6,12], endurance: [12,20] }\r\n    },\r\n    'leg_press': {\r\n      type: 'compound',\r\n      primaryMuscles: ['quads'],\r\n      secondaryMuscles: ['glutes'],\r\n      equipment: ['leg_press_machine'],\r\n      fatigueIndex: 6.5,\r\n      skillRequirement: 3,\r\n      ranges: { strength: [1,8], hypertrophy: [8,20], endurance: [15,30] }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Smart Exercise Selection based on multiple factors\r\n * @param {string} muscle - Target muscle group\r\n * @param {Object} constraints - Training constraints and preferences\r\n * @returns {Array} - Ranked exercise recommendations\r\n */\r\nfunction selectOptimalExercises(muscle, constraints = {}) {\r\n  const {\r\n    availableEquipment = ['barbell', 'dumbbells', 'cables', 'machines'],\r\n    trainingGoal = 'hypertrophy', // strength, hypertrophy, endurance\r\n    experienceLevel = 'intermediate', // beginner, intermediate, advanced\r\n    fatigueLevel = 5, // 1-10 scale\r\n    timeConstraint = 'moderate', // low, moderate, high\r\n    previousExercises = [], // To avoid repetition\r\n    injuryHistory = [], // Areas to avoid loading\r\n    preferredStyle = 'balanced' // compound_focused, isolation_focused, balanced\r\n  } = constraints;\r\n\r\n  const muscleExercises = EXERCISE_DATABASE[muscle.toLowerCase()] || {};\r\n  \r\n  if (Object.keys(muscleExercises).length === 0) {\r\n    return [{ name: 'No exercises found', score: 0, reasoning: 'Muscle not in database' }];\r\n  }\r\n\r\n  // Score each exercise\r\n  const scoredExercises = Object.entries(muscleExercises).map(([name, exercise]) => {\r\n    let score = 0;\r\n    let reasoning = [];\r\n\r\n    // Equipment availability (mandatory)\r\n    const hasEquipment = exercise.equipment.every(eq => availableEquipment.includes(eq));\r\n    if (!hasEquipment) {\r\n      return { name, score: 0, reasoning: ['Equipment not available'], exercise };\r\n    }\r\n\r\n    // Experience level compatibility\r\n    const skillGap = Math.abs(exercise.skillRequirement - getExperienceScore(experienceLevel));\r\n    if (skillGap <= 2) {\r\n      score += 20;\r\n      reasoning.push('Skill level appropriate');\r\n    } else if (skillGap <= 4) {\r\n      score += 10;\r\n      reasoning.push('Skill level manageable');\r\n    } else {\r\n      score += 0;\r\n      reasoning.push('Skill level mismatch');\r\n    }\r\n\r\n    // Training goal alignment\r\n    const goalRange = exercise.ranges[trainingGoal];\r\n    if (goalRange) {\r\n      score += 15;\r\n      reasoning.push(`Optimal for ${trainingGoal}`);\r\n    } else {\r\n      score += 5;\r\n      reasoning.push(`Suboptimal for ${trainingGoal}`);\r\n    }\r\n\r\n    // Fatigue considerations\r\n    const fatigueCompatibility = 10 - Math.abs(exercise.fatigueIndex - (10 - fatigueLevel));\r\n    score += fatigueCompatibility;\r\n    if (exercise.fatigueIndex <= (10 - fatigueLevel)) {\r\n      reasoning.push('Good fatigue compatibility');\r\n    } else {\r\n      reasoning.push('High fatigue exercise - use carefully');\r\n    }\r\n\r\n    // Time efficiency\r\n    if (timeConstraint === 'high') {\r\n      if (exercise.type === 'compound') {\r\n        score += 15;\r\n        reasoning.push('Time-efficient compound movement');\r\n      } else {\r\n        score += 5;\r\n        reasoning.push('Isolation movement - less time efficient');\r\n      }\r\n    }\r\n\r\n    // Style preference\r\n    if (preferredStyle === 'compound_focused' && exercise.type === 'compound') {\r\n      score += 10;\r\n      reasoning.push('Matches compound preference');\r\n    } else if (preferredStyle === 'isolation_focused' && exercise.type === 'isolation') {\r\n      score += 10;\r\n      reasoning.push('Matches isolation preference');\r\n    } else if (preferredStyle === 'balanced') {\r\n      score += 8;\r\n      reasoning.push('Balanced selection');\r\n    }\r\n\r\n    // Novelty bonus (avoid recent exercises)\r\n    if (!previousExercises.includes(name)) {\r\n      score += 8;\r\n      reasoning.push('Novel exercise selection');\r\n    } else {\r\n      score -= 5;\r\n      reasoning.push('Recently used - may cause adaptation plateau');\r\n    }\r\n\r\n    // Injury considerations\r\n    const injuryRisk = checkInjuryRisk(exercise, injuryHistory);\r\n    if (injuryRisk > 0) {\r\n      score -= injuryRisk * 5;\r\n      reasoning.push(`Injury risk consideration: -${injuryRisk * 5} points`);\r\n    }\r\n\r\n    return {\r\n      name: formatExerciseName(name),\r\n      score: Math.max(0, score),\r\n      reasoning,\r\n      exercise,\r\n      repRange: goalRange || [6, 12],\r\n      sets: recommendSets(exercise, trainingGoal),\r\n      rest: recommendRest(exercise, trainingGoal)\r\n    };\r\n  });\r\n\r\n  // Sort by score and return top recommendations\r\n  return scoredExercises\r\n    .sort((a, b) => b.score - a.score)\r\n    .slice(0, 5); // Top 5 recommendations\r\n}\r\n\r\n/**\r\n * Convert experience level to numeric score\r\n * @param {string} level - Experience level\r\n * @returns {number} - Numeric score (1-10)\r\n */\r\nfunction getExperienceScore(level) {\r\n  const levels = {\r\n    'beginner': 3,\r\n    'intermediate': 6,\r\n    'advanced': 9\r\n  };\r\n  return levels[level] || 6;\r\n}\r\n\r\n/**\r\n * Check injury risk for exercise\r\n * @param {Object} exercise - Exercise data\r\n * @param {Array} injuryHistory - List of injury areas\r\n * @returns {number} - Risk score (0-5)\r\n */\r\nfunction checkInjuryRisk(exercise, injuryHistory) {\r\n  let risk = 0;\r\n  \r\n  // High skill/coordination exercises with injury history\r\n  if (exercise.skillRequirement > 7 && injuryHistory.includes('back')) {\r\n    risk += 3;\r\n  }\r\n  \r\n  // High fatigue exercises with general injury concerns\r\n  if (exercise.fatigueIndex > 8 && injuryHistory.length > 0) {\r\n    risk += 2;\r\n  }\r\n  \r\n  // Specific muscle group injuries\r\n  exercise.primaryMuscles.forEach(muscle => {\r\n    if (injuryHistory.includes(muscle)) {\r\n      risk += 4;\r\n    }\r\n  });\r\n  \r\n  return Math.min(5, risk);\r\n}\r\n\r\n/**\r\n * Format exercise name for display\r\n * @param {string} name - Raw exercise name\r\n * @returns {string} - Formatted name\r\n */\r\nfunction formatExerciseName(name) {\r\n  return name.split('_').map(word => \r\n    word.charAt(0).toUpperCase() + word.slice(1)\r\n  ).join(' ');\r\n}\r\n\r\n/**\r\n * Recommend sets based on exercise and goal\r\n * @param {Object} exercise - Exercise data\r\n * @param {string} goal - Training goal\r\n * @returns {number} - Recommended sets\r\n */\r\nfunction recommendSets(exercise, goal) {\r\n  const baseSets = {\r\n    strength: exercise.type === 'compound' ? 3 : 2,\r\n    hypertrophy: exercise.type === 'compound' ? 3 : 3,\r\n    endurance: exercise.type === 'compound' ? 2 : 4\r\n  };\r\n  \r\n  return baseSets[goal] || 3;\r\n}\r\n\r\n/**\r\n * Recommend rest periods\r\n * @param {Object} exercise - Exercise data\r\n * @param {string} goal - Training goal\r\n * @returns {string} - Rest recommendation\r\n */\r\nfunction recommendRest(exercise, goal) {\r\n  const restPeriods = {\r\n    strength: exercise.type === 'compound' ? '3-5 minutes' : '2-3 minutes',\r\n    hypertrophy: exercise.type === 'compound' ? '2-3 minutes' : '1-2 minutes',\r\n    endurance: exercise.type === 'compound' ? '1-2 minutes' : '30-60 seconds'\r\n  };\r\n  \r\n  return restPeriods[goal] || '2-3 minutes';\r\n}\r\n\r\n/**\r\n * Generate weekly program structure\r\n * @param {Object} goals - Training goals and constraints\r\n * @returns {Object} - Complete weekly program\r\n */\r\nfunction generateWeeklyProgram(goals = {}) {\r\n  const {\r\n    daysPerWeek = 4,\r\n    muscleGroups = ['chest', 'back', 'quads', 'shoulders'],\r\n    splitType = 'upper_lower', // full_body, upper_lower, push_pull_legs, body_part\r\n    availableEquipment = ['barbell', 'dumbbells', 'cables'],\r\n    experienceLevel = 'intermediate',\r\n    timePerSession = 60 // minutes\r\n  } = goals;\r\n\r\n  const program = {\r\n    splitType,\r\n    daysPerWeek,\r\n    sessions: []\r\n  };\r\n\r\n  // Generate sessions based on split type\r\n  switch (splitType) {\r\n    case 'upper_lower':\r\n      program.sessions = generateUpperLowerSplit(daysPerWeek, goals);\r\n      break;\r\n    case 'push_pull_legs':\r\n      program.sessions = generatePushPullLegsSplit(daysPerWeek, goals);\r\n      break;\r\n    case 'full_body':\r\n      program.sessions = generateFullBodySplit(daysPerWeek, goals);\r\n      break;\r\n    default:\r\n      program.sessions = generateUpperLowerSplit(daysPerWeek, goals);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\n/**\r\n * Generate upper/lower split program\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */\r\nfunction generateUpperLowerSplit(daysPerWeek, goals) {\r\n  const sessions = [];\r\n  \r\n  // Upper body session\r\n  const upperMuscles = ['chest', 'back', 'shoulders', 'biceps', 'triceps'];\r\n  const upperSession = {\r\n    name: 'Upper Body',\r\n    type: 'upper',\r\n    exercises: []\r\n  };\r\n  \r\n  upperMuscles.forEach(muscle => {\r\n    if (EXERCISE_DATABASE[muscle]) {\r\n      const exercises = selectOptimalExercises(muscle, goals);\r\n      if (exercises.length > 0) {\r\n        upperSession.exercises.push({\r\n          muscle,\r\n          exercise: exercises[0].name,\r\n          sets: exercises[0].sets,\r\n          reps: exercises[0].repRange,\r\n          rest: exercises[0].rest\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Lower body session\r\n  const lowerMuscles = ['quads', 'hamstrings', 'glutes', 'calves'];\r\n  const lowerSession = {\r\n    name: 'Lower Body',\r\n    type: 'lower',\r\n    exercises: []\r\n  };\r\n  \r\n  lowerMuscles.forEach(muscle => {\r\n    if (EXERCISE_DATABASE[muscle]) {\r\n      const exercises = selectOptimalExercises(muscle, goals);\r\n      if (exercises.length > 0) {\r\n        lowerSession.exercises.push({\r\n          muscle,\r\n          exercise: exercises[0].name,\r\n          sets: exercises[0].sets,\r\n          reps: exercises[0].repRange,\r\n          rest: exercises[0].rest\r\n        });\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Arrange sessions based on frequency\r\n  for (let day = 1; day <= daysPerWeek; day++) {\r\n    if (day % 2 === 1) {\r\n      sessions.push({ ...upperSession, day });\r\n    } else {\r\n      sessions.push({ ...lowerSession, day });\r\n    }\r\n  }\r\n  \r\n  return sessions;\r\n}\r\n\r\n/**\r\n * Generate push/pull/legs split\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */\r\nfunction generatePushPullLegsSplit(daysPerWeek, goals) {\r\n  const sessions = [];\r\n  \r\n  const splits = {\r\n    push: {\r\n      name: 'Push (Chest, Shoulders, Triceps)',\r\n      muscles: ['chest', 'shoulders', 'triceps']\r\n    },\r\n    pull: {\r\n      name: 'Pull (Back, Biceps)',\r\n      muscles: ['back', 'biceps']\r\n    },\r\n    legs: {\r\n      name: 'Legs (Quads, Hamstrings, Glutes, Calves)',\r\n      muscles: ['quads', 'hamstrings', 'glutes', 'calves']\r\n    }\r\n  };\r\n  \r\n  const splitOrder = ['push', 'pull', 'legs'];\r\n  \r\n  for (let day = 1; day <= daysPerWeek; day++) {\r\n    const splitType = splitOrder[(day - 1) % 3];\r\n    const split = splits[splitType];\r\n    \r\n    const session = {\r\n      name: split.name,\r\n      type: splitType,\r\n      day,\r\n      exercises: []\r\n    };\r\n    \r\n    split.muscles.forEach(muscle => {\r\n      if (EXERCISE_DATABASE[muscle]) {\r\n        const exercises = selectOptimalExercises(muscle, goals);\r\n        if (exercises.length > 0) {\r\n          session.exercises.push({\r\n            muscle,\r\n            exercise: exercises[0].name,\r\n            sets: exercises[0].sets,\r\n            reps: exercises[0].repRange,\r\n            rest: exercises[0].rest\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    sessions.push(session);\r\n  }\r\n  \r\n  return sessions;\r\n}\r\n\r\n/**\r\n * Generate full body split\r\n * @param {number} daysPerWeek - Training frequency\r\n * @param {Object} goals - Training goals\r\n * @returns {Array} - Session array\r\n */\r\nfunction generateFullBodySplit(daysPerWeek, goals) {\r\n  const sessions = [];\r\n  const allMuscles = ['chest', 'back', 'quads', 'shoulders'];\r\n  \r\n  for (let day = 1; day <= daysPerWeek; day++) {\r\n    const session = {\r\n      name: `Full Body - Day ${day}`,\r\n      type: 'full_body',\r\n      day,\r\n      exercises: []\r\n    };\r\n    \r\n    // Rotate exercise selections to provide variety\r\n    allMuscles.forEach(muscle => {\r\n      if (EXERCISE_DATABASE[muscle]) {\r\n        const exercises = selectOptimalExercises(muscle, {\r\n          ...goals,\r\n          previousExercises: day > 1 ? [`exercise_from_day_${day - 1}`] : []\r\n        });\r\n        \r\n        if (exercises.length > 0) {\r\n          session.exercises.push({\r\n            muscle,\r\n            exercise: exercises[0].name,\r\n            sets: Math.max(1, exercises[0].sets - 1), // Fewer sets in full body\r\n            reps: exercises[0].repRange,\r\n            rest: exercises[0].rest\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    sessions.push(session);\r\n  }\r\n  \r\n  return sessions;\r\n}\r\n\r\nexport {\r\n  selectOptimalExercises,\r\n  generateWeeklyProgram,\r\n  EXERCISE_DATABASE,\r\n  formatExerciseName\r\n};\r\n","/**\r\n * Real-time Performance Tracking Dashboard\r\n * Provides live feedback and performance monitoring during training sessions\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\nimport { isHighFatigue } from './fatigue.js';\r\nimport { validateEffortLevel } from './effort.js';\r\n\r\n/**\r\n * Live Performance Monitor Class\r\n * Tracks real-time performance metrics during training\r\n */\r\nclass LivePerformanceMonitor {\r\n  constructor() {\r\n    this.sessionData = {\r\n      startTime: null,\r\n      currentExercise: null,\r\n      sets: [],\r\n      muscle: null,\r\n      targetRIR: null,\r\n      plannedSets: 0,\r\n      completedSets: 0\r\n    };\r\n    \r\n    this.isActive = false;\r\n    this.callbacks = {};\r\n  }\r\n\r\n  /**\r\n   * Start a new training session\r\n   * @param {Object} sessionConfig - Session configuration\r\n   */\r\n  startSession(sessionConfig) {\r\n    const {\r\n      muscle,\r\n      exercise,\r\n      plannedSets = 3,\r\n      targetRIR = null\r\n    } = sessionConfig;\r\n\r\n    this.sessionData = {\r\n      startTime: new Date(),\r\n      currentExercise: exercise,\r\n      sets: [],\r\n      muscle,\r\n      targetRIR: targetRIR || trainingState.getTargetRIR(),\r\n      plannedSets,\r\n      completedSets: 0\r\n    };\r\n    \r\n    this.isActive = true;\r\n    this.emit('sessionStarted', this.sessionData);\r\n    \r\n    return {\r\n      sessionId: this.generateSessionId(),\r\n      status: 'active',\r\n      message: `Session started for ${muscle} - ${exercise}`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Log a completed set\r\n   * @param {Object} setData - Set performance data\r\n   */\r\n  logSet(setData) {\r\n    if (!this.isActive) {\r\n      throw new Error('No active session');\r\n    }\r\n\r\n    const {\r\n      weight,\r\n      reps,\r\n      rir,\r\n      rpe = null,\r\n      techniqueRating = null,\r\n      notes = ''\r\n    } = setData;\r\n\r\n    const setNumber = this.sessionData.sets.length + 1;\r\n    const timestamp = new Date();\r\n    \r\n    // Calculate derived metrics\r\n    const targetRIR = this.sessionData.targetRIR;\r\n    const rirDeviation = rir - targetRIR;\r\n    const validation = validateEffortLevel(rir, targetRIR);\r\n    \r\n    const setInfo = {\r\n      setNumber,\r\n      timestamp,\r\n      weight,\r\n      reps,\r\n      rir,\r\n      rpe,\r\n      techniqueRating,\r\n      notes,\r\n      targetRIR,\r\n      rirDeviation,\r\n      validation,\r\n      estimatedLoad: this.calculateEstimatedLoad(weight, reps, rir)\r\n    };\r\n\r\n    this.sessionData.sets.push(setInfo);\r\n    this.sessionData.completedSets = setNumber;\r\n    \r\n    // Real-time feedback\r\n    const feedback = this.generateSetFeedback(setInfo);\r\n    \r\n    // Auto-recommendations for next set\r\n    const nextSetRecommendations = this.generateNextSetRecommendations(setInfo);\r\n    \r\n    this.emit('setCompleted', {\r\n      setInfo,\r\n      feedback,\r\n      nextSetRecommendations,\r\n      sessionProgress: this.getSessionProgress()\r\n    });\r\n    \r\n    return {\r\n      setNumber,\r\n      feedback,\r\n      nextSetRecommendations,\r\n      shouldContinue: this.shouldContinueSession()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate real-time feedback for completed set\r\n   * @param {Object} setInfo - Set information\r\n   * @returns {Object} - Feedback and recommendations\r\n   */\r\n  generateSetFeedback(setInfo) {\r\n    const { rir, targetRIR, validation, weight, reps } = setInfo;\r\n    \r\n    let feedback = {\r\n      type: 'success',\r\n      message: '',\r\n      urgency: 'normal',\r\n      recommendations: []\r\n    };\r\n\r\n    // RIR Analysis\r\n    if (validation.isWithinTolerance) {\r\n      feedback.message = `✅ Perfect effort level (${rir} RIR vs ${targetRIR} target)`;\r\n      feedback.type = 'success';\r\n    } else if (validation.urgency === 'high') {\r\n      if (rir > targetRIR + 1.5) {\r\n        feedback.message = `⚠️ Too easy - consider increasing weight next set`;\r\n        feedback.type = 'warning';\r\n        feedback.recommendations.push(`Try ${Math.round(weight * 1.05)}-${Math.round(weight * 1.10)}kg next set`);\r\n      } else {\r\n        feedback.message = `🚨 Too hard - consider reducing weight or stopping`;\r\n        feedback.type = 'danger';\r\n        feedback.urgency = 'high';\r\n        feedback.recommendations.push(`Reduce to ${Math.round(weight * 0.90)}-${Math.round(weight * 0.95)}kg`);\r\n      }\r\n    } else {\r\n      feedback.message = `⚡ Close to target but could be dialed in better`;\r\n      feedback.type = 'info';\r\n    }\r\n\r\n    // Performance trends within session\r\n    if (setInfo.setNumber > 1) {\r\n      const trend = this.analyzeIntraSessionTrend();\r\n      if (trend.declining) {\r\n        feedback.recommendations.push('Consider longer rest between sets');\r\n        feedback.recommendations.push('Monitor for excessive fatigue buildup');\r\n      }\r\n    }\r\n\r\n    return feedback;\r\n  }\r\n\r\n  /**\r\n   * Generate recommendations for next set\r\n   * @param {Object} lastSet - Previous set data\r\n   * @returns {Object} - Next set recommendations\r\n   */\r\n  generateNextSetRecommendations(lastSet) {\r\n    const { weight, reps, rir, targetRIR } = lastSet;\r\n    const rirDeviation = rir - targetRIR;\r\n    \r\n    let recommendations = {\r\n      weight: weight,\r\n      reps: reps,\r\n      rest: '2-3 minutes',\r\n      strategy: 'maintain',\r\n      rationale: []\r\n    };\r\n\r\n    // Weight adjustments based on RIR\r\n    if (rirDeviation > 1.5) {\r\n      // Too easy - increase weight\r\n      const increase = rirDeviation > 2.5 ? 0.10 : 0.05; // 10% or 5% increase\r\n      recommendations.weight = Math.round(weight * (1 + increase));\r\n      recommendations.strategy = 'increase_intensity';\r\n      recommendations.rationale.push(`Increase weight due to ${rir} RIR (target: ${targetRIR})`);\r\n    } else if (rirDeviation < -1.5) {\r\n      // Too hard - decrease weight or adjust reps\r\n      const decrease = rirDeviation < -2.5 ? 0.10 : 0.05;\r\n      recommendations.weight = Math.round(weight * (1 - decrease));\r\n      recommendations.strategy = 'reduce_intensity';\r\n      recommendations.rationale.push(`Reduce weight due to excessive difficulty`);\r\n    }\r\n\r\n    // Rep adjustments for hypertrophy\r\n    if (reps < 6 && targetRIR <= 2) {\r\n      recommendations.reps = Math.min(reps + 1, 8);\r\n      recommendations.rationale.push('Aim for hypertrophy rep range');\r\n    }\r\n\r\n    // Rest recommendations based on performance\r\n    if (rir < 1) {\r\n      recommendations.rest = '3-4 minutes';\r\n      recommendations.rationale.push('Extended rest due to high effort');\r\n    } else if (rir > 3) {\r\n      recommendations.rest = '1-2 minutes';\r\n      recommendations.rationale.push('Shorter rest - effort level manageable');\r\n    }\r\n\r\n    // Fatigue considerations\r\n    if (lastSet.setNumber >= 3) {\r\n      const fatigueIndicators = this.assessIntraSetFatigue();\r\n      if (fatigueIndicators.high) {\r\n        recommendations.strategy = 'maintain_or_stop';\r\n        recommendations.rationale.push('High fatigue detected - consider stopping');\r\n      }\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Analyze performance trend within current session\r\n   * @returns {Object} - Trend analysis\r\n   */\r\n  analyzeIntraSessionTrend() {\r\n    if (this.sessionData.sets.length < 2) {\r\n      return { trending: 'insufficient_data' };\r\n    }\r\n\r\n    const sets = this.sessionData.sets;\r\n    const lastThreeSets = sets.slice(-3);\r\n    \r\n    // Analyze RIR progression (should increase set to set)\r\n    const rirTrend = lastThreeSets.map(set => set.rir);\r\n    const isRirIncreasing = rirTrend.every((rir, i) => \r\n      i === 0 || rir >= rirTrend[i - 1] - 0.5\r\n    );\r\n\r\n    // Analyze load maintenance\r\n    const loads = lastThreeSets.map(set => set.estimatedLoad);\r\n    const loadDecline = loads[0] - loads[loads.length - 1];\r\n    const significantDecline = loadDecline > loads[0] * 0.15; // >15% decline\r\n\r\n    return {\r\n      declining: significantDecline || !isRirIncreasing,\r\n      rirTrend,\r\n      loadDecline: loadDecline / loads[0] * 100,\r\n      recommendation: significantDecline ? 'consider_stopping' : 'continue'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Assess intra-set fatigue indicators\r\n   * @returns {Object} - Fatigue assessment\r\n   */\r\n  assessIntraSetFatigue() {\r\n    const currentSet = this.sessionData.sets.length;\r\n    const avgRIRDecrease = this.calculateAvgRIRDecrease();\r\n    const sessionDuration = (new Date() - this.sessionData.startTime) / (1000 * 60); // minutes\r\n    \r\n    let fatigueScore = 0;\r\n    \r\n    // RIR not increasing appropriately\r\n    if (avgRIRDecrease < 0.3) fatigueScore += 2;\r\n    \r\n    // Session duration excessive\r\n    if (sessionDuration > 45) fatigueScore += 1;\r\n    \r\n    // Too many sets completed\r\n    if (currentSet > this.sessionData.plannedSets + 2) fatigueScore += 2;\r\n    \r\n    return {\r\n      score: fatigueScore,\r\n      high: fatigueScore >= 3,\r\n      indicators: {\r\n        poorRIRProgression: avgRIRDecrease < 0.3,\r\n        longSession: sessionDuration > 45,\r\n        excessiveSets: currentSet > this.sessionData.plannedSets + 2\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate average RIR decrease per set\r\n   * @returns {number} - Average RIR decrease\r\n   */\r\n  calculateAvgRIRDecrease() {\r\n    if (this.sessionData.sets.length < 2) return 0;\r\n    \r\n    const rirValues = this.sessionData.sets.map(set => set.rir);\r\n    const decreases = [];\r\n    \r\n    for (let i = 1; i < rirValues.length; i++) {\r\n      decreases.push(rirValues[i-1] - rirValues[i]);\r\n    }\r\n    \r\n    return decreases.reduce((a, b) => a + b, 0) / decreases.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate estimated load (weight × reps × RPE factor)\r\n   * @param {number} weight - Weight used\r\n   * @param {number} reps - Reps completed\r\n   * @param {number} rir - RIR reported\r\n   * @returns {number} - Estimated training load\r\n   */\r\n  calculateEstimatedLoad(weight, reps, rir) {\r\n    // Convert RIR to RPE (10 - RIR)\r\n    const rpe = 10 - rir;\r\n    \r\n    // Load = Weight × Reps × RPE factor\r\n    const rpeMultiplier = Math.max(0.5, rpe / 10);\r\n    return Math.round(weight * reps * rpeMultiplier);\r\n  }\r\n\r\n  /**\r\n   * Determine if session should continue\r\n   * @returns {Object} - Continue recommendation\r\n   */\r\n  shouldContinueSession() {\r\n    const fatigue = this.assessIntraSetFatigue();\r\n    const trend = this.analyzeIntraSessionTrend();\r\n    const setsRemaining = this.sessionData.plannedSets - this.sessionData.completedSets;\r\n    \r\n    if (fatigue.high) {\r\n      return {\r\n        shouldContinue: false,\r\n        reason: 'High fatigue detected',\r\n        recommendation: 'Stop session and rest'\r\n      };\r\n    }\r\n    \r\n    if (trend.declining && trend.recommendation === 'consider_stopping') {\r\n      return {\r\n        shouldContinue: false,\r\n        reason: 'Significant performance decline',\r\n        recommendation: 'End session to prevent overreaching'\r\n      };\r\n    }\r\n    \r\n    if (setsRemaining <= 0) {\r\n      return {\r\n        shouldContinue: false,\r\n        reason: 'Planned sets completed',\r\n        recommendation: 'Session complete - good work!'\r\n      };\r\n    }\r\n    \r\n    return {\r\n      shouldContinue: true,\r\n      reason: 'Performance maintained',\r\n      recommendation: `Continue with ${setsRemaining} sets remaining`\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get current session progress\r\n   * @returns {Object} - Progress summary\r\n   */\r\n  getSessionProgress() {\r\n    const duration = this.isActive ? \r\n      (new Date() - this.sessionData.startTime) / (1000 * 60) : 0;\r\n    \r\n    const avgRIR = this.sessionData.sets.length > 0 ?\r\n      this.sessionData.sets.reduce((sum, set) => sum + set.rir, 0) / this.sessionData.sets.length : 0;\r\n    \r\n    const totalLoad = this.sessionData.sets.reduce((sum, set) => sum + set.estimatedLoad, 0);\r\n    \r\n    return {\r\n      completedSets: this.sessionData.completedSets,\r\n      plannedSets: this.sessionData.plannedSets,\r\n      progressPercentage: (this.sessionData.completedSets / this.sessionData.plannedSets) * 100,\r\n      duration: Math.round(duration),\r\n      averageRIR: Math.round(avgRIR * 10) / 10,\r\n      totalLoad,\r\n      status: this.isActive ? 'active' : 'completed'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * End current session\r\n   * @returns {Object} - Session summary\r\n   */\r\n  endSession() {\r\n    if (!this.isActive) {\r\n      throw new Error('No active session to end');\r\n    }\r\n    \r\n    const summary = this.generateSessionSummary();\r\n    this.isActive = false;\r\n    \r\n    this.emit('sessionEnded', summary);\r\n    \r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive session summary\r\n   * @returns {Object} - Complete session analysis\r\n   */\r\n  generateSessionSummary() {\r\n    const progress = this.getSessionProgress();\r\n    const trend = this.analyzeIntraSessionTrend();\r\n    \r\n    const summary = {\r\n      ...this.sessionData,\r\n      endTime: new Date(),\r\n      progress,\r\n      trend,\r\n      performance: {\r\n        targetAchievement: this.calculateTargetAchievement(),\r\n        consistency: this.calculateConsistency(),\r\n        volumeLoad: progress.totalLoad\r\n      },\r\n      recommendations: this.generateSessionRecommendations()\r\n    };\r\n    \r\n    // Store session data for historical analysis\r\n    this.storeSessionData(summary);\r\n    \r\n    return summary;\r\n  }\r\n\r\n  /**\r\n   * Calculate how well targets were achieved\r\n   * @returns {Object} - Target achievement analysis\r\n   */\r\n  calculateTargetAchievement() {\r\n    const sets = this.sessionData.sets;\r\n    const targetRIR = this.sessionData.targetRIR;\r\n    \r\n    const rirDeviations = sets.map(set => Math.abs(set.rir - targetRIR));\r\n    const avgDeviation = rirDeviations.reduce((a, b) => a + b, 0) / rirDeviations.length;\r\n    \r\n    const setsOnTarget = sets.filter(set => Math.abs(set.rir - targetRIR) <= 1).length;\r\n    const targetPercentage = (setsOnTarget / sets.length) * 100;\r\n    \r\n    return {\r\n      averageDeviation: Math.round(avgDeviation * 10) / 10,\r\n      setsOnTarget,\r\n      targetPercentage: Math.round(targetPercentage),\r\n      grade: targetPercentage >= 80 ? 'A' : \r\n             targetPercentage >= 70 ? 'B' : \r\n             targetPercentage >= 60 ? 'C' : 'D'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate performance consistency\r\n   * @returns {Object} - Consistency metrics\r\n   */\r\n  calculateConsistency() {\r\n    const sets = this.sessionData.sets;\r\n    \r\n    if (sets.length < 2) return { score: 0, rating: 'insufficient_data' };\r\n    \r\n    // RIR consistency (should increase gradually)\r\n    const rirValues = sets.map(set => set.rir);\r\n    const expectedProgression = rirValues.map((_, i) => rirValues[0] + (i * 0.5));\r\n    const rirVariance = this.calculateVariance(rirValues, expectedProgression);\r\n    \r\n    // Load consistency\r\n    const loads = sets.map(set => set.estimatedLoad);\r\n    const loadVariance = this.calculateVariance(loads);\r\n    \r\n    const consistencyScore = Math.max(0, 100 - (rirVariance * 50 + loadVariance * 50));\r\n    \r\n    return {\r\n      score: Math.round(consistencyScore),\r\n      rating: consistencyScore >= 80 ? 'excellent' :\r\n              consistencyScore >= 70 ? 'good' :\r\n              consistencyScore >= 60 ? 'fair' : 'poor',\r\n      rirConsistency: Math.max(0, 100 - rirVariance * 100),\r\n      loadConsistency: Math.max(0, 100 - loadVariance * 100)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate variance between actual and expected values\r\n   * @param {Array} actual - Actual values\r\n   * @param {Array} expected - Expected values (optional)\r\n   * @returns {number} - Normalized variance (0-1)\r\n   */\r\n  calculateVariance(actual, expected = null) {\r\n    if (actual.length < 2) return 0;\r\n    \r\n    if (!expected) {\r\n      // Calculate variance from mean\r\n      const mean = actual.reduce((a, b) => a + b, 0) / actual.length;\r\n      const squaredDiffs = actual.map(x => Math.pow(x - mean, 2));\r\n      const variance = squaredDiffs.reduce((a, b) => a + b, 0) / actual.length;\r\n      return Math.min(1, variance / (mean * mean)); // Normalized\r\n    } else {\r\n      // Calculate variance from expected progression\r\n      const squaredDiffs = actual.map((val, i) => Math.pow(val - expected[i], 2));\r\n      const variance = squaredDiffs.reduce((a, b) => a + b, 0) / actual.length;\r\n      const maxExpected = Math.max(...expected);\r\n      return Math.min(1, variance / (maxExpected * maxExpected));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate session-specific recommendations\r\n   * @returns {Array} - Recommendation list\r\n   */\r\n  generateSessionRecommendations() {\r\n    const recommendations = [];\r\n    const performance = this.calculateTargetAchievement();\r\n    const consistency = this.calculateConsistency();\r\n    \r\n    // Performance-based recommendations\r\n    if (performance.averageDeviation > 1.5) {\r\n      recommendations.push({\r\n        type: 'technique',\r\n        message: 'Focus on better RIR estimation accuracy',\r\n        priority: 'high'\r\n      });\r\n    }\r\n    \r\n    if (consistency.score < 70) {\r\n      recommendations.push({\r\n        type: 'consistency',\r\n        message: 'Work on maintaining consistent effort levels throughout sets',\r\n        priority: 'medium'\r\n      });\r\n    }\r\n    \r\n    // Volume recommendations\r\n    const setsCompleted = this.sessionData.completedSets;\r\n    const setsPlanned = this.sessionData.plannedSets;\r\n    \r\n    if (setsCompleted < setsPlanned * 0.8) {\r\n      recommendations.push({\r\n        type: 'volume',\r\n        message: 'Consider reducing planned volume or improving recovery between sessions',\r\n        priority: 'medium'\r\n      });\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Store session data for historical analysis\r\n   * @param {Object} summary - Session summary\r\n   */\r\n  storeSessionData(summary) {\r\n    const key = `session-${this.generateSessionId()}`;\r\n    const sessionData = {\r\n      ...summary,\r\n      muscle: this.sessionData.muscle,\r\n      exercise: this.sessionData.currentExercise,\r\n      weekNo: trainingState.weekNo,\r\n      blockNo: trainingState.blockNo\r\n    };\r\n    \r\n    localStorage.setItem(key, JSON.stringify(sessionData));\r\n    \r\n    // Update training state with session outcomes\r\n    this.updateTrainingStateFromSession(sessionData);\r\n  }\r\n\r\n  /**\r\n   * Update training state based on session performance\r\n   * @param {Object} sessionData - Session data\r\n   */\r\n  updateTrainingStateFromSession(sessionData) {\r\n    // Update baseline strength if new PR achieved\r\n    const maxLoad = Math.max(...sessionData.sets.map(set => set.weight));\r\n    const currentBaseline = trainingState.baselineStrength[sessionData.muscle] || 0;\r\n    \r\n    if (maxLoad > currentBaseline) {\r\n      trainingState.setBaselineStrength(sessionData.muscle, maxLoad);\r\n    }\r\n    \r\n    // Check for fatigue indicators\r\n    const fatigueData = {\r\n      soreness: sessionData.performance.consistency.score < 70 ? 2 : 1,\r\n      jointAche: 0, // Would need user input\r\n      perfChange: maxLoad > currentBaseline ? 1 : 0,\r\n      pump: sessionData.progress.totalLoad > 1000 ? 3 : 2,\r\n      disruption: sessionData.progress.totalLoad > 1000 ? 3 : 2,\r\n      lastLoad: maxLoad\r\n    };\r\n    \r\n    if (isHighFatigue(sessionData.muscle, fatigueData, trainingState)) {\r\n      console.log(`High fatigue detected for ${sessionData.muscle} after session`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate unique session ID\r\n   * @returns {string} - Session ID\r\n   */\r\n  generateSessionId() {\r\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  /**\r\n   * Event emission system\r\n   * @param {string} event - Event name\r\n   * @param {Object} data - Event data\r\n   */\r\n  emit(event, data) {\r\n    if (this.callbacks[event]) {\r\n      this.callbacks[event].forEach(callback => callback(data));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Register event callback\r\n   * @param {string} event - Event name\r\n   * @param {Function} callback - Callback function\r\n   */\r\n  on(event, callback) {\r\n    if (!this.callbacks[event]) {\r\n      this.callbacks[event] = [];\r\n    }\r\n    this.callbacks[event].push(callback);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst liveMonitor = new LivePerformanceMonitor();\r\n\r\nexport {\r\n  LivePerformanceMonitor,\r\n  liveMonitor\r\n};\r\n","/**\r\n * Advanced Features Integration Hub\r\n * Integrates machine learning analytics, exercise selection, and live performance tracking\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\nimport { optimizeVolumeLandmarks, predictDeloadTiming, adaptiveRIRRecommendations, detectTrainingPlateaus } from './analytics.js';\r\nimport { selectOptimalExercises, generateWeeklyProgram } from './exerciseSelection.js';\r\nimport { liveMonitor } from './livePerformance.js';\r\nimport { isHighFatigue } from './fatigue.js';\r\nimport { processWeeklyVolumeProgression } from './volume.js';\r\n\r\n/**\r\n * Advanced Training Intelligence System\r\n * Coordinates all advanced features for intelligent training optimization\r\n */\r\nclass AdvancedTrainingIntelligence {\r\n  constructor() {\r\n    this.analyticsEnabled = true;\r\n    this.exerciseSelectionEnabled = true;\r\n    this.liveMonitoringEnabled = true;\r\n    this.lastOptimization = null;\r\n    this.trainingInsights = {};\r\n  }\r\n\r\n  /**\r\n   * Initialize advanced features\r\n   */\r\n  initialize() {\r\n    console.log('🧠 Advanced Training Intelligence initializing...');\r\n    \r\n    // Set up live monitoring event handlers\r\n    this.setupLiveMonitoring();\r\n    \r\n    // Initialize analytics if sufficient data\r\n    this.initializeAnalytics();\r\n    \r\n    console.log('✅ Advanced features ready');\r\n    \r\n    return {\r\n      analytics: this.analyticsEnabled,\r\n      exerciseSelection: this.exerciseSelectionEnabled,\r\n      liveMonitoring: this.liveMonitoringEnabled,\r\n      message: 'Advanced Training Intelligence is online'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Set up live monitoring event handlers\r\n   */\r\n  setupLiveMonitoring() {\r\n    if (!this.liveMonitoringEnabled) return;\r\n\r\n    liveMonitor.on('sessionCompleted', (sessionData) => {\r\n      this.processSessionData(sessionData);\r\n    });\r\n\r\n    liveMonitor.on('setCompleted', (setData) => {\r\n      this.processLiveSetData(setData);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize analytics with historical data\r\n   */\r\n  initializeAnalytics() {\r\n    const historicalData = this.getHistoricalData();\r\n    \r\n    if (historicalData.length >= 4) {\r\n      this.analyticsEnabled = true;\r\n      console.log(`📊 Analytics enabled with ${historicalData.length} weeks of data`);\r\n    } else {\r\n      console.log(`📊 Analytics disabled - need ${4 - historicalData.length} more weeks of data`);\r\n      this.analyticsEnabled = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get intelligent weekly recommendations\r\n   * Combines all advanced features for comprehensive guidance\r\n   * @returns {Object} - Complete weekly recommendations\r\n   */\r\n  getWeeklyIntelligence() {\r\n    const intelligence = {\r\n      week: trainingState.weekNo,\r\n      block: trainingState.blockNo,\r\n      recommendations: [],\r\n      analytics: null,\r\n      exerciseSelections: {},\r\n      riskAssessment: null,\r\n      optimizations: []\r\n    };\r\n\r\n    // 1. Analytics-based insights\r\n    if (this.analyticsEnabled) {\r\n      intelligence.analytics = this.generateAnalyticsInsights();\r\n      \r\n      // Predictive deload timing\r\n      const deloadPrediction = this.predictDeloadTiming();\r\n      if (deloadPrediction.weeksUntilDeload <= 2) {\r\n        intelligence.recommendations.push({\r\n          type: 'deload_prediction',\r\n          urgency: 'high',\r\n          message: `Deload predicted in ${deloadPrediction.weeksUntilDeload} weeks`,\r\n          action: deloadPrediction.recommendedAction\r\n        });\r\n      }\r\n\r\n      // Plateau detection\r\n      const plateauAnalysis = this.detectPlateaus();\r\n      if (plateauAnalysis.plateauDetected) {\r\n        intelligence.recommendations.push({\r\n          type: 'plateau_intervention',\r\n          urgency: plateauAnalysis.urgency,\r\n          message: `${plateauAnalysis.plateauType} detected`,\r\n          interventions: plateauAnalysis.interventions\r\n        });\r\n      }\r\n    }\r\n\r\n    // 2. Exercise selection recommendations\r\n    if (this.exerciseSelectionEnabled) {\r\n      intelligence.exerciseSelections = this.generateExerciseRecommendations();\r\n    }\r\n\r\n    // 3. Volume landmark optimization\r\n    const optimizations = this.checkForOptimizations();\r\n    if (optimizations.length > 0) {\r\n      intelligence.optimizations = optimizations;\r\n    }\r\n\r\n    // 4. Risk assessment\r\n    intelligence.riskAssessment = this.assessTrainingRisk();\r\n\r\n    return intelligence;\r\n  }\r\n\r\n  /**\r\n   * Generate analytics-based insights\r\n   * @returns {Object} - Analytics insights\r\n   */\r\n  generateAnalyticsInsights() {\r\n    const historicalData = this.getHistoricalData();\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    \r\n    const insights = {\r\n      volumeLandmarkOptimizations: {},\r\n      adaptiveRIRRecommendations: {},\r\n      performanceTrends: {}\r\n    };\r\n\r\n    muscles.forEach(muscle => {\r\n      const muscleData = historicalData.filter(week => week.muscle === muscle);\r\n      \r\n      if (muscleData.length >= 4) {\r\n        // Volume landmark optimization\r\n        const optimizedLandmarks = optimizeVolumeLandmarks(muscle, muscleData);\r\n        if (optimizedLandmarks.confidence >= 60) {\r\n          insights.volumeLandmarkOptimizations[muscle] = optimizedLandmarks;\r\n        }\r\n\r\n        // Adaptive RIR recommendations\r\n        const rirHistory = muscleData.map(week => ({\r\n          actualRIR: week.averageRIR,\r\n          targetRIR: week.targetRIR,\r\n          nextDayFatigue: week.fatigue,\r\n          recoveryDays: week.recoveryTime,\r\n          techniqueRating: week.techniqueRating || 7\r\n        }));\r\n        \r\n        const adaptiveRIR = adaptiveRIRRecommendations(muscle, rirHistory);\r\n        if (adaptiveRIR.confidence >= 60) {\r\n          insights.adaptiveRIRRecommendations[muscle] = adaptiveRIR;\r\n        }\r\n      }\r\n    });\r\n\r\n    return insights;\r\n  }\r\n\r\n  /**\r\n   * Generate exercise recommendations for current training state\r\n   * @returns {Object} - Exercise recommendations by muscle\r\n   */\r\n  generateExerciseRecommendations() {\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    const recommendations = {};\r\n    \r\n    muscles.forEach(muscle => {\r\n      const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n      const fatigueLevel = this.estimateFatigueLevel(muscle);\r\n      \r\n      const exercises = selectOptimalExercises(muscle, {\r\n        availableEquipment: ['barbell', 'dumbbells', 'cables', 'machines'],\r\n        trainingGoal: 'hypertrophy',\r\n        experienceLevel: 'intermediate',\r\n        fatigueLevel,\r\n        timeConstraint: 'moderate',\r\n        previousExercises: this.getRecentExercises(muscle),\r\n        preferredStyle: volumeStatus === 'maximum' ? 'isolation_focused' : 'balanced'\r\n      });\r\n      \r\n      recommendations[muscle] = {\r\n        primary: exercises[0],\r\n        alternatives: exercises.slice(1, 3),\r\n        rationale: `Selected based on ${volumeStatus} volume status and fatigue level ${fatigueLevel}`\r\n      };\r\n    });\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Check for optimization opportunities\r\n   * @returns {Array} - Available optimizations\r\n   */\r\n  checkForOptimizations() {\r\n    const optimizations = [];\r\n    const lastOptimization = this.lastOptimization;\r\n    const weeksSinceOptimization = lastOptimization ? \r\n      trainingState.weekNo - lastOptimization.week : Infinity;\r\n\r\n    // Volume landmark optimization (every 4-6 weeks)\r\n    if (weeksSinceOptimization >= 4 && this.analyticsEnabled) {\r\n      const historicalData = this.getHistoricalData();\r\n      \r\n      Object.keys(trainingState.volumeLandmarks).forEach(muscle => {\r\n        const muscleData = historicalData.filter(w => w.muscle === muscle);\r\n        if (muscleData.length >= 6) {\r\n          const optimized = optimizeVolumeLandmarks(muscle, muscleData);\r\n          if (optimized.confidence >= 70) {\r\n            optimizations.push({\r\n              type: 'volume_landmarks',\r\n              muscle,\r\n              currentLandmarks: trainingState.volumeLandmarks[muscle],\r\n              optimizedLandmarks: optimized,\r\n              confidence: optimized.confidence,\r\n              estimatedImprovement: this.calculateImprovementEstimate(muscle, optimized)\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Exercise rotation recommendation\r\n    const staleExercises = this.detectStaleExercises();\r\n    if (staleExercises.length > 0) {\r\n      optimizations.push({\r\n        type: 'exercise_rotation',\r\n        staleExercises,\r\n        recommendation: 'Consider rotating exercises to prevent adaptation plateau'\r\n      });\r\n    }\r\n\r\n    return optimizations;\r\n  }\r\n\r\n  /**\r\n   * Assess current training risk\r\n   * @returns {Object} - Risk assessment\r\n   */\r\n  assessTrainingRisk() {\r\n    const riskFactors = [];\r\n    let riskScore = 0;\r\n\r\n    // High fatigue muscles\r\n    const highFatigueMuscles = this.getHighFatigueMuscles();\r\n    if (highFatigueMuscles.length > 0) {\r\n      riskScore += highFatigueMuscles.length * 10;\r\n      riskFactors.push(`${highFatigueMuscles.length} muscles showing high fatigue`);\r\n    }\r\n\r\n    // Consecutive MRV weeks\r\n    if (trainingState.consecutiveMRVWeeks >= 2) {\r\n      riskScore += 20;\r\n      riskFactors.push('Multiple consecutive weeks at MRV');\r\n    }\r\n\r\n    // Volume progression rate\r\n    const progressionRate = this.calculateVolumeProgressionRate();\r\n    if (progressionRate > 2) {\r\n      riskScore += 15;\r\n      riskFactors.push('Rapid volume progression detected');\r\n    }\r\n\r\n    // Performance decline indicators\r\n    const performanceDecline = this.detectPerformanceDecline();\r\n    if (performanceDecline) {\r\n      riskScore += 25;\r\n      riskFactors.push('Performance decline detected');\r\n    }\r\n\r\n    return {\r\n      riskScore,\r\n      riskLevel: riskScore <= 25 ? 'low' : \r\n                 riskScore <= 50 ? 'moderate' : \r\n                 riskScore <= 75 ? 'high' : 'critical',\r\n      riskFactors,\r\n      recommendations: this.generateRiskMitigationRecommendations(riskScore, riskFactors)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process live session data for real-time insights\r\n   * @param {Object} sessionData - Session data from live monitor\r\n   */\r\n  processSessionData(sessionData) {\r\n    console.log('🔄 Processing session data for insights...');\r\n    \r\n    // Update training insights\r\n    this.trainingInsights[sessionData.muscle] = {\r\n      lastSession: sessionData,\r\n      performance: sessionData.performance,\r\n      consistency: sessionData.performance.consistency,\r\n      updatedAt: new Date()\r\n    };\r\n\r\n    // Check for immediate concerns\r\n    if (sessionData.performance.targetAchievement.grade === 'D') {\r\n      console.warn('⚠️ Poor target achievement - consider technique review');\r\n    }\r\n\r\n    if (sessionData.performance.consistency.rating === 'poor') {\r\n      console.warn('⚠️ Poor consistency - fatigue or technique issues');\r\n    }\r\n\r\n    // Update fatigue indicators\r\n    const fatigueData = this.extractFatigueFromSession(sessionData);\r\n    if (isHighFatigue(sessionData.muscle, fatigueData, trainingState)) {\r\n      console.warn(`🚨 High fatigue detected for ${sessionData.muscle}`);\r\n      \r\n      // Auto-trigger recovery recommendations\r\n      this.triggerRecoveryRecommendations(sessionData.muscle);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process live set data for immediate feedback\r\n   * @param {Object} setData - Set data from live monitor\r\n   */\r\n  processLiveSetData(setData) {\r\n    // Real-time fatigue detection\r\n    if (setData.setInfo.rir > setData.setInfo.targetRIR + 2) {\r\n      console.log('💡 Tip: Consider increasing weight next set');\r\n    }\r\n\r\n    // Technique breakdown detection\r\n    if (setData.setInfo.techniqueRating && setData.setInfo.techniqueRating < 6) {\r\n      console.warn('⚠️ Technique breakdown detected - consider stopping or reducing weight');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger recovery recommendations for high fatigue muscle\r\n   * @param {string} muscle - Muscle group\r\n   */\r\n  triggerRecoveryRecommendations(muscle) {\r\n    const recommendations = {\r\n      immediate: [\r\n        'Reduce training volume by 20-30% next session',\r\n        'Extend rest periods between sets',\r\n        'Focus on technique over intensity'\r\n      ],\r\n      shortTerm: [\r\n        'Add extra rest day before next session',\r\n        'Implement stress management techniques',\r\n        'Prioritize sleep quality (8+ hours)'\r\n      ],\r\n      longTerm: [\r\n        'Consider deload if fatigue persists',\r\n        'Review nutrition and hydration status',\r\n        'Assess life stress factors'\r\n      ]\r\n    };\r\n\r\n    console.log(`🔧 Recovery recommendations for ${muscle}:`, recommendations);\r\n    \r\n    // Could trigger UI notification here\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Get historical training data\r\n   * @returns {Array} - Historical data\r\n   */\r\n  getHistoricalData() {\r\n    const data = [];\r\n    \r\n    // Retrieve from localStorage\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('session-')) {\r\n        try {\r\n          const sessionData = JSON.parse(localStorage.getItem(key));\r\n          data.push(sessionData);\r\n        } catch (e) {\r\n          console.warn('Failed to parse session data:', key);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Sort by date\r\n    return data.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));\r\n  }\r\n\r\n  /**\r\n   * Estimate current fatigue level for muscle\r\n   * @param {string} muscle - Muscle group\r\n   * @returns {number} - Fatigue level (1-10)\r\n   */\r\n  estimateFatigueLevel(muscle) {\r\n    const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n    const baselineFatigue = {\r\n      'under-minimum': 2,\r\n      'optimal': 4,\r\n      'high': 6,\r\n      'maximum': 8\r\n    };\r\n    \r\n    let fatigue = baselineFatigue[volumeStatus] || 5;\r\n    \r\n    // Adjust based on recent session data\r\n    const recentInsight = this.trainingInsights[muscle];\r\n    if (recentInsight) {\r\n      if (recentInsight.performance.consistency.rating === 'poor') {\r\n        fatigue += 2;\r\n      }\r\n      if (recentInsight.performance.targetAchievement.grade === 'D') {\r\n        fatigue += 1;\r\n      }\r\n    }\r\n    \r\n    return Math.min(10, Math.max(1, fatigue));\r\n  }\r\n\r\n  /**\r\n   * Get recently used exercises for muscle\r\n   * @param {string} muscle - Muscle group\r\n   * @returns {Array} - Recent exercises\r\n   */\r\n  getRecentExercises(muscle) {\r\n    const recentSessions = this.getHistoricalData()\r\n      .filter(session => session.muscle === muscle)\r\n      .slice(-3); // Last 3 sessions\r\n    \r\n    return recentSessions.map(session => session.exercise);\r\n  }\r\n\r\n  /**\r\n   * Get muscles showing high fatigue\r\n   * @returns {Array} - High fatigue muscles\r\n   */\r\n  getHighFatigueMuscles() {\r\n    return Object.keys(trainingState.volumeLandmarks)\r\n      .filter(muscle => this.estimateFatigueLevel(muscle) >= 7);\r\n  }\r\n\r\n  /**\r\n   * Calculate volume progression rate\r\n   * @returns {number} - Sets per week progression rate\r\n   */\r\n  calculateVolumeProgressionRate() {\r\n    const historicalData = this.getHistoricalData();\r\n    if (historicalData.length < 3) return 0;\r\n    \r\n    const recentWeeks = historicalData.slice(-3);\r\n    const volumeChanges = [];\r\n    \r\n    for (let i = 1; i < recentWeeks.length; i++) {\r\n      const volumeChange = recentWeeks[i].totalSets - recentWeeks[i-1].totalSets;\r\n      volumeChanges.push(volumeChange);\r\n    }\r\n    \r\n    return volumeChanges.reduce((a, b) => a + b, 0) / volumeChanges.length;\r\n  }\r\n\r\n  /**\r\n   * Detect performance decline\r\n   * @returns {boolean} - True if decline detected\r\n   */\r\n  detectPerformanceDecline() {\r\n    const historicalData = this.getHistoricalData();\r\n    if (historicalData.length < 3) return false;\r\n    \r\n    const recentPerformance = historicalData.slice(-3)\r\n      .map(session => session.performance?.targetAchievement?.targetPercentage || 70);\r\n    \r\n    return recentPerformance.every((perf, i) => \r\n      i === 0 || perf <= recentPerformance[i-1]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Detect stale exercises (used for too long)\r\n   * @returns {Array} - Stale exercises\r\n   */\r\n  detectStaleExercises() {\r\n    const historicalData = this.getHistoricalData();\r\n    const exerciseUsage = {};\r\n    \r\n    // Count recent exercise usage\r\n    historicalData.slice(-6).forEach(session => {\r\n      const key = `${session.muscle}-${session.exercise}`;\r\n      exerciseUsage[key] = (exerciseUsage[key] || 0) + 1;\r\n    });\r\n    \r\n    // Find overused exercises\r\n    return Object.entries(exerciseUsage)\r\n      .filter(([key, count]) => count >= 4)\r\n      .map(([key, count]) => ({ exercise: key, usageCount: count }));\r\n  }\r\n\r\n  /**\r\n   * Generate risk mitigation recommendations\r\n   * @param {number} riskScore - Risk score\r\n   * @param {Array} riskFactors - Risk factors\r\n   * @returns {Array} - Recommendations\r\n   */\r\n  generateRiskMitigationRecommendations(riskScore, riskFactors) {\r\n    const recommendations = [];\r\n    \r\n    if (riskScore >= 75) {\r\n      recommendations.push('Implement immediate deload (50% volume reduction)');\r\n      recommendations.push('Address sleep and stress management urgently');\r\n    } else if (riskScore >= 50) {\r\n      recommendations.push('Plan deload within 1-2 weeks');\r\n      recommendations.push('Reduce volume progression rate');\r\n    } else if (riskScore >= 25) {\r\n      recommendations.push('Monitor fatigue indicators closely');\r\n      recommendations.push('Ensure adequate recovery between sessions');\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Calculate improvement estimate for optimization\r\n   * @param {string} muscle - Muscle group\r\n   * @param {Object} optimizedLandmarks - Optimized landmarks\r\n   * @returns {Object} - Improvement estimate\r\n   */\r\n  calculateImprovementEstimate(muscle, optimizedLandmarks) {\r\n    const current = trainingState.volumeLandmarks[muscle];\r\n    const optimized = optimizedLandmarks;\r\n    \r\n    const mevImprovement = ((optimized.MEV - current.MEV) / current.MEV) * 100;\r\n    const mavImprovement = ((optimized.MAV - current.MAV) / current.MAV) * 100;\r\n    \r\n    return {\r\n      mevChange: Math.round(mevImprovement),\r\n      mavChange: Math.round(mavImprovement),\r\n      estimatedVolumeIncrease: Math.round((mevImprovement + mavImprovement) / 2),\r\n      confidence: optimized.confidence\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Extract fatigue data from session\r\n   * @param {Object} sessionData - Session data\r\n   * @returns {Object} - Fatigue data\r\n   */\r\n  extractFatigueFromSession(sessionData) {\r\n    return {\r\n      soreness: sessionData.performance.consistency.rating === 'poor' ? 3 : 1,\r\n      jointAche: 0, // Would need user input\r\n      perfChange: sessionData.performance.targetAchievement.grade === 'A' ? 1 : 0,\r\n      pump: sessionData.progress.totalLoad > 1000 ? 3 : 2,\r\n      disruption: sessionData.progress.totalLoad > 1000 ? 3 : 2,\r\n      lastLoad: Math.max(...sessionData.sets.map(set => set.weight))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Predict deload timing using analytics\r\n   * @returns {Object} - Deload prediction\r\n   */\r\n  predictDeloadTiming() {\r\n    if (!this.analyticsEnabled) {\r\n      return { weeksUntilDeload: Infinity, confidence: 0 };\r\n    }\r\n\r\n    const historicalData = this.getHistoricalData();\r\n    const recentMetrics = {\r\n      weeklyFatigueScore: historicalData.slice(-4).map(week => \r\n        this.estimateFatigueLevel(week.muscle)\r\n      ),\r\n      performanceTrend: historicalData.slice(-4).map(week => \r\n        week.performance?.targetAchievement?.targetPercentage || 70\r\n      ),\r\n      volumeProgression: historicalData.slice(-4).map(week => week.totalSets || 0),\r\n      motivationLevel: 7, // Would need user input\r\n      sleepQuality: 7 // Would need user input\r\n    };\r\n\r\n    return predictDeloadTiming(recentMetrics);\r\n  }\r\n\r\n  /**\r\n   * Detect training plateaus using analytics\r\n   * @returns {Object} - Plateau analysis\r\n   */\r\n  detectPlateaus() {\r\n    if (!this.analyticsEnabled) {\r\n      return { plateauDetected: false };\r\n    }\r\n\r\n    const historicalData = this.getHistoricalData();\r\n    const trainingData = {\r\n      weeklyPerformance: historicalData.slice(-6).map(week => \r\n        week.performance?.targetAchievement?.targetPercentage || 70\r\n      ),\r\n      weeklyVolume: historicalData.slice(-6).map(week => week.totalSets || 0),\r\n      weeklyIntensity: historicalData.slice(-6).map(week => \r\n        week.averageRIR ? (10 - week.averageRIR) : 7\r\n      ),\r\n      weeklyFatigue: historicalData.slice(-6).map(week => \r\n        this.estimateFatigueLevel(week.muscle)\r\n      )\r\n    };\r\n\r\n    return detectTrainingPlateaus(trainingData);\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst advancedIntelligence = new AdvancedTrainingIntelligence();\r\n\r\nexport {\r\n  AdvancedTrainingIntelligence,\r\n  advancedIntelligence\r\n};\r\n","/**\r\n * Advanced Data Visualization and Analytics Enhancement\r\n * Provides sophisticated charting, trend analysis, and visual insights\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Advanced Training Data Visualizer\r\n * Creates sophisticated charts and visual analytics\r\n */\r\nclass AdvancedDataVisualizer {\r\n  constructor() {\r\n    this.chartConfigs = {\r\n      performance: this.getPerformanceChartConfig(),\r\n      volume: this.getVolumeChartConfig(),\r\n      fatigue: this.getFatigueChartConfig(),\r\n      intelligence: this.getIntelligenceChartConfig()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create comprehensive training dashboard\r\n   * @returns {Object} - Dashboard data\r\n   */\r\n  createTrainingDashboard() {\r\n    const historicalData = this.getHistoricalData();\r\n    \r\n    return {\r\n      overview: this.generateOverviewMetrics(historicalData),\r\n      trends: this.generateTrendAnalysis(historicalData),\r\n      predictions: this.generatePredictiveAnalytics(historicalData),\r\n      recommendations: this.generateActionableInsights(historicalData),\r\n      visualizations: this.generateChartData(historicalData)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate performance trend visualization\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Chart configuration\r\n   */\r\n  generatePerformanceTrendChart(data) {\r\n    const last12Weeks = data.slice(-12);\r\n    \r\n    const chartData = {\r\n      labels: last12Weeks.map(week => `Week ${week.weekNo}`),\r\n      datasets: [\r\n        {\r\n          label: 'Performance Score',\r\n          data: last12Weeks.map(week => \r\n            week.performance?.targetAchievement?.targetPercentage || 70\r\n          ),\r\n          borderColor: 'rgb(99, 102, 241)',\r\n          backgroundColor: 'rgba(99, 102, 241, 0.1)',\r\n          tension: 0.4,\r\n          fill: true\r\n        },\r\n        {\r\n          label: 'Fatigue Level',\r\n          data: last12Weeks.map(week => week.fatigueScore || 5),\r\n          borderColor: 'rgb(239, 68, 68)',\r\n          backgroundColor: 'rgba(239, 68, 68, 0.1)',\r\n          tension: 0.4,\r\n          yAxisID: 'y1'\r\n        }\r\n      ]\r\n    };\r\n\r\n    return {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: this.getAdvancedChartOptions()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate volume progression heatmap\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Heatmap data\r\n   */\r\n  generateVolumeHeatmap(data) {\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    const weeks = Array.from({length: 12}, (_, i) => i + 1);\r\n    \r\n    const heatmapData = muscles.map(muscle => {\r\n      return weeks.map(week => {\r\n        const weekData = data.find(d => d.weekNo === week && d.muscle === muscle);\r\n        const volume = weekData?.totalSets || 0;\r\n        const landmarks = trainingState.volumeLandmarks[muscle];\r\n        \r\n        // Calculate intensity relative to landmarks\r\n        let intensity = 0;\r\n        if (volume >= landmarks.MRV) intensity = 1.0;\r\n        else if (volume >= landmarks.MAV) intensity = 0.8;\r\n        else if (volume >= landmarks.MEV) intensity = 0.6;\r\n        else intensity = 0.3;\r\n        \r\n        return {\r\n          x: week,\r\n          y: muscle,\r\n          value: volume,\r\n          intensity: intensity\r\n        };\r\n      });\r\n    }).flat();\r\n\r\n    return {\r\n      data: heatmapData,\r\n      config: this.getHeatmapConfig()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate predictive analytics chart\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Prediction chart\r\n   */\r\n  generatePredictiveChart(data) {\r\n    const recentWeeks = data.slice(-6);\r\n    const futureWeeks = 4;\r\n    \r\n    // Calculate trend lines\r\n    const performanceTrend = this.calculateTrendLine(\r\n      recentWeeks.map((week, i) => [i, week.performance?.targetAchievement?.targetPercentage || 70])\r\n    );\r\n    \r\n    const fatigueTrend = this.calculateTrendLine(\r\n      recentWeeks.map((week, i) => [i, week.fatigueScore || 5])\r\n    );\r\n\r\n    // Project future values\r\n    const futureLabels = Array.from({length: futureWeeks}, (_, i) => \r\n      `Predicted Week ${recentWeeks.length + i + 1}`\r\n    );\r\n    \r\n    const futurePerformance = Array.from({length: futureWeeks}, (_, i) => \r\n      Math.max(0, Math.min(100, performanceTrend.slope * (recentWeeks.length + i) + performanceTrend.intercept))\r\n    );\r\n    \r\n    const futureFatigue = Array.from({length: futureWeeks}, (_, i) => \r\n      Math.max(0, Math.min(10, fatigueTrend.slope * (recentWeeks.length + i) + fatigueTrend.intercept))\r\n    );\r\n\r\n    return {\r\n      type: 'line',\r\n      data: {\r\n        labels: [\r\n          ...recentWeeks.map(week => `Week ${week.weekNo}`),\r\n          ...futureLabels\r\n        ],\r\n        datasets: [\r\n          {\r\n            label: 'Historical Performance',\r\n            data: [\r\n              ...recentWeeks.map(week => week.performance?.targetAchievement?.targetPercentage || 70),\r\n              ...Array(futureWeeks).fill(null)\r\n            ],\r\n            borderColor: 'rgb(99, 102, 241)',\r\n            backgroundColor: 'rgba(99, 102, 241, 0.1)',\r\n            pointRadius: 5\r\n          },\r\n          {\r\n            label: 'Predicted Performance',\r\n            data: [\r\n              ...Array(recentWeeks.length).fill(null),\r\n              recentWeeks[recentWeeks.length - 1]?.performance?.targetAchievement?.targetPercentage || 70,\r\n              ...futurePerformance\r\n            ],\r\n            borderColor: 'rgb(99, 102, 241)',\r\n            backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n            borderDash: [5, 5],\r\n            pointRadius: 3\r\n          }\r\n        ]\r\n      },\r\n      options: this.getPredictiveChartOptions()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate muscle group comparison radar chart\r\n   * @returns {Object} - Radar chart data\r\n   */\r\n  generateMuscleComparisonRadar() {\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    const currentWeek = trainingState.weekNo;\r\n    \r\n    const dataPoints = muscles.map(muscle => {\r\n      const volumeStatus = trainingState.getVolumeStatus(muscle);\r\n      const landmarks = trainingState.volumeLandmarks[muscle];\r\n      const currentSets = trainingState.currentWeekSets[muscle] || 0;\r\n      \r\n      // Calculate percentages\r\n      const mevPercentage = (currentSets / landmarks.MEV) * 100;\r\n      const mavPercentage = (currentSets / landmarks.MAV) * 100;\r\n      const mrvPercentage = (currentSets / landmarks.MRV) * 100;\r\n      \r\n      return {\r\n        muscle,\r\n        efficiency: Math.min(100, mevPercentage),\r\n        volume: Math.min(100, mavPercentage),\r\n        intensity: Math.min(100, mrvPercentage),\r\n        status: this.getVolumeStatusScore(volumeStatus)\r\n      };\r\n    });\r\n\r\n    return {\r\n      type: 'radar',\r\n      data: {\r\n        labels: muscles,\r\n        datasets: [{\r\n          label: 'Current Training Distribution',\r\n          data: dataPoints.map(point => point.efficiency),\r\n          borderColor: 'rgb(99, 102, 241)',\r\n          backgroundColor: 'rgba(99, 102, 241, 0.2)',\r\n          pointBackgroundColor: 'rgb(99, 102, 241)',\r\n          pointBorderColor: '#fff',\r\n          pointHoverBackgroundColor: '#fff',\r\n          pointHoverBorderColor: 'rgb(99, 102, 241)'\r\n        }]\r\n      },\r\n      options: this.getRadarChartOptions()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate interactive timeline visualization\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Timeline data\r\n   */\r\n  generateTrainingTimeline(data) {\r\n    const timeline = data.map(week => {\r\n      const events = [];\r\n      \r\n      // Volume milestones\r\n      if (week.volumeProgression?.deloadTriggered) {\r\n        events.push({\r\n          type: 'deload',\r\n          title: 'Deload Week',\r\n          description: 'Training volume reduced for recovery',\r\n          severity: 'high'\r\n        });\r\n      }\r\n      \r\n      // Performance achievements\r\n      if (week.performance?.targetAchievement?.grade === 'A') {\r\n        events.push({\r\n          type: 'achievement',\r\n          title: 'Excellent Performance',\r\n          description: 'Training targets exceeded',\r\n          severity: 'success'\r\n        });\r\n      }\r\n      \r\n      // Fatigue warnings\r\n      if (week.fatigueScore >= 7) {\r\n        events.push({\r\n          type: 'warning',\r\n          title: 'High Fatigue Detected',\r\n          description: 'Consider recovery protocols',\r\n          severity: 'warning'\r\n        });\r\n      }\r\n\r\n      return {\r\n        week: week.weekNo,\r\n        date: week.startTime,\r\n        events,\r\n        metrics: {\r\n          totalVolume: week.totalSets || 0,\r\n          avgPerformance: week.performance?.targetAchievement?.targetPercentage || 70,\r\n          fatigueLevel: week.fatigueScore || 5\r\n        }\r\n      };\r\n    });\r\n\r\n    return timeline;\r\n  }\r\n\r\n  /**\r\n   * Generate executive summary metrics\r\n   * @param {Array} data - Historical training data\r\n   * @returns {Object} - Summary metrics\r\n   */\r\n  generateExecutiveSummary(data) {\r\n    const recentData = data.slice(-4);\r\n    \r\n    return {\r\n      trainingConsistency: this.calculateConsistency(recentData),\r\n      performanceTrend: this.calculatePerformanceTrend(recentData),\r\n      volumeEfficiency: this.calculateVolumeEfficiency(recentData),\r\n      recoveryStatus: this.calculateRecoveryStatus(recentData),\r\n      nextActions: this.generateNextActions(recentData),\r\n      keyInsights: this.generateKeyInsights(recentData)\r\n    };\r\n  }\r\n\r\n  // Helper methods for calculations and configurations\r\n\r\n  calculateTrendLine(points) {\r\n    const n = points.length;\r\n    const sumX = points.reduce((sum, point) => sum + point[0], 0);\r\n    const sumY = points.reduce((sum, point) => sum + point[1], 0);\r\n    const sumXY = points.reduce((sum, point) => sum + point[0] * point[1], 0);\r\n    const sumXX = points.reduce((sum, point) => sum + point[0] * point[0], 0);\r\n    \r\n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\r\n    const intercept = (sumY - slope * sumX) / n;\r\n    \r\n    return { slope, intercept };\r\n  }\r\n\r\n  calculateConsistency(data) {\r\n    const sessions = data.filter(week => week.totalSets > 0);\r\n    return (sessions.length / data.length) * 100;\r\n  }\r\n\r\n  calculatePerformanceTrend(data) {\r\n    const performances = data.map(week => \r\n      week.performance?.targetAchievement?.targetPercentage || 70\r\n    );\r\n    const trend = this.calculateTrendLine(\r\n      performances.map((perf, i) => [i, perf])\r\n    );\r\n    return trend.slope;\r\n  }\r\n\r\n  getVolumeStatusScore(status) {\r\n    const scores = {\r\n      'under-minimum': 25,\r\n      'optimal': 75,\r\n      'high': 90,\r\n      'maximum': 100\r\n    };\r\n    return scores[status] || 50;\r\n  }\r\n\r\n  getHistoricalData() {\r\n    const data = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('session-')) {\r\n        try {\r\n          const sessionData = JSON.parse(localStorage.getItem(key));\r\n          data.push(sessionData);\r\n        } catch (e) {\r\n          console.warn('Failed to parse session data:', key);\r\n        }\r\n      }\r\n    }\r\n    return data.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));\r\n  }\r\n\r\n  getAdvancedChartOptions() {\r\n    return {\r\n      responsive: true,\r\n      interaction: {\r\n        mode: 'index',\r\n        intersect: false,\r\n      },\r\n      scales: {\r\n        x: {\r\n          display: true,\r\n          title: {\r\n            display: true,\r\n            text: 'Training Week'\r\n          }\r\n        },\r\n        y: {\r\n          type: 'linear',\r\n          display: true,\r\n          position: 'left',\r\n          title: {\r\n            display: true,\r\n            text: 'Performance %'\r\n          }\r\n        },\r\n        y1: {\r\n          type: 'linear',\r\n          display: true,\r\n          position: 'right',\r\n          title: {\r\n            display: true,\r\n            text: 'Fatigue Level'\r\n          },\r\n          grid: {\r\n            drawOnChartArea: false,\r\n          },\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  getPredictiveChartOptions() {\r\n    return {\r\n      responsive: true,\r\n      plugins: {\r\n        title: {\r\n          display: true,\r\n          text: 'Performance Prediction Analysis'\r\n        },\r\n        legend: {\r\n          display: true\r\n        }\r\n      },\r\n      scales: {\r\n        x: {\r\n          title: {\r\n            display: true,\r\n            text: 'Training Timeline'\r\n          }\r\n        },\r\n        y: {\r\n          title: {\r\n            display: true,\r\n            text: 'Performance Score'\r\n          },\r\n          min: 0,\r\n          max: 100\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  generateNextActions(data) {\r\n    const actions = [];\r\n    const latest = data[data.length - 1];\r\n    \r\n    if (latest?.fatigueScore >= 7) {\r\n      actions.push('Consider deload or extra recovery day');\r\n    }\r\n    \r\n    if (this.calculatePerformanceTrend(data) < -2) {\r\n      actions.push('Review training intensity and technique');\r\n    }\r\n    \r\n    if (this.calculateConsistency(data) < 75) {\r\n      actions.push('Focus on training consistency');\r\n    }\r\n    \r\n    return actions;\r\n  }\r\n\r\n  generateKeyInsights(data) {\r\n    const insights = [];\r\n    const trend = this.calculatePerformanceTrend(data);\r\n    \r\n    if (trend > 2) {\r\n      insights.push('Performance is trending upward - excellent progress');\r\n    } else if (trend < -2) {\r\n      insights.push('Performance decline detected - review program');\r\n    }\r\n    \r\n    const avgVolume = data.reduce((sum, week) => sum + (week.totalSets || 0), 0) / data.length;\r\n    if (avgVolume > 50) {\r\n      insights.push('High volume training detected - monitor recovery');\r\n    }\r\n    \r\n    return insights;\r\n  }\r\n}\r\n\r\n// Export for use in main application\r\nexport {\r\n  AdvancedDataVisualizer\r\n};\r\n\r\n// Create singleton instance\r\nexport const dataVisualizer = new AdvancedDataVisualizer();\r\n","/**\r\n * Advanced Recovery & Wellness Integration\r\n * Comprehensive sleep, stress, and lifestyle factor integration\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\nimport { isHighFatigue } from './fatigue.js';\r\n\r\n/**\r\n * Advanced Wellness & Recovery System\r\n * Integrates sleep, stress, nutrition, and lifestyle factors\r\n */\r\nclass WellnessRecoverySystem {\r\n  constructor() {\r\n    this.wellnessMetrics = this.initializeWellnessTracking();\r\n    this.recoveryProtocols = this.initializeRecoveryProtocols();\r\n  }\r\n\r\n  /**\r\n   * Initialize wellness tracking system\r\n   */\r\n  initializeWellnessTracking() {\r\n    return {\r\n      sleep: {\r\n        duration: 7.5,\r\n        quality: 7,\r\n        efficiency: 85,\r\n        deepSleepPercentage: 20,\r\n        wakeups: 1,\r\n        bedtimeConsistency: 8\r\n      },\r\n      stress: {\r\n        workStress: 5,\r\n        lifeStress: 4,\r\n        trainingStress: 6,\r\n        overallStress: 5,\r\n        stressManagementPractices: []\r\n      },\r\n      nutrition: {\r\n        hydration: 7,\r\n        proteinAdequacy: 8,\r\n        carbTiming: 7,\r\n        micronutrients: 6,\r\n        mealTiming: 7,\r\n        supplements: []\r\n      },\r\n      lifestyle: {\r\n        screenTime: 6,\r\n        sunlightExposure: 5,\r\n        socialConnection: 7,\r\n        natureExposure: 4,\r\n        workLifeBalance: 6\r\n      },\r\n      physiological: {\r\n        restingHeartRate: 60,\r\n        heartRateVariability: 35,\r\n        bodyTemperature: 98.6,\r\n        bloodPressure: { systolic: 120, diastolic: 80 },\r\n        bodyWeight: 180\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize recovery protocol library\r\n   */\r\n  initializeRecoveryProtocols() {\r\n    return {\r\n      sleep: {\r\n        optimization: [\r\n          'Maintain consistent bedtime ±30 minutes',\r\n          'Limit blue light 2 hours before bed',\r\n          'Keep bedroom temperature 65-68°F (18-20°C)',\r\n          'Use blackout curtains or eye mask',\r\n          'Avoid caffeine 8+ hours before bed'\r\n        ],\r\n        intervention: [\r\n          'Implement progressive muscle relaxation',\r\n          'Try guided meditation apps (Headspace, Calm)',\r\n          'Consider magnesium supplementation',\r\n          'Use white noise or earplugs',\r\n          'Review medications affecting sleep'\r\n        ]\r\n      },\r\n      stress: {\r\n        daily: [\r\n          '10-minute meditation or breathing exercises',\r\n          'Schedule stress-free time blocks',\r\n          'Practice gratitude journaling',\r\n          'Limit news/social media consumption',\r\n          'Engage in enjoyable hobbies'\r\n        ],\r\n        acute: [\r\n          'Box breathing (4-4-4-4 pattern)',\r\n          'Progressive muscle relaxation',\r\n          'Take a walk in nature',\r\n          'Call a supportive friend/family member',\r\n          'Use stress management apps'\r\n        ],\r\n        chronic: [\r\n          'Consider professional counseling',\r\n          'Evaluate and modify stressors where possible',\r\n          'Develop robust stress management routine',\r\n          'Consider stress-reducing supplements',\r\n          'Implement time management strategies'\r\n        ]\r\n      },\r\n      nutrition: {\r\n        hydration: [\r\n          'Aim for 35-40ml per kg body weight daily',\r\n          'Monitor urine color (pale yellow optimal)',\r\n          'Increase intake during training days',\r\n          'Add electrolytes for sessions >90 minutes',\r\n          'Spread intake throughout the day'\r\n        ],\r\n        recovery: [\r\n          'Consume protein within 2 hours post-workout',\r\n          'Include anti-inflammatory foods (berries, fatty fish)',\r\n          'Ensure adequate carbohydrate replenishment',\r\n          'Consider tart cherry juice for sleep/recovery',\r\n          'Time largest meals away from bedtime'\r\n        ],\r\n        energy: [\r\n          'Eat balanced meals every 3-4 hours',\r\n          'Include complex carbs for sustained energy',\r\n          'Don\\'t skip breakfast',\r\n          'Limit processed foods and added sugars',\r\n          'Consider caffeine timing for training'\r\n        ]\r\n      },\r\n      lifestyle: {\r\n        activeRecovery: [\r\n          'Light walking for 20-30 minutes',\r\n          'Gentle yoga or stretching',\r\n          'Swimming at easy pace',\r\n          'Foam rolling or self-massage',\r\n          'Breathing exercises'\r\n        ],\r\n        passiveRecovery: [\r\n          'Massage therapy',\r\n          'Sauna or hot bath',\r\n          'Meditation or mindfulness',\r\n          'Reading or gentle hobbies',\r\n          'Quality time with loved ones'\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Track daily wellness metrics\r\n   * @param {Object} dailyMetrics - Daily wellness data\r\n   */\r\n  trackDailyWellness(dailyMetrics) {\r\n    const wellnessData = {\r\n      date: new Date().toISOString().split('T')[0],\r\n      sleep: dailyMetrics.sleep || {},\r\n      stress: dailyMetrics.stress || {},\r\n      nutrition: dailyMetrics.nutrition || {},\r\n      lifestyle: dailyMetrics.lifestyle || {},\r\n      physiological: dailyMetrics.physiological || {},\r\n      recoveryScore: this.calculateRecoveryScore(dailyMetrics),\r\n      readinessScore: this.calculateReadinessScore(dailyMetrics),\r\n      recommendations: this.generateWellnessRecommendations(dailyMetrics)\r\n    };\r\n\r\n    // Store data\r\n    const key = `wellness-${wellnessData.date}`;\r\n    localStorage.setItem(key, JSON.stringify(wellnessData));\r\n\r\n    // Update current metrics\r\n    this.wellnessMetrics = { ...this.wellnessMetrics, ...dailyMetrics };\r\n\r\n    return wellnessData;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall recovery score\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {number} - Recovery score (0-100)\r\n   */\r\n  calculateRecoveryScore(metrics) {\r\n    let score = 0;\r\n    let factors = 0;\r\n\r\n    // Sleep contribution (40%)\r\n    if (metrics.sleep) {\r\n      const sleepScore = this.calculateSleepScore(metrics.sleep);\r\n      score += sleepScore * 0.4;\r\n      factors += 0.4;\r\n    }\r\n\r\n    // Stress contribution (25%)\r\n    if (metrics.stress) {\r\n      const stressScore = this.calculateStressScore(metrics.stress);\r\n      score += stressScore * 0.25;\r\n      factors += 0.25;\r\n    }\r\n\r\n    // Nutrition contribution (20%)\r\n    if (metrics.nutrition) {\r\n      const nutritionScore = this.calculateNutritionScore(metrics.nutrition);\r\n      score += nutritionScore * 0.2;\r\n      factors += 0.2;\r\n    }\r\n\r\n    // Lifestyle contribution (15%)\r\n    if (metrics.lifestyle) {\r\n      const lifestyleScore = this.calculateLifestyleScore(metrics.lifestyle);\r\n      score += lifestyleScore * 0.15;\r\n      factors += 0.15;\r\n    }\r\n\r\n    return factors > 0 ? Math.round(score / factors) : 50;\r\n  }\r\n\r\n  /**\r\n   * Calculate training readiness score\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {number} - Readiness score (0-100)\r\n   */\r\n  calculateReadinessScore(metrics) {\r\n    const recoveryScore = this.calculateRecoveryScore(metrics);\r\n    const trainingHistory = this.getRecentTrainingLoad();\r\n    const fatigueLevel = this.getCurrentFatigueLevel();\r\n\r\n    // Adjust readiness based on training load and fatigue\r\n    let adjustment = 0;\r\n    \r\n    if (trainingHistory.consecutiveHighDays >= 3) {\r\n      adjustment -= 15;\r\n    }\r\n    \r\n    if (fatigueLevel >= 7) {\r\n      adjustment -= 20;\r\n    }\r\n    \r\n    if (metrics.physiological?.restingHeartRate > this.getBaselineHR() + 10) {\r\n      adjustment -= 10;\r\n    }\r\n\r\n    const readinessScore = Math.max(0, Math.min(100, recoveryScore + adjustment));\r\n    \r\n    return readinessScore;\r\n  }\r\n\r\n  /**\r\n   * Generate personalized wellness recommendations\r\n   * @param {Object} metrics - Daily wellness metrics\r\n   * @returns {Object} - Categorized recommendations\r\n   */\r\n  generateWellnessRecommendations(metrics) {\r\n    const recommendations = {\r\n      priority: [],\r\n      sleep: [],\r\n      stress: [],\r\n      nutrition: [],\r\n      training: []\r\n    };\r\n\r\n    // Sleep recommendations\r\n    if (metrics.sleep?.duration < 7) {\r\n      recommendations.priority.push('Prioritize increasing sleep duration to 7-9 hours');\r\n      recommendations.sleep.push(...this.recoveryProtocols.sleep.optimization);\r\n    }\r\n    \r\n    if (metrics.sleep?.quality < 6) {\r\n      recommendations.sleep.push(...this.recoveryProtocols.sleep.intervention);\r\n    }\r\n\r\n    // Stress recommendations\r\n    if (metrics.stress?.overallStress > 7) {\r\n      recommendations.priority.push('Implement stress management strategies');\r\n      recommendations.stress.push(...this.recoveryProtocols.stress.acute);\r\n    }\r\n\r\n    // Nutrition recommendations\r\n    if (metrics.nutrition?.hydration < 6) {\r\n      recommendations.priority.push('Increase daily hydration');\r\n      recommendations.nutrition.push(...this.recoveryProtocols.nutrition.hydration);\r\n    }\r\n\r\n    // Training modifications\r\n    const readinessScore = this.calculateReadinessScore(metrics);\r\n    if (readinessScore < 60) {\r\n      recommendations.priority.push('Consider reducing training intensity today');\r\n      recommendations.training.push('Focus on technique and movement quality');\r\n      recommendations.training.push('Reduce volume by 20-30%');\r\n      recommendations.training.push('Include extra warm-up and cool-down');\r\n    } else if (readinessScore > 85) {\r\n      recommendations.training.push('Good day for higher intensity training');\r\n      recommendations.training.push('Consider pushing challenging sets');\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Analyze wellness trends over time\r\n   * @param {number} days - Number of days to analyze\r\n   * @returns {Object} - Trend analysis\r\n   */\r\n  analyzeWellnessTrends(days = 14) {\r\n    const wellnessHistory = this.getWellnessHistory(days);\r\n    \r\n    const trends = {\r\n      sleep: this.analyzeSleepTrend(wellnessHistory),\r\n      stress: this.analyzeStressTrend(wellnessHistory),\r\n      recovery: this.analyzeRecoveryTrend(wellnessHistory),\r\n      readiness: this.analyzeReadinessTrend(wellnessHistory),\r\n      correlations: this.analyzeWellnessCorrelations(wellnessHistory)\r\n    };\r\n\r\n    return trends;\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive wellness report\r\n   * @returns {Object} - Complete wellness analysis\r\n   */\r\n  generateWellnessReport() {\r\n    const currentMetrics = this.wellnessMetrics;\r\n    const trends = this.analyzeWellnessTrends(30);\r\n    const trainingImpact = this.analyzeTrainingWellnessImpact();\r\n    \r\n    return {\r\n      current: {\r\n        recoveryScore: this.calculateRecoveryScore(currentMetrics),\r\n        readinessScore: this.calculateReadinessScore(currentMetrics),\r\n        keyMetrics: this.getKeyWellnessMetrics(currentMetrics),\r\n        alerts: this.generateWellnessAlerts(currentMetrics)\r\n      },\r\n      trends,\r\n      trainingImpact,\r\n      recommendations: this.generateWellnessRecommendations(currentMetrics),\r\n      protocols: this.getPersonalizedProtocols(),\r\n      insights: this.generateWellnessInsights(trends, trainingImpact)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Integrate wellness data with training decisions\r\n   * @param {Object} plannedTraining - Planned training session\r\n   * @returns {Object} - Modified training recommendations\r\n   */\r\n  optimizeTrainingBasedOnWellness(plannedTraining) {\r\n    const readinessScore = this.calculateReadinessScore(this.wellnessMetrics);\r\n    const recoveryScore = this.calculateRecoveryScore(this.wellnessMetrics);\r\n    \r\n    let modifications = {\r\n      volumeMultiplier: 1.0,\r\n      intensityMultiplier: 1.0,\r\n      recommendations: [],\r\n      rationale: ''\r\n    };\r\n\r\n    // High readiness\r\n    if (readinessScore >= 85 && recoveryScore >= 80) {\r\n      modifications.volumeMultiplier = 1.1;\r\n      modifications.intensityMultiplier = 1.05;\r\n      modifications.recommendations.push('Excellent day for pushing limits');\r\n      modifications.rationale = 'High wellness scores support increased training stress';\r\n    }\r\n    // Moderate readiness\r\n    else if (readinessScore >= 65) {\r\n      // Maintain planned training\r\n      modifications.recommendations.push('Proceed with planned training');\r\n      modifications.rationale = 'Wellness scores support normal training';\r\n    }\r\n    // Low readiness\r\n    else if (readinessScore < 60) {\r\n      modifications.volumeMultiplier = 0.8;\r\n      modifications.intensityMultiplier = 0.9;\r\n      modifications.recommendations.push('Reduce volume and intensity');\r\n      modifications.recommendations.push('Focus on movement quality');\r\n      modifications.rationale = 'Wellness scores suggest increased recovery need';\r\n    }\r\n    // Very low readiness\r\n    else if (readinessScore < 40) {\r\n      modifications.volumeMultiplier = 0.6;\r\n      modifications.intensityMultiplier = 0.8;\r\n      modifications.recommendations.push('Consider active recovery instead');\r\n      modifications.recommendations.push('Light movement, stretching, breathing');\r\n      modifications.rationale = 'Very low wellness scores require prioritizing recovery';\r\n    }\r\n\r\n    return {\r\n      originalTraining: plannedTraining,\r\n      modifications,\r\n      adjustedTraining: this.applyTrainingModifications(plannedTraining, modifications)\r\n    };\r\n  }\r\n\r\n  // Helper methods for calculations\r\n\r\n  calculateSleepScore(sleep) {\r\n    let score = 0;\r\n    score += Math.min(100, (sleep.duration / 8) * 40); // Duration (40%)\r\n    score += (sleep.quality / 10) * 30; // Quality (30%)\r\n    score += (sleep.efficiency / 100) * 20; // Efficiency (20%)\r\n    score += Math.max(0, (10 - sleep.wakeups) / 10) * 10; // Consistency (10%)\r\n    return Math.round(score);\r\n  }\r\n\r\n  calculateStressScore(stress) {\r\n    const avgStress = (stress.workStress + stress.lifeStress + stress.trainingStress) / 3;\r\n    return Math.round(Math.max(0, 100 - (avgStress * 10)));\r\n  }\r\n\r\n  calculateNutritionScore(nutrition) {\r\n    const factors = ['hydration', 'proteinAdequacy', 'carbTiming', 'micronutrients', 'mealTiming'];\r\n    const avg = factors.reduce((sum, factor) => sum + (nutrition[factor] || 5), 0) / factors.length;\r\n    return Math.round((avg / 10) * 100);\r\n  }\r\n\r\n  calculateLifestyleScore(lifestyle) {\r\n    const factors = ['screenTime', 'sunlightExposure', 'socialConnection', 'natureExposure', 'workLifeBalance'];\r\n    const avg = factors.reduce((sum, factor) => sum + (lifestyle[factor] || 5), 0) / factors.length;\r\n    return Math.round((avg / 10) * 100);\r\n  }\r\n\r\n  getWellnessHistory(days) {\r\n    const history = [];\r\n    const today = new Date();\r\n    \r\n    for (let i = 0; i < days; i++) {\r\n      const date = new Date(today);\r\n      date.setDate(date.getDate() - i);\r\n      const key = `wellness-${date.toISOString().split('T')[0]}`;\r\n      const data = localStorage.getItem(key);\r\n      \r\n      if (data) {\r\n        try {\r\n          history.push(JSON.parse(data));\r\n        } catch (e) {\r\n          console.warn('Failed to parse wellness data:', key);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return history.reverse(); // Chronological order\r\n  }\r\n\r\n  getRecentTrainingLoad() {\r\n    // This would integrate with existing training data\r\n    return {\r\n      consecutiveHighDays: 2,\r\n      weeklyVolume: 45,\r\n      intensity: 7\r\n    };\r\n  }\r\n\r\n  getCurrentFatigueLevel() {\r\n    // Integration with existing fatigue system\r\n    return 5; // Placeholder\r\n  }\r\n\r\n  getBaselineHR() {\r\n    return 60; // This would be calculated from historical data\r\n  }\r\n\r\n  applyTrainingModifications(training, modifications) {\r\n    return {\r\n      ...training,\r\n      volume: Math.round(training.volume * modifications.volumeMultiplier),\r\n      intensity: training.intensity * modifications.intensityMultiplier,\r\n      modifications: modifications.recommendations\r\n    };\r\n  }\r\n}\r\n\r\n// Export for use in main application\r\nexport {\r\n  WellnessRecoverySystem\r\n};\r\n\r\n// Create singleton instance\r\nexport const wellnessSystem = new WellnessRecoverySystem();\r\n","/**\r\n * Advanced Periodization & Auto-Planning System\r\n * Intelligent long-term training planning and periodization\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\nimport { wellnessSystem } from './wellnessIntegration.js';\r\nimport { advancedIntelligence } from './intelligenceHub.js';\r\n\r\n/**\r\n * Advanced Periodization System\r\n * Creates intelligent long-term training plans with adaptive periodization\r\n */\r\nclass AdvancedPeriodizationSystem {\r\n  constructor() {\r\n    this.periodizationModels = this.initializePeriodizationModels();\r\n    this.planningTemplates = this.initializePlanningTemplates();\r\n    this.adaptationAlgorithms = this.initializeAdaptationAlgorithms();\r\n  }\r\n\r\n  /**\r\n   * Initialize periodization models\r\n   */\r\n  initializePeriodizationModels() {\r\n    return {\r\n      linear: {\r\n        name: 'Linear Periodization',\r\n        description: 'Progressive volume increase with intensity modulation',\r\n        phases: ['Accumulation', 'Intensification', 'Realization', 'Deload'],\r\n        volumeProgression: [100, 120, 110, 60],\r\n        intensityProgression: [70, 75, 85, 60],\r\n        duration: 4, // weeks\r\n        applications: ['Beginners', 'Strength focus', 'Competition prep']\r\n      },\r\n      undulating: {\r\n        name: 'Undulating Periodization',\r\n        description: 'Frequent variation in volume and intensity',\r\n        phases: ['High Volume', 'High Intensity', 'Moderate', 'Deload'],\r\n        volumeProgression: [130, 80, 100, 60],\r\n        intensityProgression: [70, 90, 80, 60],\r\n        duration: 4,\r\n        applications: ['Intermediate/Advanced', 'Hypertrophy', 'Avoiding plateaus']\r\n      },\r\n      block: {\r\n        name: 'Block Periodization',\r\n        description: 'Focused training blocks with specific adaptations',\r\n        phases: ['Accumulation', 'Intensification', 'Realization'],\r\n        volumeProgression: [120, 90, 70],\r\n        intensityProgression: [75, 85, 95],\r\n        duration: 3,\r\n        applications: ['Advanced athletes', 'Sport-specific', 'Competition cycles']\r\n      },\r\n      conjugate: {\r\n        name: 'Conjugate Method',\r\n        description: 'Simultaneous development of multiple qualities',\r\n        phases: ['Max Effort', 'Dynamic Effort', 'Repetition Method'],\r\n        volumeProgression: [90, 110, 120],\r\n        intensityProgression: [95, 70, 80],\r\n        duration: 3,\r\n        applications: ['Powerlifting', 'Strength athletes', 'Advanced training']\r\n      },\r\n      autoregulated: {\r\n        name: 'Autoregulated Training',\r\n        description: 'AI-driven adaptive periodization based on real-time feedback',\r\n        phases: ['Adaptive', 'Responsive', 'Predictive'],\r\n        volumeProgression: 'dynamic',\r\n        intensityProgression: 'dynamic',\r\n        duration: 'variable',\r\n        applications: ['All levels', 'Optimal adaptation', 'Injury prevention']\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize planning templates\r\n   */\r\n  initializePlanningTemplates() {\r\n    return {\r\n      hypertrophy12Week: {\r\n        name: '12-Week Hypertrophy Specialization',\r\n        duration: 12,\r\n        phases: [\r\n          {\r\n            name: 'Foundation Building',\r\n            weeks: 4,\r\n            focus: 'Volume accumulation and movement quality',\r\n            volumeMultiplier: 1.0,\r\n            intensityRange: [70, 80],\r\n            exercises: 'compound and isolation mix'\r\n          },\r\n          {\r\n            name: 'Progressive Overload',\r\n            weeks: 4,\r\n            focus: 'Systematic volume and intensity increase',\r\n            volumeMultiplier: 1.2,\r\n            intensityRange: [75, 85],\r\n            exercises: 'add complexity and variety'\r\n          },\r\n          {\r\n            name: 'Peak Volume',\r\n            weeks: 3,\r\n            focus: 'Maximum tolerable volume',\r\n            volumeMultiplier: 1.4,\r\n            intensityRange: [70, 80],\r\n            exercises: 'isolation focus for weak points'\r\n          },\r\n          {\r\n            name: 'Deload & Assessment',\r\n            weeks: 1,\r\n            focus: 'Recovery and progress evaluation',\r\n            volumeMultiplier: 0.6,\r\n            intensityRange: [60, 70],\r\n            exercises: 'movement quality and mobility'\r\n          }\r\n        ]\r\n      },\r\n      strength16Week: {\r\n        name: '16-Week Strength Specialization',\r\n        duration: 16,\r\n        phases: [\r\n          {\r\n            name: 'General Preparation',\r\n            weeks: 4,\r\n            focus: 'Movement patterns and base building',\r\n            volumeMultiplier: 1.1,\r\n            intensityRange: [70, 80],\r\n            exercises: 'compound movements with accessories'\r\n          },\r\n          {\r\n            name: 'Specific Preparation',\r\n            weeks: 6,\r\n            focus: 'Strength development in competition lifts',\r\n            volumeMultiplier: 1.0,\r\n            intensityRange: [80, 90],\r\n            exercises: 'competition lifts and close variants'\r\n          },\r\n          {\r\n            name: 'Competition Preparation',\r\n            weeks: 4,\r\n            focus: 'Peak strength and competition readiness',\r\n            volumeMultiplier: 0.8,\r\n            intensityRange: [85, 100],\r\n            exercises: 'competition lifts only'\r\n          },\r\n          {\r\n            name: 'Peaking',\r\n            weeks: 2,\r\n            focus: 'Peak performance',\r\n            volumeMultiplier: 0.5,\r\n            intensityRange: [90, 105],\r\n            exercises: 'competition lifts with opener/attempts'\r\n          }\r\n        ]\r\n      },\r\n      powerbuilding20Week: {\r\n        name: '20-Week Powerbuilding Program',\r\n        duration: 20,\r\n        phases: [\r\n          {\r\n            name: 'Hypertrophy Block',\r\n            weeks: 8,\r\n            focus: 'Muscle mass and volume tolerance',\r\n            volumeMultiplier: 1.3,\r\n            intensityRange: [65, 80],\r\n            exercises: 'high volume, pump-focused'\r\n          },\r\n          {\r\n            name: 'Strength Block',\r\n            weeks: 8,\r\n            focus: 'Maximal strength development',\r\n            volumeMultiplier: 0.9,\r\n            intensityRange: [80, 95],\r\n            exercises: 'compound movements, heavy loads'\r\n          },\r\n          {\r\n            name: 'Power Block',\r\n            weeks: 3,\r\n            focus: 'Power and speed development',\r\n            volumeMultiplier: 0.7,\r\n            intensityRange: [70, 85],\r\n            exercises: 'explosive movements, plyometrics'\r\n          },\r\n          {\r\n            name: 'Deload',\r\n            weeks: 1,\r\n            focus: 'Recovery and reassessment',\r\n            volumeMultiplier: 0.5,\r\n            intensityRange: [60, 70],\r\n            exercises: 'movement quality and mobility'\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize adaptation algorithms\r\n   */\r\n  initializeAdaptationAlgorithms() {\r\n    return {\r\n      volumeAdaptation: {\r\n        minIncrease: 0.05, // 5% minimum\r\n        maxIncrease: 0.25, // 25% maximum\r\n        baseIncrease: 0.10, // 10% standard\r\n        fatigueThreshold: 7,\r\n        recoveryThreshold: 5\r\n      },\r\n      intensityAdaptation: {\r\n        minIncrease: 0.025, // 2.5% minimum\r\n        maxIncrease: 0.10, // 10% maximum  \r\n        baseIncrease: 0.05, // 5% standard\r\n        performanceThreshold: 80,\r\n        plateauThreshold: 75\r\n      },\r\n      frequencyAdaptation: {\r\n        minFrequency: 1,\r\n        maxFrequency: 4,\r\n        recoveryFactor: 0.8,\r\n        volumeFactor: 1.2\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create long-term training plan\r\n   * @param {Object} goals - Training goals and preferences\r\n   * @param {number} duration - Plan duration in weeks\r\n   * @returns {Object} - Complete periodized plan\r\n   */\r\n  createLongTermPlan(goals, duration = 16) {\r\n    const userProfile = this.analyzeUserProfile();\r\n    const selectedModel = this.selectOptimalPeriodization(goals, userProfile);\r\n    const planStructure = this.generatePlanStructure(selectedModel, duration, goals);\r\n    const weeklyPlans = this.generateWeeklyPlans(planStructure);\r\n    const progressionPlan = this.createProgressionPlan(weeklyPlans);\r\n    \r\n    return {\r\n      overview: {\r\n        duration,\r\n        model: selectedModel.name,\r\n        goals: goals,\r\n        userProfile,\r\n        startDate: new Date(),\r\n        estimatedCompletion: this.calculateCompletionDate(duration)\r\n      },\r\n      structure: planStructure,\r\n      weeklyPlans,\r\n      progressionPlan,\r\n      adaptationTriggers: this.defineAdaptationTriggers(),\r\n      milestones: this.definePlanMilestones(duration, goals),\r\n      contingencyPlans: this.createContingencyPlans()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Analyze user training profile\r\n   * @returns {Object} - User profile analysis\r\n   */\r\n  analyzeUserProfile() {\r\n    const historicalData = this.getHistoricalTrainingData();\r\n    const currentCapacity = this.assessCurrentCapacity();\r\n    const responsePatterns = this.analyzeResponsePatterns(historicalData);\r\n    \r\n    return {\r\n      experience: this.determineExperienceLevel(historicalData),\r\n      capacity: currentCapacity,\r\n      responsePatterns,\r\n      preferences: this.analyzeTrainingPreferences(historicalData),\r\n      limitingFactors: this.identifyLimitingFactors(),\r\n      adaptationRate: this.calculateAdaptationRate(historicalData)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Select optimal periodization model\r\n   * @param {Object} goals - Training goals\r\n   * @param {Object} profile - User profile\r\n   * @returns {Object} - Selected periodization model\r\n   */\r\n  selectOptimalPeriodization(goals, profile) {\r\n    const scores = {};\r\n    \r\n    // Score each model based on goals and profile\r\n    Object.entries(this.periodizationModels).forEach(([key, model]) => {\r\n      let score = 0;\r\n      \r\n      // Goal alignment\r\n      if (goals.primary === 'hypertrophy' && model.applications.includes('Hypertrophy')) score += 3;\r\n      if (goals.primary === 'strength' && model.applications.includes('Strength focus')) score += 3;\r\n      if (goals.primary === 'powerlifting' && model.applications.includes('Powerlifting')) score += 3;\r\n      \r\n      // Experience level alignment\r\n      if (profile.experience === 'beginner' && model.applications.includes('Beginners')) score += 2;\r\n      if (profile.experience === 'intermediate' && model.applications.includes('Intermediate/Advanced')) score += 2;\r\n      if (profile.experience === 'advanced' && model.applications.includes('Advanced athletes')) score += 2;\r\n      \r\n      // Adaptation patterns\r\n      if (profile.adaptationRate === 'fast' && key === 'undulating') score += 1;\r\n      if (profile.adaptationRate === 'slow' && key === 'linear') score += 1;\r\n      if (profile.responsePatterns.variabilityTolerance === 'high' && key === 'conjugate') score += 1;\r\n      \r\n      scores[key] = score;\r\n    });\r\n    \r\n    // Select highest scoring model\r\n    const selectedKey = Object.keys(scores).reduce((a, b) => scores[a] > scores[b] ? a : b);\r\n    return this.periodizationModels[selectedKey];\r\n  }\r\n\r\n  /**\r\n   * Generate adaptive weekly plans\r\n   * @param {Object} planStructure - Overall plan structure\r\n   * @returns {Array} - Weekly training plans\r\n   */\r\n  generateWeeklyPlans(planStructure) {\r\n    const weeklyPlans = [];\r\n    let currentWeek = 1;\r\n    \r\n    planStructure.phases.forEach(phase => {\r\n      for (let week = 0; week < phase.weeks; week++) {\r\n        const weekPlan = this.generateWeekPlan(phase, week, currentWeek);\r\n        weeklyPlans.push(weekPlan);\r\n        currentWeek++;\r\n      }\r\n    });\r\n    \r\n    return weeklyPlans;\r\n  }\r\n\r\n  /**\r\n   * Generate individual week plan\r\n   * @param {Object} phase - Current phase\r\n   * @param {number} weekInPhase - Week within phase\r\n   * @param {number} absoluteWeek - Absolute week number\r\n   * @returns {Object} - Week training plan\r\n   */\r\n  generateWeekPlan(phase, weekInPhase, absoluteWeek) {\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    const weekProgression = (weekInPhase + 1) / phase.weeks;\r\n    \r\n    const plan = {\r\n      week: absoluteWeek,\r\n      phase: phase.name,\r\n      focus: phase.focus,\r\n      progressionFactor: weekProgression,\r\n      muscles: {}\r\n    };\r\n    \r\n    muscles.forEach(muscle => {\r\n      const baseLandmarks = trainingState.volumeLandmarks[muscle];\r\n      const adjustedLandmarks = this.adjustLandmarksForPhase(baseLandmarks, phase, weekProgression);\r\n      \r\n      plan.muscles[muscle] = {\r\n        landmarks: adjustedLandmarks,\r\n        targetSets: this.calculateTargetSets(adjustedLandmarks, phase),\r\n        intensityRange: phase.intensityRange,\r\n        exerciseSelection: this.selectPhaseExercises(muscle, phase),\r\n        loadProgression: this.calculateLoadProgression(phase, weekProgression),\r\n        recoveryRequirements: this.calculateRecoveryRequirements(muscle, phase)\r\n      };\r\n    });\r\n    \r\n    return plan;\r\n  }\r\n\r\n  /**\r\n   * Create adaptive progression system\r\n   * @param {Array} weeklyPlans - All weekly plans\r\n   * @returns {Object} - Progression management system\r\n   */\r\n  createProgressionPlan(weeklyPlans) {\r\n    return {\r\n      volumeProgression: this.createVolumeProgression(weeklyPlans),\r\n      intensityProgression: this.createIntensityProgression(weeklyPlans),\r\n      exerciseProgression: this.createExerciseProgression(weeklyPlans),\r\n      deloadTriggers: this.defineDeloadTriggers(),\r\n      adaptationChecks: this.scheduleAdaptationChecks(weeklyPlans),\r\n      autoAdjustmentRules: this.defineAutoAdjustmentRules()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Real-time plan adaptation based on performance\r\n   * @param {Object} currentPlan - Current training plan\r\n   * @param {Object} recentPerformance - Recent performance data\r\n   * @returns {Object} - Adapted plan\r\n   */\r\n  adaptPlanBasedOnPerformance(currentPlan, recentPerformance) {\r\n    const adaptations = {\r\n      volumeAdjustment: 1.0,\r\n      intensityAdjustment: 1.0,\r\n      frequencyAdjustment: 1.0,\r\n      exerciseModifications: [],\r\n      phaseModifications: [],\r\n      reasoning: []\r\n    };\r\n    \r\n    // Analyze performance trends\r\n    const performanceTrend = this.analyzePerformanceTrend(recentPerformance);\r\n    const fatigueStatus = this.assessFatigueStatus(recentPerformance);\r\n    const wellnessImpact = this.assessWellnessImpact();\r\n    \r\n    // Apply adaptations based on analysis\r\n    if (performanceTrend.direction === 'declining' && performanceTrend.significance > 0.7) {\r\n      adaptations.volumeAdjustment = 0.85;\r\n      adaptations.intensityAdjustment = 0.9;\r\n      adaptations.reasoning.push('Performance decline detected - reducing training stress');\r\n    }\r\n    \r\n    if (fatigueStatus.level === 'high' && fatigueStatus.duration >= 3) {\r\n      adaptations.volumeAdjustment *= 0.8;\r\n      adaptations.reasoning.push('Sustained high fatigue - additional volume reduction');\r\n    }\r\n    \r\n    if (wellnessImpact.readiness < 60) {\r\n      adaptations.frequencyAdjustment = 0.8;\r\n      adaptations.reasoning.push('Low wellness readiness - reducing training frequency');\r\n    }\r\n    \r\n    // Positive adaptations\r\n    if (performanceTrend.direction === 'improving' && fatigueStatus.level === 'low') {\r\n      adaptations.volumeAdjustment = 1.1;\r\n      adaptations.reasoning.push('Strong performance with low fatigue - increasing volume');\r\n    }\r\n    \r\n    return this.applyPlanAdaptations(currentPlan, adaptations);\r\n  }\r\n\r\n  /**\r\n   * Generate intelligent deload recommendations\r\n   * @param {Object} currentStatus - Current training status\r\n   * @returns {Object} - Deload plan\r\n   */\r\n  generateIntelligentDeload(currentStatus) {\r\n    const deloadIntensity = this.calculateDeloadIntensity(currentStatus);\r\n    const deloadDuration = this.calculateDeloadDuration(currentStatus);\r\n    const deloadActivities = this.selectDeloadActivities(currentStatus);\r\n    \r\n    return {\r\n      type: this.determineDeloadType(currentStatus),\r\n      intensity: deloadIntensity,\r\n      duration: deloadDuration,\r\n      activities: deloadActivities,\r\n      volumeReduction: this.calculateVolumeReduction(deloadIntensity),\r\n      intensityReduction: this.calculateIntensityReduction(deloadIntensity),\r\n      focusAreas: this.identifyDeloadFocusAreas(currentStatus),\r\n      returnCriteria: this.defineReturnCriteria(currentStatus),\r\n      monitoring: this.defineDeloadMonitoring()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create competition peaking protocol\r\n   * @param {Object} competition - Competition details\r\n   * @param {number} weeksOut - Weeks until competition\r\n   * @returns {Object} - Peaking protocol\r\n   */\r\n  createPeakingProtocol(competition, weeksOut) {\r\n    const peakingPhases = this.definePeakingPhases(weeksOut);\r\n    const tapering = this.createTaperingPlan(weeksOut);\r\n    const competitionPrep = this.createCompetitionPrep(competition);\r\n    \r\n    return {\r\n      phases: peakingPhases,\r\n      tapering,\r\n      competitionPrep,\r\n      timeline: this.createPeakingTimeline(weeksOut),\r\n      keyWorkouts: this.scheduleKeyWorkouts(weeksOut),\r\n      recoveryProtocol: this.createPeakingRecoveryProtocol(),\r\n      nutritionGuidance: this.createPeakingNutritionPlan(),\r\n      mentalPreparation: this.createMentalPrepPlan()\r\n    };\r\n  }\r\n\r\n  // Helper methods for various calculations\r\n\r\n  determineExperienceLevel(data) {\r\n    const totalWeeks = data.length;\r\n    const consistencyScore = this.calculateConsistency(data);\r\n    const progressionRate = this.calculateProgressionRate(data);\r\n    \r\n    if (totalWeeks < 12 || consistencyScore < 60) return 'beginner';\r\n    if (totalWeeks < 52 || progressionRate > 0.8) return 'intermediate';\r\n    return 'advanced';\r\n  }\r\n\r\n  assessCurrentCapacity() {\r\n    const muscles = Object.keys(trainingState.volumeLandmarks);\r\n    const totalCapacity = muscles.reduce((sum, muscle) => {\r\n      const landmarks = trainingState.volumeLandmarks[muscle];\r\n      return sum + landmarks.MRV;\r\n    }, 0);\r\n    \r\n    return {\r\n      totalVolume: totalCapacity,\r\n      muscleDistribution: this.analyzeMuscleDistribution(),\r\n      recoveryCapacity: this.assessRecoveryCapacity(),\r\n      adaptationPotential: this.assessAdaptationPotential()\r\n    };\r\n  }\r\n\r\n  calculateTargetSets(landmarks, phase) {\r\n    const baseTarget = (landmarks.MEV + landmarks.MAV) / 2;\r\n    return Math.round(baseTarget * phase.volumeMultiplier);\r\n  }\r\n\r\n  getHistoricalTrainingData() {\r\n    // Integrate with existing data storage\r\n    const data = [];\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('session-')) {\r\n        try {\r\n          const sessionData = JSON.parse(localStorage.getItem(key));\r\n          data.push(sessionData);\r\n        } catch (e) {\r\n          console.warn('Failed to parse session data:', key);\r\n        }\r\n      }\r\n    }\r\n    return data.sort((a, b) => new Date(a.startTime) - new Date(b.startTime));\r\n  }\r\n\r\n  calculateCompletionDate(duration) {\r\n    const today = new Date();\r\n    const completion = new Date(today);\r\n    completion.setDate(completion.getDate() + (duration * 7));\r\n    return completion;\r\n  }\r\n}\r\n\r\n// Export for use in main application\r\nexport {\r\n  AdvancedPeriodizationSystem\r\n};\r\n\r\n// Create singleton instance\r\nexport const periodizationSystem = new AdvancedPeriodizationSystem();\r\n","/**\r\n * Advanced Data Export & Backup System\r\n * Provides comprehensive data export, import, and backup capabilities\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * Data Export Manager Class\r\n * Handles all data export, import, and backup operations\r\n */\r\nclass DataExportManager {\r\n  constructor() {\r\n    this.exportFormats = ['json', 'csv', 'excel'];\r\n    this.compressionEnabled = true;\r\n    this.encryptionEnabled = false; // Future enhancement\r\n  }\r\n\r\n  /**\r\n   * Export all training data\r\n   * @param {string} format - Export format (json, csv, excel)\r\n   * @param {Object} options - Export options\r\n   * @returns {Object} - Export result\r\n   */\r\n  exportAllData(format = 'json', options = {}) {\r\n    const {\r\n      includePersonalData = true,\r\n      includeAnalytics = true,\r\n      includeWellness = true,\r\n      dateRange = null,\r\n      compress = this.compressionEnabled\r\n    } = options;\r\n\r\n    try {\r\n      const exportData = this.gatherExportData({\r\n        includePersonalData,\r\n        includeAnalytics,\r\n        includeWellness,\r\n        dateRange\r\n      });\r\n\r\n      switch (format.toLowerCase()) {\r\n        case 'json':\r\n          return this.exportAsJSON(exportData, compress);\r\n        case 'csv':\r\n          return this.exportAsCSV(exportData);\r\n        case 'excel':\r\n          return this.exportAsExcel(exportData);\r\n        default:\r\n          throw new Error(`Unsupported export format: ${format}`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Export failed:', error);\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gather all data for export\r\n   * @param {Object} options - Data gathering options\r\n   * @returns {Object} - Comprehensive data object\r\n   */\r\n  gatherExportData(options) {\r\n    const {\r\n      includePersonalData,\r\n      includeAnalytics,\r\n      includeWellness,\r\n      dateRange\r\n    } = options;\r\n\r\n    const exportData = {\r\n      metadata: {\r\n        exportDate: new Date().toISOString(),\r\n        appVersion: '2.0.0',\r\n        exportType: 'full',\r\n        dataPoints: 0\r\n      },\r\n      trainingState: null,\r\n      sessionHistory: [],\r\n      feedback: [],\r\n      analytics: null,\r\n      wellness: null,\r\n      preferences: null\r\n    };\r\n\r\n    // Core training state\r\n    if (includePersonalData) {\r\n      exportData.trainingState = this.serializeTrainingState();\r\n      exportData.preferences = this.gatherUserPreferences();\r\n    }\r\n\r\n    // Session history\r\n    exportData.sessionHistory = this.gatherSessionHistory(dateRange);\r\n\r\n    // Feedback data\r\n    exportData.feedback = this.gatherFeedbackData(dateRange);\r\n\r\n    // Analytics data\r\n    if (includeAnalytics) {\r\n      exportData.analytics = this.gatherAnalyticsData(dateRange);\r\n    }\r\n\r\n    // Wellness data\r\n    if (includeWellness) {\r\n      exportData.wellness = this.gatherWellnessData(dateRange);\r\n    }\r\n\r\n    // Calculate data points\r\n    exportData.metadata.dataPoints = this.calculateDataPoints(exportData);\r\n\r\n    return exportData;\r\n  }\r\n\r\n  /**\r\n   * Serialize training state\r\n   * @returns {Object} - Serialized training state\r\n   */\r\n  serializeTrainingState() {\r\n    return {\r\n      volumeLandmarks: trainingState.volumeLandmarks,\r\n      currentSets: trainingState.currentSets,\r\n      weekNo: trainingState.weekNo,\r\n      blockNo: trainingState.blockNo,\r\n      deloadWeeks: trainingState.deloadWeeks,\r\n      targetRIR: trainingState.getTargetRIR(),\r\n      currentPhase: trainingState.getCurrentPhase(),\r\n      stateHistory: trainingState.getStateHistory(),\r\n      totalMusclesNeedingRecovery: trainingState.totalMusclesNeedingRecovery,\r\n      recoverySessionsThisWeek: trainingState.recoverySessionsThisWeek\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gather session history\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Session history data\r\n   */\r\n  gatherSessionHistory(dateRange) {\r\n    const sessions = [];\r\n    \r\n    // Gather all session data from localStorage\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('session-')) {\r\n        try {\r\n          const sessionData = JSON.parse(localStorage.getItem(key));\r\n          if (this.isWithinDateRange(sessionData.timestamp, dateRange)) {\r\n            sessions.push({\r\n              sessionId: key,\r\n              ...sessionData\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to parse session data: ${key}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return sessions.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n  }\r\n\r\n  /**\r\n   * Gather feedback data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Feedback data\r\n   */\r\n  gatherFeedbackData(dateRange) {\r\n    const feedback = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('feedback-')) {\r\n        try {\r\n          const feedbackData = JSON.parse(localStorage.getItem(key));\r\n          if (this.isWithinDateRange(feedbackData.timestamp, dateRange)) {\r\n            feedback.push({\r\n              feedbackId: key,\r\n              ...feedbackData\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to parse feedback data: ${key}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return feedback.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\r\n  }\r\n\r\n  /**\r\n   * Gather analytics data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Object} - Analytics data\r\n   */\r\n  gatherAnalyticsData(dateRange) {\r\n    const analytics = {\r\n      volumeOptimizations: [],\r\n      deloadPredictions: [],\r\n      plateauAnalyses: [],\r\n      performanceMetrics: []\r\n    };\r\n\r\n    // Gather analytics data from localStorage\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && (key.startsWith('analytics-') || key.startsWith('optimization-'))) {\r\n        try {\r\n          const analyticsData = JSON.parse(localStorage.getItem(key));\r\n          if (this.isWithinDateRange(analyticsData.timestamp, dateRange)) {\r\n            if (key.includes('volume')) {\r\n              analytics.volumeOptimizations.push(analyticsData);\r\n            } else if (key.includes('deload')) {\r\n              analytics.deloadPredictions.push(analyticsData);\r\n            } else if (key.includes('plateau')) {\r\n              analytics.plateauAnalyses.push(analyticsData);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to parse analytics data: ${key}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return analytics;\r\n  }\r\n\r\n  /**\r\n   * Gather wellness data\r\n   * @param {Object} dateRange - Date range filter\r\n   * @returns {Array} - Wellness data\r\n   */\r\n  gatherWellnessData(dateRange) {\r\n    const wellness = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('wellness-')) {\r\n        try {\r\n          const wellnessData = JSON.parse(localStorage.getItem(key));\r\n          if (this.isWithinDateRange(wellnessData.date, dateRange)) {\r\n            wellness.push(wellnessData);\r\n          }\r\n        } catch (error) {\r\n          console.warn(`Failed to parse wellness data: ${key}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return wellness.sort((a, b) => new Date(a.date) - new Date(b.date));\r\n  }\r\n\r\n  /**\r\n   * Gather user preferences\r\n   * @returns {Object} - User preferences\r\n   */\r\n  gatherUserPreferences() {\r\n    return {\r\n      theme: localStorage.getItem('user-theme') || 'dark',\r\n      units: localStorage.getItem('user-units') || 'metric',\r\n      notifications: localStorage.getItem('user-notifications') || 'enabled',\r\n      autoProgression: localStorage.getItem('user-auto-progression') || 'enabled',\r\n      analyticsEnabled: localStorage.getItem('analytics-enabled') || 'true'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Export as JSON\r\n   * @param {Object} data - Data to export\r\n   * @param {boolean} compress - Whether to compress\r\n   * @returns {Object} - Export result\r\n   */\r\n  exportAsJSON(data, compress = false) {\r\n    try {\r\n      const jsonString = JSON.stringify(data, null, compress ? 0 : 2);\r\n      const blob = new Blob([jsonString], { type: 'application/json' });\r\n      const filename = `powerhouseatx-backup-${this.getDateString()}.json`;\r\n      \r\n      this.downloadBlob(blob, filename);\r\n      \r\n      return {\r\n        success: true,\r\n        filename,\r\n        size: blob.size,\r\n        format: 'JSON',\r\n        dataPoints: data.metadata.dataPoints,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`JSON export failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export as CSV\r\n   * @param {Object} data - Data to export\r\n   * @returns {Object} - Export result\r\n   */\r\n  exportAsCSV(data) {\r\n    try {\r\n      const csvData = this.convertToCSV(data);\r\n      const blob = new Blob([csvData], { type: 'text/csv' });\r\n      const filename = `powerhouseatx-data-${this.getDateString()}.csv`;\r\n      \r\n      this.downloadBlob(blob, filename);\r\n      \r\n      return {\r\n        success: true,\r\n        filename,\r\n        size: blob.size,\r\n        format: 'CSV',\r\n        dataPoints: data.metadata.dataPoints,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`CSV export failed: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert data to CSV format\r\n   * @param {Object} data - Data to convert\r\n   * @returns {string} - CSV string\r\n   */\r\n  convertToCSV(data) {\r\n    let csv = '';\r\n    \r\n    // Sessions CSV\r\n    if (data.sessionHistory.length > 0) {\r\n      csv += 'SESSION DATA\\n';\r\n      csv += 'Date,Muscle,Exercise,Sets,Reps,Weight,RIR,Performance,Duration\\n';\r\n      \r\n      data.sessionHistory.forEach(session => {\r\n        csv += `${session.timestamp},${session.muscle || ''},${session.exercise || ''},${session.sets || ''},${session.reps || ''},${session.weight || ''},${session.rir || ''},${session.performance || ''},${session.duration || ''}\\n`;\r\n      });\r\n      csv += '\\n';\r\n    }\r\n\r\n    // Feedback CSV\r\n    if (data.feedback.length > 0) {\r\n      csv += 'FEEDBACK DATA\\n';\r\n      csv += 'Date,Muscle,Current Sets,MMC,Pump,Disruption,Performance,Soreness,Recommendation\\n';\r\n      \r\n      data.feedback.forEach(feedback => {\r\n        csv += `${feedback.timestamp},${feedback.muscle},${feedback.currentSets},${feedback.stimulus?.mmc || ''},${feedback.stimulus?.pump || ''},${feedback.stimulus?.disruption || ''},${feedback.performance},${feedback.soreness},${feedback.results?.recommendedAction?.advice || ''}\\n`;\r\n      });\r\n      csv += '\\n';\r\n    }\r\n\r\n    // Wellness CSV\r\n    if (data.wellness && data.wellness.length > 0) {\r\n      csv += 'WELLNESS DATA\\n';\r\n      csv += 'Date,Recovery Score,Readiness Score,Sleep Duration,Sleep Quality,Stress Level\\n';\r\n      \r\n      data.wellness.forEach(wellness => {\r\n        csv += `${wellness.date},${wellness.recoveryScore},${wellness.readinessScore},${wellness.sleep?.duration || ''},${wellness.sleep?.quality || ''},${wellness.stress?.overall || ''}\\n`;\r\n      });\r\n    }\r\n\r\n    return csv;\r\n  }\r\n\r\n  /**\r\n   * Import data from file\r\n   * @param {File} file - File to import\r\n   * @param {Object} options - Import options\r\n   * @returns {Promise} - Import result\r\n   */\r\n  async importData(file, options = {}) {\r\n    const { overwrite = false, merge = true } = options;\r\n    \r\n    try {\r\n      const fileContent = await this.readFile(file);\r\n      let importData;\r\n\r\n      if (file.name.endsWith('.json')) {\r\n        importData = JSON.parse(fileContent);\r\n      } else if (file.name.endsWith('.csv')) {\r\n        importData = this.parseCSV(fileContent);\r\n      } else {\r\n        throw new Error('Unsupported file format');\r\n      }\r\n\r\n      return this.processImportData(importData, { overwrite, merge });\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process imported data\r\n   * @param {Object} data - Imported data\r\n   * @param {Object} options - Processing options\r\n   * @returns {Object} - Processing result\r\n   */\r\n  processImportData(data, options) {\r\n    const { overwrite, merge } = options;\r\n    const result = {\r\n      success: true,\r\n      imported: {\r\n        trainingState: false,\r\n        sessions: 0,\r\n        feedback: 0,\r\n        wellness: 0,\r\n        analytics: 0\r\n      },\r\n      warnings: [],\r\n      errors: []\r\n    };\r\n\r\n    try {\r\n      // Import training state\r\n      if (data.trainingState) {\r\n        if (overwrite || !trainingState.hasData()) {\r\n          this.importTrainingState(data.trainingState);\r\n          result.imported.trainingState = true;\r\n        } else if (merge) {\r\n          this.mergeTrainingState(data.trainingState);\r\n          result.imported.trainingState = true;\r\n          result.warnings.push('Training state merged with existing data');\r\n        }\r\n      }\r\n\r\n      // Import session history\r\n      if (data.sessionHistory) {\r\n        result.imported.sessions = this.importSessionHistory(data.sessionHistory, overwrite);\r\n      }\r\n\r\n      // Import feedback\r\n      if (data.feedback) {\r\n        result.imported.feedback = this.importFeedback(data.feedback, overwrite);\r\n      }\r\n\r\n      // Import wellness\r\n      if (data.wellness) {\r\n        result.imported.wellness = this.importWellness(data.wellness, overwrite);\r\n      }\r\n\r\n      // Import analytics\r\n      if (data.analytics) {\r\n        result.imported.analytics = this.importAnalytics(data.analytics, overwrite);\r\n      }\r\n\r\n      result.timestamp = new Date().toISOString();\r\n      return result;\r\n\r\n    } catch (error) {\r\n      result.success = false;\r\n      result.errors.push(error.message);\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create automatic backup\r\n   * @returns {Object} - Backup result\r\n   */\r\n  createAutoBackup() {\r\n    const backupData = this.gatherExportData({\r\n      includePersonalData: true,\r\n      includeAnalytics: true,\r\n      includeWellness: true\r\n    });\r\n\r\n    // Store in localStorage as compressed backup\r\n    const backupKey = `backup-${this.getDateString()}`;\r\n    const compressedData = JSON.stringify(backupData);\r\n    \r\n    try {\r\n      localStorage.setItem(backupKey, compressedData);\r\n      \r\n      // Clean old backups (keep last 5)\r\n      this.cleanOldBackups();\r\n      \r\n      return {\r\n        success: true,\r\n        backupKey,\r\n        size: compressedData.length,\r\n        dataPoints: backupData.metadata.dataPoints,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available backups\r\n   * @returns {Array} - List of available backups\r\n   */\r\n  getAvailableBackups() {\r\n    const backups = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key && key.startsWith('backup-')) {\r\n        try {\r\n          const backupData = localStorage.getItem(key);\r\n          const metadata = JSON.parse(backupData).metadata;\r\n          \r\n          backups.push({\r\n            key,\r\n            date: metadata.exportDate,\r\n            dataPoints: metadata.dataPoints,\r\n            size: backupData.length\r\n          });\r\n        } catch (error) {\r\n          console.warn(`Failed to parse backup: ${key}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    return backups.sort((a, b) => new Date(b.date) - new Date(a.date));\r\n  }\r\n\r\n  /**\r\n   * Restore from backup\r\n   * @param {string} backupKey - Backup key\r\n   * @returns {Object} - Restore result\r\n   */\r\n  restoreFromBackup(backupKey) {\r\n    try {\r\n      const backupData = localStorage.getItem(backupKey);\r\n      if (!backupData) {\r\n        throw new Error('Backup not found');\r\n      }\r\n\r\n      const data = JSON.parse(backupData);\r\n      return this.processImportData(data, { overwrite: true, merge: false });\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        timestamp: new Date().toISOString()\r\n      };\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  isWithinDateRange(date, dateRange) {\r\n    if (!dateRange) return true;\r\n    const checkDate = new Date(date);\r\n    const startDate = dateRange.start ? new Date(dateRange.start) : null;\r\n    const endDate = dateRange.end ? new Date(dateRange.end) : null;\r\n    \r\n    if (startDate && checkDate < startDate) return false;\r\n    if (endDate && checkDate > endDate) return false;\r\n    return true;\r\n  }\r\n\r\n  calculateDataPoints(data) {\r\n    return (data.sessionHistory?.length || 0) +\r\n           (data.feedback?.length || 0) +\r\n           (data.wellness?.length || 0) +\r\n           (data.analytics?.volumeOptimizations?.length || 0) +\r\n           (data.analytics?.deloadPredictions?.length || 0);\r\n  }\r\n\r\n  getDateString() {\r\n    return new Date().toISOString().split('T')[0];\r\n  }\r\n\r\n  downloadBlob(blob, filename) {\r\n    const url = URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n\r\n  readFile(file) {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = e => resolve(e.target.result);\r\n      reader.onerror = e => reject(new Error('Failed to read file'));\r\n      reader.readAsText(file);\r\n    });\r\n  }\r\n\r\n  cleanOldBackups() {\r\n    const backups = this.getAvailableBackups();\r\n    if (backups.length > 5) {\r\n      const toDelete = backups.slice(5);\r\n      toDelete.forEach(backup => {\r\n        localStorage.removeItem(backup.key);\r\n      });\r\n    }\r\n  }\r\n\r\n  importTrainingState(stateData) {\r\n    Object.keys(stateData.volumeLandmarks).forEach(muscle => {\r\n      trainingState.updateVolumeLandmarks(muscle, stateData.volumeLandmarks[muscle]);\r\n    });\r\n    \r\n    Object.keys(stateData.currentSets).forEach(muscle => {\r\n      trainingState.setSets(muscle, stateData.currentSets[muscle]);\r\n    });\r\n    \r\n    trainingState.weekNo = stateData.weekNo;\r\n    trainingState.blockNo = stateData.blockNo;\r\n  }\r\n\r\n  importSessionHistory(sessions, overwrite) {\r\n    let imported = 0;\r\n    sessions.forEach(session => {\r\n      const key = session.sessionId || `session-imported-${Date.now()}-${imported}`;\r\n      if (overwrite || !localStorage.getItem(key)) {\r\n        localStorage.setItem(key, JSON.stringify(session));\r\n        imported++;\r\n      }\r\n    });\r\n    return imported;\r\n  }\r\n\r\n  importFeedback(feedback, overwrite) {\r\n    let imported = 0;\r\n    feedback.forEach(item => {\r\n      const key = item.feedbackId || `feedback-imported-${Date.now()}-${imported}`;\r\n      if (overwrite || !localStorage.getItem(key)) {\r\n        localStorage.setItem(key, JSON.stringify(item));\r\n        imported++;\r\n      }\r\n    });\r\n    return imported;\r\n  }\r\n\r\n  importWellness(wellness, overwrite) {\r\n    let imported = 0;\r\n    wellness.forEach(item => {\r\n      const key = `wellness-${item.date}`;\r\n      if (overwrite || !localStorage.getItem(key)) {\r\n        localStorage.setItem(key, JSON.stringify(item));\r\n        imported++;\r\n      }\r\n    });\r\n    return imported;\r\n  }\r\n\r\n  importAnalytics(analytics, overwrite) {\r\n    let imported = 0;\r\n    // Implementation would depend on analytics data structure\r\n    return imported;\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst dataExportManager = new DataExportManager();\r\n\r\nexport {\r\n  DataExportManager,\r\n  dataExportManager\r\n};\r\n","/**\r\n * User Feedback & Analytics Collection System\r\n * Gathers user feedback and usage analytics to improve the training system\r\n */\r\n\r\nimport trainingState from '../core/trainingState.js';\r\n\r\n/**\r\n * User Feedback Manager Class\r\n * Handles feedback collection, analysis, and improvement suggestions\r\n */\r\nclass UserFeedbackManager {\r\n  constructor() {\r\n    this.feedbackCategories = [\r\n      'usability',\r\n      'accuracy',\r\n      'features',\r\n      'performance',\r\n      'mobile',\r\n      'suggestions'\r\n    ];\r\n    this.analyticsEnabled = true;\r\n    this.privacyMode = true; // No personal data collected\r\n  }\r\n\r\n  /**\r\n   * Initialize feedback system\r\n   */\r\n  initializeFeedbackSystem() {\r\n    this.createFeedbackWidget();\r\n    this.setupUsageTracking();\r\n    this.schedulePeriodicFeedback();\r\n  }\r\n\r\n  /**\r\n   * Create feedback widget\r\n   */\r\n  createFeedbackWidget() {\r\n    const widget = document.createElement('div');\r\n    widget.id = 'feedback-widget';\r\n    widget.className = 'feedback-widget';\r\n    widget.innerHTML = `\r\n      <div class=\"feedback-toggle\" onclick=\"userFeedbackManager.toggleFeedbackPanel()\">\r\n        💬 Feedback\r\n      </div>\r\n      <div class=\"feedback-panel\" id=\"feedbackPanel\" style=\"display: none;\">\r\n        <div class=\"feedback-header\">\r\n          <h3>💡 Help Improve PowerHouseATX</h3>\r\n          <button onclick=\"userFeedbackManager.closeFeedbackPanel()\">×</button>\r\n        </div>\r\n        <div class=\"feedback-content\">\r\n          <div class=\"feedback-category\">\r\n            <label>What would you like feedback on?</label>\r\n            <select id=\"feedbackCategory\">\r\n              <option value=\"usability\">💻 Ease of Use</option>\r\n              <option value=\"accuracy\">🎯 Recommendation Accuracy</option>\r\n              <option value=\"features\">✨ Features & Functionality</option>\r\n              <option value=\"performance\">⚡ App Performance</option>\r\n              <option value=\"mobile\">📱 Mobile Experience</option>\r\n              <option value=\"suggestions\">💡 New Feature Ideas</option>\r\n            </select>\r\n          </div>\r\n          \r\n          <div class=\"feedback-rating\">\r\n            <label>Overall satisfaction (1-5):</label>\r\n            <div class=\"rating-stars\" id=\"satisfactionRating\">\r\n              ${[1,2,3,4,5].map(i => `<span class=\"star\" data-rating=\"${i}\">⭐</span>`).join('')}\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"feedback-text\">\r\n            <label>Your feedback:</label>\r\n            <textarea id=\"feedbackText\" placeholder=\"Tell us what's working well or what could be improved...\"></textarea>\r\n          </div>\r\n          \r\n          <div class=\"feedback-usage\" id=\"usageContext\">\r\n            <!-- Automatically populated with usage context -->\r\n          </div>\r\n          \r\n          <div class=\"feedback-actions\">\r\n            <button onclick=\"userFeedbackManager.submitFeedback()\" class=\"submit-btn\">\r\n              📤 Send Feedback\r\n            </button>\r\n            <button onclick=\"userFeedbackManager.laterReminder()\" class=\"later-btn\">\r\n              ⏰ Remind Later\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n\r\n    document.body.appendChild(widget);\r\n    this.setupFeedbackEvents();\r\n  }\r\n\r\n  /**\r\n   * Setup feedback widget events\r\n   */\r\n  setupFeedbackEvents() {\r\n    // Rating stars\r\n    document.querySelectorAll('.star').forEach(star => {\r\n      star.addEventListener('click', (e) => {\r\n        const rating = parseInt(e.target.dataset.rating);\r\n        this.setRating(rating);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set rating stars\r\n   * @param {number} rating - Rating value (1-5)\r\n   */\r\n  setRating(rating) {\r\n    document.querySelectorAll('.star').forEach((star, index) => {\r\n      if (index < rating) {\r\n        star.style.opacity = '1';\r\n        star.style.transform = 'scale(1.2)';\r\n      } else {\r\n        star.style.opacity = '0.3';\r\n        star.style.transform = 'scale(1)';\r\n      }\r\n    });\r\n    this.currentRating = rating;\r\n  }\r\n\r\n  /**\r\n   * Toggle feedback panel\r\n   */\r\n  toggleFeedbackPanel() {\r\n    const panel = document.getElementById('feedbackPanel');\r\n    const isVisible = panel.style.display !== 'none';\r\n    \r\n    if (isVisible) {\r\n      this.closeFeedbackPanel();\r\n    } else {\r\n      this.openFeedbackPanel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open feedback panel\r\n   */\r\n  openFeedbackPanel() {\r\n    const panel = document.getElementById('feedbackPanel');\r\n    panel.style.display = 'block';\r\n    \r\n    // Populate usage context\r\n    this.populateUsageContext();\r\n    \r\n    // Track feedback panel opened\r\n    this.trackEvent('feedback_panel_opened');\r\n  }\r\n\r\n  /**\r\n   * Close feedback panel\r\n   */\r\n  closeFeedbackPanel() {\r\n    const panel = document.getElementById('feedbackPanel');\r\n    panel.style.display = 'none';\r\n  }\r\n\r\n  /**\r\n   * Populate usage context\r\n   */\r\n  populateUsageContext() {\r\n    const context = document.getElementById('usageContext');\r\n    const usage = this.getUsageContext();\r\n    \r\n    context.innerHTML = `\r\n      <div class=\"usage-context\">\r\n        <h4>📊 Your Usage Context (helps us improve):</h4>\r\n        <div class=\"context-grid\">\r\n          <div class=\"context-item\">\r\n            <span class=\"context-label\">Training Week:</span>\r\n            <span class=\"context-value\">${usage.currentWeek}</span>\r\n          </div>\r\n          <div class=\"context-item\">\r\n            <span class=\"context-label\">Features Used:</span>\r\n            <span class=\"context-value\">${usage.featuresUsed.join(', ')}</span>\r\n          </div>\r\n          <div class=\"context-item\">\r\n            <span class=\"context-label\">Device:</span>\r\n            <span class=\"context-value\">${usage.deviceType}</span>\r\n          </div>\r\n          <div class=\"context-item\">\r\n            <span class=\"context-label\">Session Count:</span>\r\n            <span class=\"context-value\">${usage.sessionCount}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"privacy-note\">\r\n          🔒 No personal training data is shared - only anonymized usage patterns\r\n        </div>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * Get usage context\r\n   * @returns {Object} - Usage context\r\n   */\r\n  getUsageContext() {\r\n    const usage = this.getStoredUsage();\r\n    \r\n    return {\r\n      currentWeek: trainingState.weekNo,\r\n      currentBlock: trainingState.blockNo,\r\n      featuresUsed: usage.featuresUsed || [],\r\n      deviceType: this.getDeviceType(),\r\n      sessionCount: usage.sessionCount || 0,\r\n      lastActive: usage.lastActive || new Date().toISOString(),\r\n      averageSessionDuration: usage.averageSessionDuration || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Submit feedback\r\n   */\r\n  async submitFeedback() {\r\n    const category = document.getElementById('feedbackCategory').value;\r\n    const text = document.getElementById('feedbackText').value;\r\n    const rating = this.currentRating || 0;\r\n    \r\n    if (!text.trim()) {\r\n      this.showFeedbackMessage('Please provide some feedback text', 'warning');\r\n      return;\r\n    }\r\n\r\n    const feedback = {\r\n      id: this.generateFeedbackId(),\r\n      timestamp: new Date().toISOString(),\r\n      category,\r\n      rating,\r\n      text: text.trim(),\r\n      context: this.getUsageContext(),\r\n      appVersion: '2.0.0',\r\n      userAgent: navigator.userAgent\r\n    };\r\n\r\n    try {\r\n      const result = await this.processFeedback(feedback);\r\n      \r\n      if (result.success) {\r\n        this.showFeedbackMessage('Thank you! Your feedback helps us improve 🙏', 'success');\r\n        this.resetFeedbackForm();\r\n        \r\n        // Auto-close after 2 seconds\r\n        setTimeout(() => this.closeFeedbackPanel(), 2000);\r\n        \r\n        // Track successful submission\r\n        this.trackEvent('feedback_submitted', { category, rating });\r\n      } else {\r\n        this.showFeedbackMessage('Feedback saved locally. Thank you! 💾', 'info');\r\n      }\r\n    } catch (error) {\r\n      console.error('Feedback submission error:', error);\r\n      this.showFeedbackMessage('Feedback saved locally. Thank you! 💾', 'info');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process feedback (store locally and optionally send)\r\n   * @param {Object} feedback - Feedback data\r\n   * @returns {Object} - Processing result\r\n   */\r\n  async processFeedback(feedback) {\r\n    // Always store locally\r\n    const localKey = `feedback-user-${feedback.id}`;\r\n    localStorage.setItem(localKey, JSON.stringify(feedback));\r\n    \r\n    // Store in feedback analytics\r\n    this.updateFeedbackAnalytics(feedback);\r\n    \r\n    // In a real implementation, you might send to a server here\r\n    // For now, we'll just process locally\r\n    return {\r\n      success: true,\r\n      stored: 'local',\r\n      id: feedback.id\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update feedback analytics\r\n   * @param {Object} feedback - Feedback data\r\n   */\r\n  updateFeedbackAnalytics(feedback) {\r\n    const analytics = this.getFeedbackAnalytics();\r\n    \r\n    // Update categories\r\n    if (!analytics.categories[feedback.category]) {\r\n      analytics.categories[feedback.category] = {\r\n        count: 0,\r\n        averageRating: 0,\r\n        totalRating: 0\r\n      };\r\n    }\r\n    \r\n    const category = analytics.categories[feedback.category];\r\n    category.count++;\r\n    category.totalRating += feedback.rating;\r\n    category.averageRating = category.totalRating / category.count;\r\n    \r\n    // Update overall metrics\r\n    analytics.totalFeedback++;\r\n    analytics.totalRating += feedback.rating;\r\n    analytics.averageRating = analytics.totalRating / analytics.totalFeedback;\r\n    analytics.lastFeedback = feedback.timestamp;\r\n    \r\n    // Store updated analytics\r\n    localStorage.setItem('feedback-analytics', JSON.stringify(analytics));\r\n  }\r\n\r\n  /**\r\n   * Get feedback analytics\r\n   * @returns {Object} - Feedback analytics\r\n   */\r\n  getFeedbackAnalytics() {\r\n    const stored = localStorage.getItem('feedback-analytics');\r\n    if (stored) {\r\n      return JSON.parse(stored);\r\n    }\r\n    \r\n    return {\r\n      totalFeedback: 0,\r\n      averageRating: 0,\r\n      totalRating: 0,\r\n      categories: {},\r\n      lastFeedback: null,\r\n      trends: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Setup usage tracking\r\n   */\r\n  setupUsageTracking() {\r\n    // Track page loads\r\n    this.trackEvent('app_loaded');\r\n    \r\n    // Track feature usage\r\n    this.setupFeatureTracking();\r\n    \r\n    // Track session duration\r\n    this.trackSessionStart();\r\n    \r\n    // Track before unload\r\n    window.addEventListener('beforeunload', () => {\r\n      this.trackSessionEnd();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup feature tracking\r\n   */\r\n  setupFeatureTracking() {\r\n    // Track button clicks for major features\r\n    const trackableButtons = [\r\n      'submitFeedbackBtn',\r\n      'runAutoVolumeProgression',\r\n      'initializeIntelligence',\r\n      'startLiveSession',\r\n      'optimizeVolumeLandmarks',\r\n      'predictDeloadTiming'\r\n    ];\r\n    \r\n    trackableButtons.forEach(buttonId => {\r\n      const button = document.getElementById(buttonId);\r\n      if (button) {\r\n        button.addEventListener('click', () => {\r\n          this.trackFeatureUsage(buttonId);\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Track section expansions\r\n    document.querySelectorAll('.section-banner').forEach(banner => {\r\n      banner.addEventListener('click', () => {\r\n        const sectionName = banner.textContent.trim().split(' ')[0];\r\n        this.trackFeatureUsage(`section_${sectionName.toLowerCase()}`);\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Track feature usage\r\n   * @param {string} feature - Feature name\r\n   */\r\n  trackFeatureUsage(feature) {\r\n    const usage = this.getStoredUsage();\r\n    \r\n    if (!usage.featuresUsed) {\r\n      usage.featuresUsed = [];\r\n    }\r\n    \r\n    if (!usage.featuresUsed.includes(feature)) {\r\n      usage.featuresUsed.push(feature);\r\n    }\r\n    \r\n    if (!usage.featureCount) {\r\n      usage.featureCount = {};\r\n    }\r\n    \r\n    usage.featureCount[feature] = (usage.featureCount[feature] || 0) + 1;\r\n    usage.lastFeatureUsed = feature;\r\n    usage.lastActivity = new Date().toISOString();\r\n    \r\n    this.storeUsage(usage);\r\n    this.trackEvent('feature_used', { feature });\r\n  }\r\n\r\n  /**\r\n   * Track session start\r\n   */\r\n  trackSessionStart() {\r\n    this.sessionStartTime = Date.now();\r\n    this.trackEvent('session_started');\r\n  }\r\n\r\n  /**\r\n   * Track session end\r\n   */\r\n  trackSessionEnd() {\r\n    if (this.sessionStartTime) {\r\n      const duration = Date.now() - this.sessionStartTime;\r\n      const usage = this.getStoredUsage();\r\n      \r\n      usage.sessionCount = (usage.sessionCount || 0) + 1;\r\n      usage.totalSessionTime = (usage.totalSessionTime || 0) + duration;\r\n      usage.averageSessionDuration = usage.totalSessionTime / usage.sessionCount;\r\n      usage.lastSession = new Date().toISOString();\r\n      \r\n      this.storeUsage(usage);\r\n      this.trackEvent('session_ended', { duration });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track event\r\n   * @param {string} event - Event name\r\n   * @param {Object} data - Event data\r\n   */\r\n  trackEvent(event, data = {}) {\r\n    if (!this.analyticsEnabled) return;\r\n    \r\n    const eventData = {\r\n      event,\r\n      timestamp: new Date().toISOString(),\r\n      data,\r\n      sessionId: this.getSessionId()\r\n    };\r\n    \r\n    // Store event locally\r\n    const events = this.getStoredEvents();\r\n    events.push(eventData);\r\n    \r\n    // Keep only last 100 events\r\n    if (events.length > 100) {\r\n      events.splice(0, events.length - 100);\r\n    }\r\n    \r\n    localStorage.setItem('usage-events', JSON.stringify(events));\r\n  }\r\n\r\n  /**\r\n   * Schedule periodic feedback requests\r\n   */\r\n  schedulePeriodicFeedback() {\r\n    const usage = this.getStoredUsage();\r\n    const lastFeedbackRequest = usage.lastFeedbackRequest;\r\n    const daysSinceLastRequest = lastFeedbackRequest ? \r\n      (Date.now() - new Date(lastFeedbackRequest).getTime()) / (1000 * 60 * 60 * 24) : \r\n      Infinity;\r\n    \r\n    // Request feedback after significant usage milestones\r\n    if (usage.sessionCount >= 10 && daysSinceLastRequest > 7) {\r\n      setTimeout(() => this.showFeedbackPrompt(), 30000); // After 30 seconds\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show feedback prompt\r\n   */\r\n  showFeedbackPrompt() {\r\n    const usage = this.getStoredUsage();\r\n    \r\n    if (confirm(`💪 You've used PowerHouseATX for ${usage.sessionCount} sessions! Would you like to share feedback to help us improve?`)) {\r\n      this.openFeedbackPanel();\r\n    } else {\r\n      this.laterReminder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Later reminder\r\n   */\r\n  laterReminder() {\r\n    const usage = this.getStoredUsage();\r\n    usage.lastFeedbackRequest = new Date().toISOString();\r\n    this.storeUsage(usage);\r\n    this.closeFeedbackPanel();\r\n  }\r\n\r\n  /**\r\n   * Generate analytics dashboard\r\n   * @returns {Object} - Analytics dashboard data\r\n   */\r\n  generateAnalyticsDashboard() {\r\n    const usage = this.getStoredUsage();\r\n    const feedback = this.getFeedbackAnalytics();\r\n    const events = this.getStoredEvents();\r\n    \r\n    return {\r\n      usage: {\r\n        totalSessions: usage.sessionCount || 0,\r\n        averageSessionDuration: Math.round((usage.averageSessionDuration || 0) / 1000 / 60), // minutes\r\n        totalTimeSpent: Math.round((usage.totalSessionTime || 0) / 1000 / 60), // minutes\r\n        featuresUsed: usage.featuresUsed?.length || 0,\r\n        mostUsedFeature: this.getMostUsedFeature(usage.featureCount),\r\n        lastActive: usage.lastActivity\r\n      },\r\n      feedback: {\r\n        totalFeedback: feedback.totalFeedback,\r\n        averageRating: Math.round(feedback.averageRating * 10) / 10,\r\n        categoryBreakdown: feedback.categories,\r\n        lastFeedback: feedback.lastFeedback\r\n      },\r\n      events: {\r\n        totalEvents: events.length,\r\n        recentEvents: events.slice(-10),\r\n        eventTypes: this.getEventTypeBreakdown(events)\r\n      },\r\n      insights: this.generateInsights(usage, feedback, events)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate insights from analytics\r\n   * @param {Object} usage - Usage data\r\n   * @param {Object} feedback - Feedback data\r\n   * @param {Array} events - Events data\r\n   * @returns {Array} - Insights\r\n   */\r\n  generateInsights(usage, feedback, events) {\r\n    const insights = [];\r\n    \r\n    // Usage insights\r\n    if (usage.sessionCount > 20) {\r\n      insights.push({\r\n        type: 'milestone',\r\n        message: `🎉 Power user! You've completed ${usage.sessionCount} sessions`,\r\n        action: 'Consider sharing your experience'\r\n      });\r\n    }\r\n    \r\n    if (usage.averageSessionDuration > 30 * 60 * 1000) { // > 30 minutes\r\n      insights.push({\r\n        type: 'usage',\r\n        message: '⏱️ Your sessions are comprehensive and detailed',\r\n        action: 'Great attention to training detail!'\r\n      });\r\n    }\r\n    \r\n    // Feedback insights\r\n    if (feedback.averageRating >= 4.5) {\r\n      insights.push({\r\n        type: 'satisfaction',\r\n        message: '⭐ High satisfaction rating - thank you!',\r\n        action: 'Your feedback helps us improve'\r\n      });\r\n    }\r\n    \r\n    // Feature usage insights\r\n    if (usage.featuresUsed?.includes('analytics') || usage.featuresUsed?.includes('intelligence')) {\r\n      insights.push({\r\n        type: 'advanced',\r\n        message: '🧠 Advanced features user detected',\r\n        action: 'Perfect for the next-generation updates!'\r\n      });\r\n    }\r\n    \r\n    return insights;\r\n  }\r\n\r\n  // Utility methods\r\n  getStoredUsage() {\r\n    const stored = localStorage.getItem('usage-analytics');\r\n    return stored ? JSON.parse(stored) : {};\r\n  }\r\n\r\n  storeUsage(usage) {\r\n    localStorage.setItem('usage-analytics', JSON.stringify(usage));\r\n  }\r\n\r\n  getStoredEvents() {\r\n    const stored = localStorage.getItem('usage-events');\r\n    return stored ? JSON.parse(stored) : [];\r\n  }\r\n\r\n  getSessionId() {\r\n    if (!this.sessionId) {\r\n      this.sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n    }\r\n    return this.sessionId;\r\n  }\r\n\r\n  getDeviceType() {\r\n    const width = window.innerWidth;\r\n    if (width < 768) return 'Mobile';\r\n    if (width < 1024) return 'Tablet';\r\n    return 'Desktop';\r\n  }\r\n\r\n  getMostUsedFeature(featureCount) {\r\n    if (!featureCount) return 'None';\r\n    \r\n    const features = Object.entries(featureCount);\r\n    if (features.length === 0) return 'None';\r\n    \r\n    return features.reduce((max, current) => \r\n      current[1] > max[1] ? current : max\r\n    )[0];\r\n  }\r\n\r\n  getEventTypeBreakdown(events) {\r\n    const breakdown = {};\r\n    events.forEach(event => {\r\n      breakdown[event.event] = (breakdown[event.event] || 0) + 1;\r\n    });\r\n    return breakdown;\r\n  }\r\n\r\n  generateFeedbackId() {\r\n    return `fb-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  resetFeedbackForm() {\r\n    document.getElementById('feedbackText').value = '';\r\n    document.getElementById('feedbackCategory').selectedIndex = 0;\r\n    this.setRating(0);\r\n  }\r\n\r\n  showFeedbackMessage(message, type = 'info') {\r\n    const existingMessage = document.querySelector('.feedback-message');\r\n    if (existingMessage) {\r\n      existingMessage.remove();\r\n    }\r\n    \r\n    const messageEl = document.createElement('div');\r\n    messageEl.className = `feedback-message ${type}`;\r\n    messageEl.textContent = message;\r\n    \r\n    const panel = document.getElementById('feedbackPanel');\r\n    panel.appendChild(messageEl);\r\n    \r\n    setTimeout(() => messageEl.remove(), 3000);\r\n  }\r\n}\r\n\r\n// CSS for feedback widget\r\nconst feedbackCSS = `\r\n.feedback-widget {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 1000;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\r\n}\r\n\r\n.feedback-toggle {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 25px;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.feedback-toggle:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.feedback-panel {\r\n  position: absolute;\r\n  bottom: 60px;\r\n  right: 0;\r\n  width: 400px;\r\n  max-width: 90vw;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);\r\n  overflow: hidden;\r\n  animation: slideUp 0.3s ease;\r\n}\r\n\r\n@keyframes slideUp {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.feedback-header {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.feedback-header h3 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n}\r\n\r\n.feedback-header button {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n  padding: 0;\r\n  width: 24px;\r\n  height: 24px;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.feedback-content {\r\n  padding: 20px;\r\n}\r\n\r\n.feedback-category,\r\n.feedback-rating,\r\n.feedback-text {\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.feedback-category label,\r\n.feedback-rating label,\r\n.feedback-text label {\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  font-weight: 600;\r\n  color: #374151;\r\n  font-size: 14px;\r\n}\r\n\r\n.feedback-category select,\r\n.feedback-text textarea {\r\n  width: 100%;\r\n  padding: 8px 12px;\r\n  border: 2px solid #e5e7eb;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  transition: border-color 0.2s ease;\r\n}\r\n\r\n.feedback-category select:focus,\r\n.feedback-text textarea:focus {\r\n  outline: none;\r\n  border-color: #667eea;\r\n}\r\n\r\n.feedback-text textarea {\r\n  height: 80px;\r\n  resize: vertical;\r\n}\r\n\r\n.rating-stars {\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n\r\n.star {\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n  opacity: 0.3;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.star:hover {\r\n  opacity: 1;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.usage-context {\r\n  background: #f9fafb;\r\n  border-radius: 8px;\r\n  padding: 15px;\r\n  margin: 15px 0;\r\n}\r\n\r\n.usage-context h4 {\r\n  margin: 0 0 10px 0;\r\n  font-size: 14px;\r\n  color: #374151;\r\n}\r\n\r\n.context-grid {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 8px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.context-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-size: 13px;\r\n}\r\n\r\n.context-label {\r\n  color: #6b7280;\r\n}\r\n\r\n.context-value {\r\n  color: #374151;\r\n  font-weight: 600;\r\n}\r\n\r\n.privacy-note {\r\n  font-size: 12px;\r\n  color: #6b7280;\r\n  text-align: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.feedback-actions {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.submit-btn {\r\n  background: linear-gradient(135deg, #10b981 0%, #059669 100%);\r\n  color: white;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  flex: 1;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.submit-btn:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);\r\n}\r\n\r\n.later-btn {\r\n  background: #f3f4f6;\r\n  color: #6b7280;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.later-btn:hover {\r\n  background: #e5e7eb;\r\n}\r\n\r\n.feedback-message {\r\n  position: absolute;\r\n  bottom: 10px;\r\n  left: 20px;\r\n  right: 20px;\r\n  padding: 10px 15px;\r\n  border-radius: 8px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  text-align: center;\r\n}\r\n\r\n.feedback-message.success {\r\n  background: #d1fae5;\r\n  color: #065f46;\r\n  border: 1px solid #10b981;\r\n}\r\n\r\n.feedback-message.info {\r\n  background: #dbeafe;\r\n  color: #1e40af;\r\n  border: 1px solid #3b82f6;\r\n}\r\n\r\n.feedback-message.warning {\r\n  background: #fef3c7;\r\n  color: #92400e;\r\n  border: 1px solid #f59e0b;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .feedback-panel {\r\n    width: 350px;\r\n  }\r\n  \r\n  .context-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n`;\r\n\r\n// Inject CSS\r\nconst style = document.createElement('style');\r\nstyle.textContent = feedbackCSS;\r\ndocument.head.appendChild(style);\r\n\r\n// Create singleton instance\r\nconst userFeedbackManager = new UserFeedbackManager();\r\n\r\nexport {\r\n  UserFeedbackManager,\r\n  userFeedbackManager\r\n};\r\n","/**\r\n * Performance Optimization Module\r\n * Provides comprehensive performance monitoring and optimization for the training app\r\n */\r\n\r\n/**\r\n * Performance Manager Class\r\n * Handles all performance monitoring, optimization, and reporting\r\n */\r\nclass PerformanceManager {\r\n  constructor() {\r\n    this.metrics = {\r\n      loadTimes: [],\r\n      renderTimes: [],\r\n      memoryUsage: [],\r\n      userInteractions: [],\r\n      errors: []\r\n    };\r\n    \r\n    this.observers = new Map();\r\n    this.isMonitoring = false;\r\n    this.optimizationEnabled = true;\r\n    \r\n    this.thresholds = {\r\n      loadTime: 3000,      // 3 seconds\r\n      renderTime: 100,     // 100ms\r\n      memoryLimit: 50,     // 50MB\r\n      fpsTarget: 60,       // 60 FPS\r\n      interactionDelay: 100 // 100ms\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Initialize performance monitoring\r\n   */\r\n  initialize() {\r\n    if (!this.isMonitoring) {\r\n      this.setupPerformanceObservers();\r\n      this.setupMemoryMonitoring();\r\n      this.setupUserInteractionTracking();\r\n      this.setupErrorTracking();\r\n      this.optimizeInitialLoad();\r\n      this.isMonitoring = true;\r\n      \r\n      console.log('🚀 Performance monitoring initialized');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup performance observers\r\n   */\r\n  setupPerformanceObservers() {\r\n    // Performance Observer for navigation timing\r\n    if ('PerformanceObserver' in window) {\r\n      const observer = new PerformanceObserver((list) => {\r\n        list.getEntries().forEach(entry => {\r\n          this.processPerformanceEntry(entry);\r\n        });\r\n      });\r\n      \r\n      observer.observe({ entryTypes: ['navigation', 'resource', 'measure', 'paint'] });\r\n      this.observers.set('performance', observer);\r\n    }\r\n\r\n    // Intersection Observer for lazy loading optimization\r\n    if ('IntersectionObserver' in window) {\r\n      const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting) {\r\n            this.optimizeElementVisibility(entry.target);\r\n          }\r\n        });\r\n      }, { rootMargin: '50px' });\r\n      \r\n      this.observers.set('intersection', observer);\r\n      this.setupLazyLoading(observer);\r\n    }\r\n\r\n    // Mutation Observer for DOM changes\r\n    if ('MutationObserver' in window) {\r\n      const observer = new MutationObserver((mutations) => {\r\n        this.optimizeDOMChanges(mutations);\r\n      });\r\n      \r\n      observer.observe(document.body, {\r\n        childList: true,\r\n        subtree: true,\r\n        attributes: true,\r\n        attributeFilter: ['class', 'style']\r\n      });\r\n      \r\n      this.observers.set('mutation', observer);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process performance entries\r\n   * @param {PerformanceEntry} entry - Performance entry\r\n   */\r\n  processPerformanceEntry(entry) {\r\n    switch (entry.entryType) {\r\n      case 'navigation':\r\n        this.handleNavigationTiming(entry);\r\n        break;\r\n      case 'resource':\r\n        this.handleResourceTiming(entry);\r\n        break;\r\n      case 'measure':\r\n        this.handleUserTiming(entry);\r\n        break;\r\n      case 'paint':\r\n        this.handlePaintTiming(entry);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle navigation timing\r\n   * @param {PerformanceNavigationTiming} timing - Navigation timing\r\n   */\r\n  handleNavigationTiming(timing) {\r\n    const metrics = {\r\n      timestamp: Date.now(),\r\n      loadTime: timing.loadEventEnd - timing.navigationStart,\r\n      domContentLoaded: timing.domContentLoadedEventEnd - timing.navigationStart,\r\n      firstPaint: timing.loadEventEnd - timing.navigationStart,\r\n      networkTime: timing.responseEnd - timing.requestStart,\r\n      renderTime: timing.loadEventEnd - timing.responseEnd\r\n    };\r\n\r\n    this.metrics.loadTimes.push(metrics);\r\n    \r\n    // Check for performance issues\r\n    if (metrics.loadTime > this.thresholds.loadTime) {\r\n      this.reportPerformanceIssue('slow_load', metrics);\r\n    }\r\n\r\n    this.updatePerformanceDashboard(metrics);\r\n  }\r\n\r\n  /**\r\n   * Handle resource timing\r\n   * @param {PerformanceResourceTiming} timing - Resource timing\r\n   */\r\n  handleResourceTiming(timing) {\r\n    const duration = timing.responseEnd - timing.requestStart;\r\n    \r\n    // Identify slow resources\r\n    if (duration > 1000) { // 1 second\r\n      console.warn(`🐌 Slow resource: ${timing.name} (${duration}ms)`);\r\n      \r\n      this.suggestResourceOptimization(timing);\r\n    }\r\n\r\n    // Track Chart.js loading specifically\r\n    if (timing.name.includes('chart.js')) {\r\n      this.optimizeChartLoading(timing);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup memory monitoring\r\n   */\r\n  setupMemoryMonitoring() {\r\n    if ('memory' in performance) {\r\n      setInterval(() => {\r\n        const memory = performance.memory;\r\n        const usage = {\r\n          timestamp: Date.now(),\r\n          used: memory.usedJSHeapSize / 1024 / 1024, // MB\r\n          total: memory.totalJSHeapSize / 1024 / 1024, // MB\r\n          limit: memory.jsHeapSizeLimit / 1024 / 1024 // MB\r\n        };\r\n\r\n        this.metrics.memoryUsage.push(usage);\r\n        \r\n        // Check for memory leaks\r\n        if (usage.used > this.thresholds.memoryLimit) {\r\n          this.handleMemoryPressure(usage);\r\n        }\r\n\r\n        // Keep only last 100 entries\r\n        if (this.metrics.memoryUsage.length > 100) {\r\n          this.metrics.memoryUsage.shift();\r\n        }\r\n      }, 10000); // Every 10 seconds\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup user interaction tracking\r\n   */\r\n  setupUserInteractionTracking() {\r\n    const interactionEvents = ['click', 'keydown', 'touchstart'];\r\n    \r\n    interactionEvents.forEach(eventType => {\r\n      document.addEventListener(eventType, (event) => {\r\n        const start = performance.now();\r\n        \r\n        // Use requestAnimationFrame to measure interaction delay\r\n        requestAnimationFrame(() => {\r\n          const delay = performance.now() - start;\r\n          \r\n          this.metrics.userInteractions.push({\r\n            timestamp: Date.now(),\r\n            type: eventType,\r\n            target: event.target.tagName,\r\n            delay\r\n          });\r\n\r\n          if (delay > this.thresholds.interactionDelay) {\r\n            this.reportInteractionDelay(event, delay);\r\n          }\r\n        });\r\n      }, { passive: true });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup error tracking\r\n   */\r\n  setupErrorTracking() {\r\n    window.addEventListener('error', (event) => {\r\n      this.metrics.errors.push({\r\n        timestamp: Date.now(),\r\n        message: event.message,\r\n        filename: event.filename,\r\n        line: event.lineno,\r\n        column: event.colno,\r\n        stack: event.error?.stack\r\n      });\r\n    });\r\n\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.metrics.errors.push({\r\n        timestamp: Date.now(),\r\n        type: 'promise_rejection',\r\n        reason: event.reason\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimize initial load\r\n   */\r\n  optimizeInitialLoad() {\r\n    // Defer non-critical scripts\r\n    this.deferNonCriticalScripts();\r\n    \r\n    // Preload critical resources\r\n    this.preloadCriticalResources();\r\n    \r\n    // Optimize images\r\n    this.optimizeImages();\r\n    \r\n    // Setup service worker\r\n    this.setupServiceWorker();\r\n  }\r\n\r\n  /**\r\n   * Defer non-critical scripts\r\n   */\r\n  deferNonCriticalScripts() {\r\n    const scripts = document.querySelectorAll('script[src]');\r\n    scripts.forEach(script => {\r\n      const src = script.src;\r\n      \r\n      // Defer analytics and non-critical scripts\r\n      if (src.includes('analytics') || \r\n          src.includes('feedback') || \r\n          src.includes('chart.js')) {\r\n        script.defer = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Preload critical resources\r\n   */\r\n  preloadCriticalResources() {\r\n    const criticalResources = [\r\n      '/js/core/trainingState.js',\r\n      '/js/algorithms/volume.js',\r\n      '/js/ui/globals.js',\r\n      '/css/enhancedAdvanced.css'\r\n    ];\r\n\r\n    criticalResources.forEach(resource => {\r\n      const link = document.createElement('link');\r\n      link.rel = 'preload';\r\n      link.href = resource;\r\n      link.as = resource.endsWith('.js') ? 'script' : 'style';\r\n      document.head.appendChild(link);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Setup lazy loading\r\n   * @param {IntersectionObserver} observer - Intersection observer\r\n   */\r\n  setupLazyLoading(observer) {\r\n    // Lazy load sections\r\n    document.querySelectorAll('.section-content').forEach(section => {\r\n      observer.observe(section);\r\n    });\r\n\r\n    // Lazy load calculator cards\r\n    document.querySelectorAll('.calculator').forEach(card => {\r\n      observer.observe(card);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Optimize element visibility\r\n   * @param {Element} element - Element becoming visible\r\n   */\r\n  optimizeElementVisibility(element) {\r\n    // Initialize complex calculations only when needed\r\n    if (element.classList.contains('calculator')) {\r\n      this.initializeCalculatorFeatures(element);\r\n    }\r\n\r\n    // Load charts only when section is visible\r\n    if (element.id === 'advanced-content') {\r\n      this.loadAdvancedFeatures();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize calculator features\r\n   * @param {Element} calculator - Calculator element\r\n   */\r\n  initializeCalculatorFeatures(calculator) {\r\n    const calculatorId = calculator.id;\r\n    \r\n    // Load features on demand\r\n    switch (calculatorId) {\r\n      case 'analyticsCard':\r\n        this.loadAnalyticsFeatures();\r\n        break;\r\n      case 'liveMonitorCard':\r\n        this.loadLiveMonitorFeatures();\r\n        break;\r\n      case 'trainingIntelligenceCard':\r\n        this.loadIntelligenceFeatures();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load analytics features\r\n   */\r\n  loadAnalyticsFeatures() {\r\n    if (!window.optimizeVolumeLandmarks) {\r\n      import('/js/algorithms/analytics.js').then(module => {\r\n        console.log('📊 Analytics features loaded');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load live monitor features\r\n   */\r\n  loadLiveMonitorFeatures() {\r\n    if (!window.liveMonitor) {\r\n      import('/js/algorithms/livePerformance.js').then(module => {\r\n        console.log('⚡ Live monitor features loaded');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load intelligence features\r\n   */\r\n  loadIntelligenceFeatures() {\r\n    if (!window.advancedIntelligence) {\r\n      import('/js/algorithms/intelligenceHub.js').then(module => {\r\n        console.log('🧠 Intelligence features loaded');\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load advanced features\r\n   */\r\n  loadAdvancedFeatures() {\r\n    // Load Chart.js only when advanced section is opened\r\n    if (!window.Chart && !document.querySelector('script[src*=\"chart.js\"]')) {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://cdn.jsdelivr.net/npm/chart.js';\r\n      script.onload = () => {\r\n        console.log('📈 Chart.js loaded on demand');\r\n        this.initializeCharts();\r\n      };\r\n      document.head.appendChild(script);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Optimize DOM changes\r\n   * @param {MutationRecord[]} mutations - DOM mutations\r\n   */\r\n  optimizeDOMChanges(mutations) {\r\n    let hasStyleChanges = false;\r\n    let hasContentChanges = false;\r\n\r\n    mutations.forEach(mutation => {\r\n      if (mutation.type === 'attributes' && \r\n          (mutation.attributeName === 'style' || mutation.attributeName === 'class')) {\r\n        hasStyleChanges = true;\r\n      } else if (mutation.type === 'childList') {\r\n        hasContentChanges = true;\r\n      }\r\n    });\r\n\r\n    // Batch style changes\r\n    if (hasStyleChanges) {\r\n      this.batchStyleUpdates();\r\n    }\r\n\r\n    // Optimize content changes\r\n    if (hasContentChanges) {\r\n      this.optimizeContentUpdates();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Batch style updates\r\n   */\r\n  batchStyleUpdates() {\r\n    // Use requestAnimationFrame to batch style changes\r\n    if (!this.styleUpdateScheduled) {\r\n      this.styleUpdateScheduled = true;\r\n      \r\n      requestAnimationFrame(() => {\r\n        // Apply any pending style optimizations\r\n        this.applyStyleOptimizations();\r\n        this.styleUpdateScheduled = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle memory pressure\r\n   * @param {Object} usage - Memory usage data\r\n   */\r\n  handleMemoryPressure(usage) {\r\n    console.warn('🚨 High memory usage detected:', usage);\r\n    \r\n    // Clear old data\r\n    this.clearOldMetrics();\r\n    \r\n    // Garbage collect if possible\r\n    if (window.gc) {\r\n      window.gc();\r\n    }\r\n    \r\n    // Notify user if memory is critical\r\n    if (usage.used > this.thresholds.memoryLimit * 1.5) {\r\n      this.showMemoryWarning();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report performance issue\r\n   * @param {string} type - Issue type\r\n   * @param {Object} data - Issue data\r\n   */\r\n  reportPerformanceIssue(type, data) {\r\n    console.warn(`⚠️ Performance issue detected: ${type}`, data);\r\n    \r\n    // Store for analytics\r\n    const issue = {\r\n      type,\r\n      timestamp: Date.now(),\r\n      data,\r\n      userAgent: navigator.userAgent,\r\n      url: window.location.href\r\n    };\r\n    \r\n    const issues = JSON.parse(localStorage.getItem('performance-issues') || '[]');\r\n    issues.push(issue);\r\n    \r\n    // Keep only last 50 issues\r\n    if (issues.length > 50) {\r\n      issues.splice(0, issues.length - 50);\r\n    }\r\n    \r\n    localStorage.setItem('performance-issues', JSON.stringify(issues));\r\n  }\r\n\r\n  /**\r\n   * Generate performance report\r\n   * @returns {Object} - Performance report\r\n   */\r\n  generatePerformanceReport() {\r\n    const currentTime = Date.now();\r\n    const lastHour = currentTime - (60 * 60 * 1000);\r\n    \r\n    // Filter recent metrics\r\n    const recentLoadTimes = this.metrics.loadTimes.filter(m => m.timestamp > lastHour);\r\n    const recentMemory = this.metrics.memoryUsage.filter(m => m.timestamp > lastHour);\r\n    const recentInteractions = this.metrics.userInteractions.filter(m => m.timestamp > lastHour);\r\n    const recentErrors = this.metrics.errors.filter(m => m.timestamp > lastHour);\r\n    \r\n    return {\r\n      timestamp: currentTime,\r\n      performance: {\r\n        averageLoadTime: this.calculateAverage(recentLoadTimes, 'loadTime'),\r\n        averageRenderTime: this.calculateAverage(recentLoadTimes, 'renderTime'),\r\n        slowestLoad: Math.max(...recentLoadTimes.map(m => m.loadTime), 0),\r\n        loadTimeP95: this.calculatePercentile(recentLoadTimes.map(m => m.loadTime), 95)\r\n      },\r\n      memory: {\r\n        currentUsage: recentMemory[recentMemory.length - 1]?.used || 0,\r\n        peakUsage: Math.max(...recentMemory.map(m => m.used), 0),\r\n        averageUsage: this.calculateAverage(recentMemory, 'used')\r\n      },\r\n      interactions: {\r\n        totalInteractions: recentInteractions.length,\r\n        averageDelay: this.calculateAverage(recentInteractions, 'delay'),\r\n        slowInteractions: recentInteractions.filter(i => i.delay > this.thresholds.interactionDelay).length\r\n      },\r\n      errors: {\r\n        totalErrors: recentErrors.length,\r\n        errorTypes: this.categorizeErrors(recentErrors)\r\n      },\r\n      recommendations: this.generateRecommendations()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate performance recommendations\r\n   * @returns {Array} - Performance recommendations\r\n   */\r\n  generateRecommendations() {\r\n    const recommendations = [];\r\n    const report = this.metrics;\r\n    \r\n    // Load time recommendations\r\n    const avgLoadTime = this.calculateAverage(report.loadTimes, 'loadTime');\r\n    if (avgLoadTime > this.thresholds.loadTime) {\r\n      recommendations.push({\r\n        type: 'load_time',\r\n        priority: 'high',\r\n        message: 'Page load time is above optimal threshold',\r\n        suggestion: 'Consider enabling service worker caching and optimizing resource loading'\r\n      });\r\n    }\r\n    \r\n    // Memory recommendations\r\n    const currentMemory = report.memoryUsage[report.memoryUsage.length - 1];\r\n    if (currentMemory && currentMemory.used > this.thresholds.memoryLimit * 0.8) {\r\n      recommendations.push({\r\n        type: 'memory',\r\n        priority: 'medium',\r\n        message: 'Memory usage is approaching limits',\r\n        suggestion: 'Clear old data and optimize data structures'\r\n      });\r\n    }\r\n    \r\n    // Interaction recommendations\r\n    const slowInteractions = report.userInteractions.filter(i => i.delay > this.thresholds.interactionDelay);\r\n    if (slowInteractions.length > 5) {\r\n      recommendations.push({\r\n        type: 'interactions',\r\n        priority: 'medium',\r\n        message: 'Multiple slow user interactions detected',\r\n        suggestion: 'Optimize event handlers and consider debouncing'\r\n      });\r\n    }\r\n    \r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Optimize images\r\n   */\r\n  optimizeImages() {\r\n    const images = document.querySelectorAll('img');\r\n    images.forEach(img => {\r\n      // Add loading=\"lazy\" for non-critical images\r\n      if (!img.hasAttribute('loading')) {\r\n        img.loading = 'lazy';\r\n      }\r\n      \r\n      // Add proper sizing attributes\r\n      if (!img.hasAttribute('width') || !img.hasAttribute('height')) {\r\n        img.style.width = 'auto';\r\n        img.style.height = 'auto';\r\n      }\r\n    });\r\n  }  /**\r\n   * Setup service worker\r\n   */  setupServiceWorker() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.register(new URL('../../sw.js', import.meta.url))\r\n        .then(registration => {\r\n          console.log('✅ Service Worker registered');\r\n        })\r\n        .catch(error => {\r\n          console.warn('❌ Service Worker registration failed:', error);\r\n        });\r\n    }\r\n  }\r\n\r\n  // Utility methods\r\n  calculateAverage(array, property) {\r\n    if (array.length === 0) return 0;\r\n    const sum = array.reduce((acc, item) => acc + (item[property] || 0), 0);\r\n    return sum / array.length;\r\n  }\r\n\r\n  calculatePercentile(array, percentile) {\r\n    if (array.length === 0) return 0;\r\n    const sorted = array.sort((a, b) => a - b);\r\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\r\n    return sorted[index] || 0;\r\n  }\r\n\r\n  categorizeErrors(errors) {\r\n    const categories = {};\r\n    errors.forEach(error => {\r\n      const type = error.type || 'runtime';\r\n      categories[type] = (categories[type] || 0) + 1;\r\n    });\r\n    return categories;\r\n  }\r\n\r\n  clearOldMetrics() {\r\n    const oneHourAgo = Date.now() - (60 * 60 * 1000);\r\n    \r\n    this.metrics.loadTimes = this.metrics.loadTimes.filter(m => m.timestamp > oneHourAgo);\r\n    this.metrics.userInteractions = this.metrics.userInteractions.filter(m => m.timestamp > oneHourAgo);\r\n    this.metrics.errors = this.metrics.errors.filter(m => m.timestamp > oneHourAgo);\r\n  }\r\n\r\n  showMemoryWarning() {\r\n    if (!document.querySelector('.memory-warning')) {\r\n      const warning = document.createElement('div');\r\n      warning.className = 'memory-warning';\r\n      warning.innerHTML = `\r\n        <div style=\"background: #fef3c7; color: #92400e; padding: 10px; border-radius: 8px; margin: 10px; border: 1px solid #f59e0b;\">\r\n          ⚠️ High memory usage detected. Consider refreshing the page for optimal performance.\r\n          <button onclick=\"location.reload()\" style=\"margin-left: 10px; padding: 5px 10px; background: #f59e0b; color: white; border: none; border-radius: 4px; cursor: pointer;\">Refresh</button>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(warning);\r\n      \r\n      setTimeout(() => warning.remove(), 10000);\r\n    }\r\n  }\r\n\r\n  applyStyleOptimizations() {\r\n    // Consolidate similar style changes\r\n    // Remove unused CSS classes\r\n    // Optimize animation performance\r\n  }\r\n\r\n  optimizeContentUpdates() {\r\n    // Batch DOM updates\r\n    // Minimize reflows and repaints\r\n  }\r\n\r\n  initializeCharts() {\r\n    // Initialize charts with performance optimization\r\n    if (window.Chart) {\r\n      Chart.defaults.animation.duration = 300; // Faster animations\r\n      Chart.defaults.responsive = true;\r\n      Chart.defaults.maintainAspectRatio = false;\r\n    }\r\n  }\r\n\r\n  suggestResourceOptimization(timing) {\r\n    console.log(`💡 Optimization suggestion for ${timing.name}:`, {\r\n      duration: timing.responseEnd - timing.requestStart,\r\n      suggestion: 'Consider caching or CDN optimization'\r\n    });\r\n  }\r\n\r\n  optimizeChartLoading(timing) {\r\n    console.log('📈 Optimizing Chart.js loading based on timing:', timing);\r\n  }\r\n\r\n  reportInteractionDelay(event, delay) {\r\n    console.warn(`🐌 Slow interaction detected:`, {\r\n      type: event.type,\r\n      target: event.target,\r\n      delay: `${delay}ms`\r\n    });\r\n  }\r\n\r\n  updatePerformanceDashboard(metrics) {\r\n    // Update performance indicators in UI\r\n    const perfIndicator = document.getElementById('performance-indicator');\r\n    if (perfIndicator) {\r\n      const status = metrics.loadTime < this.thresholds.loadTime ? '🟢' : '🟡';\r\n      perfIndicator.textContent = status;\r\n    }\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst performanceManager = new PerformanceManager();\r\n\r\n// Auto-initialize when DOM is ready\r\nif (document.readyState === 'loading') {\r\n  document.addEventListener('DOMContentLoaded', () => {\r\n    performanceManager.initialize();\r\n  });\r\n} else {\r\n  performanceManager.initialize();\r\n}\r\n\r\nexport {\r\n  PerformanceManager,\r\n  performanceManager\r\n};\r\n","module.exports = Promise.resolve(parcelRequire(\"5eA0i\"))","module.exports = Promise.resolve(parcelRequire(\"6qXhO\"))","module.exports = Promise.resolve(parcelRequire(\"bDUtg\"))","module.exports = __parcel__import__.meta.resolve(\"4ujR8\");"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","_chartManagerJs","_volumeJs","_effortJs","_fatigueJs","_validationJs","_trainingStateJs","_trainingStateJsDefault","interopDefault","_analyticsJs","_exerciseSelectionJs","_livePerformanceJs","_intelligenceHubJs","_dataVisualizationJs","_wellnessIntegrationJs","_periodizationSystemJs","_dataExportJs","_userFeedbackJs","_performanceJs","trainingState","default","updateChart","resetWeeklyData","resetChart","showVolumeLandmarks","addVolumeLandmarks","exportSummary","exportChartImage","toggleSection","sectionId","content","document","getElementById","banner","previousElementSibling","icon","querySelector","postHeight","h","documentElement","getBoundingClientRect","height","postMessage","phxHeight","classList","contains","remove","style","transform","addEventListener","handler","display","removeEventListener","requestAnimationFrame","add","scoreStimulus","setProgressionAlgorithm","getVolumeProgression","analyzeDeloadNeed","autoSetIncrement","processWeeklyVolumeProgression","calculateTargetRIR","validateEffortLevel","getScheduledRIR","processWeeklyLoadAdjustments","getLoadProgression","simulateWeeklyRIRFeedback","analyzeFrequency","calculateOptimalFrequency","isHighFatigue","validateLoad","validateSets","validateMesocycleLength","optimizeVolumeLandmarks","predictDeloadTiming","adaptiveRIRRecommendations","detectTrainingPlateaus","selectOptimalExercises","generateWeeklyProgram","dataVisualizer","wellnessSystem","periodizationSystem","liveMonitor","advancedIntelligence","dataExportManager","userFeedbackManager","performanceManager","submitFeedback","muscle","value","mmc","parseInt","pump","disruption","soreness","actualRIR","perfRadio","performance","isNaN","alert","stimulusResult","progressionResult","volumeProgression","stimulus","hasIllness","rirValidation","parseFloat","setChange","addSets","output","html","advice","currentSets","projectedSets","score","action","replace","volumeStatus","urgency","feedback","recommendation","deloadRecommended","innerHTML","className","analyzeDeload","halfMuscles","checked","mrvBreach","illness","lowMotivation","analysis","reasons","push","shouldDeload","join","setTimeout","confirm","startDeload","soreDays","sessionGap","trainingAge","optimal","currentVolume","currentWeekSets","recommendedFrequency","setsPerSession","type","saveLandmarks","mv","mev","mav","mrv","updateVolumeLandmarks","MV","MEV","MAV","MRV","applyVolumePreset","level","mult","multipliers","beginner","intermediate","advanced","baseLandmarks","volumeLandmarks","Math","round","setupMeso","week","goal","validation","isValid","warning","mesoLen","weekNo","saveState","getTargetRIR","toFixed","advanceToNextWeek","nextWeek","updateAllDisplays","summary","getStateSummary","meso","block","targetRIR","currentPhase","console","log","initializeAllMusclesAtMEV","muscles","keys","forEach","initializeMuscleAtMEV","map","runAutoVolumeProgression","weeklyFeedback","perf","getWeeklySets","getVolumeStatus","floor","random","jointAche","perfChange","lastLoad","recoverySession","result","message","deloadTriggered","mrvHits","values","progressionLog","reduce","sum","increment","createElement","progressionDetails","entries","previousSets","reason","runWeeklyLoadAdjustments","currentWeek","weeklyRIRFeedback","adjustmentResult","adjustmentDetails","adjustments","adj","loadAdjustment","currentRIR","musclesAdjusted","totalMuscles","avgLoadChange","showNextWeekLoadProgression","progressions","sessionHistory","averageRIR","progression","prog","loadIncrease","nextRIR","p","showRIRSchedule","mesoLength","schedule","scheduledRIR","isCurrent","rir","intensity","scheduleDisplay","item","sessionActive","currentSetNumber","showSystemMessage","existingMessage","messageEl","cssText","textContent","body","appendChild","createSystemOutput","section","parentNode","startLiveSession","exercise","plannedSets","startSession","logTrainingSet","data","setData","weight","reps","rpe","techniqueRating","notes","logSet","sessionProgress","getSessionProgress","setInfo","completedSets","progressPercentage","totalLoad","showSetFeedback","nextSetRecommendations","rationale","rest","strategy","endLiveSession","endSession","showSessionSummary","targetAchievement","grade","consistency","rating","progress","duration","recommendations","rec","initializeIntelligence","initialize","analytics","exerciseSelection","liveMonitoring","getWeeklyIntelligence","intelligence","toUpperCase","optimizations","opt","riskAssessment","riskLevel","riskScore","getOptimalExercises","exercises","availableEquipment","trainingGoal","experienceLevel","fatigueLevel","timeConstraint","slice","index","sets","repRange","reasoning","assessTrainingRisk","riskFactors","factor","optimized","avgStimulus","avgFatigue","performanceChange","confidence","prediction","weeklyFatigueScore","performanceTrend","motivationLevel","sleepQuality","weeksUntilDeload","primaryIndicator","recommendedAction","detectPlateaus","plateauAnalysis","weeklyPerformance","weeklyVolume","weeklyIntensity","weeklyFatigue","plateauDetected","plateauType","interventions","intervention","getAdaptiveRIR","adaptiveRIR","nextDayFatigue","recoveryDays","recommendedRIR","personalizedFactors","days","split","sessionTime","experience","program","daysPerWeek","splitType","timePerSession","sessions","session","day","exportAllData","format","includePersonalData","includeAnalytics","includeWellness","success","filename","size","error","createBackup","createAutoBackup","backupKey","dataPoints","viewBackups","backups","getAvailableBackups","backup","date","Date","toLocaleString","key","restoreBackup","restoreFromBackup","location","reload","getPerformanceReport","report","generatePerformanceReport","averageLoadTime","loadTimeP95","memory","currentUsage","peakUsage","interactions","totalInteractions","averageDelay","priority","clearPerformanceData","clearOldMetrics","localStorage","removeItem","openFeedbackWidget","openFeedbackPanel","getUserAnalytics","generateAnalyticsDashboard","usage","totalSessions","averageSessionDuration","featuresUsed","mostUsedFeature","totalFeedback","averageRating","insights","insight","defineInteropFlag","export","initChart","showDeloadVisualization","weeklyChart","canvas","ctx","getContext","Chart","chartData","backgroundColors","getVolumeColor","labels","datasets","label","backgroundColor","borderColor","color","borderWidth","pointRadius","pointBackgroundColor","borderDash","options","responsive","maintainAspectRatio","plugins","legend","tooltip","callbacks","afterLabel","context","parsed","y","landmarks","status","scales","beginAtZero","grid","ticks","stepSize","newData","newColors","update","updateWeeklySets","deloadData","warn","base64Image","toBase64Image","link","download","href","click","removeChild","notification","e","TrainingState","instance","blockNo","deloadPhase","resensitizationPhase","lastWeekSets","baselineStrength","consecutiveMRVWeeks","recoverySessionsThisWeek","totalMusclesNeedingRecovery","loadState","max","min","startRIR","progressionRate","colors","additionalSets","ceil","majorMuscles","some","shouldResensitize","deloadSets","startResensitization","mrvBreaches","filter","resetWeek","hitMRV","atMRV","mostMusclesAtMRV","mrvCount","setBaselineStrength","load","repStrengthDrop","baseline","getRecoveryVolume","midpoint","state","setItem","JSON","stringify","saved","getItem","parse","assign","migrateLegacyData","hasLegacyData","oldKey","oldValue","mevKey","mrvKey","mevValue","mrvValue","resensitizationRecommended","a","__esModule","exportAll","source","dest","prototype","hasOwnProperty","enumerable","destName","analyzeVolumeStatus","calculateRecoveryVolume","validateVolumeInput","clamp","val","clampedMmc","clampedPump","clampedDisruption","totalScore","breakdown","atMEV","lowStimulus","goodRecovery","delta","baseDelta","weekComplete","s","progressionMatrix","percentage","recoveryVolume","recommendedSets","proposedSets","volumeAnalysis","finalSetChange","finalAdvice","stimulusScore","musclesNeedingRecovery","sorenessRecoveryDays","currentSessionGap","recoveryTime","frequencyAdjustment","recoveryRatio","constraints","availableDays","recoveryCapacity","volume","ageRecommendation","baseFrequencies","volumeFrequency","adjustedFrequency","recoveryMultipliers","low","normal","high","totalVolume","alternatives","conservative","aggressive","strengthDrop","SFR","fatigue","getEffortProgression","getWeeklyEffortSummary","getAutoregulationAdvice","RIR_SCHEDULE","weekNumber","endRIR","clampedRIR","intensityLevel","weekIndex","tolerance","target","deviation","abs","isWithinTolerance","difference","lastSession","weightRecommendation","rirAdjustment","projectedRIR","currentTargetRIR","totalMusclesAdjusted","avgActualRIR","rirDeviation","rirDrop","performanceDeviation","recentPerformance","baseIncrease","sessionFeedback","plannedRIR","setNumber","totalPlannedSets","weightAdjustment","weeklyAdvice","phaseDescription","getPhaseDescription","simulatedRIR","loadPercent","loadRanges","hypertrophy","strength","power","endurance","range","severity","isOptimal","allowOverreach","setCount","zone","weeks","calculateTrajectory","calculateConfidence","historicalData","bestSFR","bestVolume","stimulusResponse","optimalMEV","findOptimalMEV","goodStimulus","d","optimalMAV","sfr","optimalMRV","findOptimalMRV","fatiguePoints","current","lastOptimized","toISOString","currentMetrics","fatigueTrajectory","performanceTrajectory","weeksToFatigueLimit","predictThresholdCrossing","weeksToPerformanceDecline","predictedWeeks","calculatePredictionConfidence","fatigueR2","calculateR2","avgR2","fatigueProjection","performanceProjection","slope","intercept","n","sumX","_","sumY","trajectory","threshold","Infinity","responseHistory","history","baseRIR","overreachingTendency","overreachEvents","recoverySpeed","calculateRecoverySpeed","recoveryTimes","b","techniqueConsistency","calculateTechniqueConsistency","techniqueScores","avgTechnique","adaptedRIR","adjustment","trainingData","performancePlateau","detectStagnation","volumePlateau","fatigueAccumulation","detectTrend","direction","analysisDetails","performanceStagnant","volumeStagnant","fatigueAccumulating","baseRecommendations","complete_stagnation","performance_plateau","volume_plateau","windowSize","recentData","cv","sqrt","calculateVariance","mean","squaredDiffs","pow","EXERCISE_DATABASE","formatExerciseName","chest","primaryMuscles","secondaryMuscles","equipment","fatigueIndex","skillRequirement","ranges","biomechanics","rangeOfMotion","stabilityRequirement","coordination","back","quads","previousExercises","injuryHistory","preferredStyle","muscleExercises","toLowerCase","scoredExercises","risk","every","eq","includes","skillGap","levels","goalRange","injuryRisk","baseSets","restPeriods","sort","word","charAt","goals","muscleGroups","generateUpperLowerSplit","upperSession","upperMuscles","lowerSession","lowerMuscles","generatePushPullLegsSplit","splits","pull","legs","splitOrder","generateFullBodySplit","allMuscles","LivePerformanceMonitor","sessionData","startTime","currentExercise","isActive","sessionConfig","emit","sessionId","generateSessionId","timestamp","estimatedLoad","calculateEstimatedLoad","generateSetFeedback","generateNextSetRecommendations","shouldContinue","shouldContinueSession","trend","analyzeIntraSessionTrend","declining","lastSet","fatigueIndicators","assessIntraSetFatigue","trending","lastThreeSets","rirTrend","set","isRirIncreasing","loads","loadDecline","significantDecline","currentSet","avgRIRDecrease","calculateAvgRIRDecrease","sessionDuration","fatigueScore","indicators","poorRIRProgression","longSession","excessiveSets","rirValues","decreases","setsRemaining","avgRIR","generateSessionSummary","endTime","calculateTargetAchievement","calculateConsistency","volumeLoad","generateSessionRecommendations","storeSessionData","rirDeviations","avgDeviation","setsOnTarget","targetPercentage","averageDeviation","expectedProgression","rirVariance","loadVariance","consistencyScore","rirConsistency","loadConsistency","actual","expected","variance","maxExpected","setsCompleted","setsPlanned","updateTrainingStateFromSession","maxLoad","currentBaseline","fatigueData","now","toString","substr","event","callback","on","AdvancedTrainingIntelligence","analyticsEnabled","exerciseSelectionEnabled","liveMonitoringEnabled","lastOptimization","trainingInsights","setupLiveMonitoring","initializeAnalytics","processSessionData","processLiveSetData","getHistoricalData","exerciseSelections","generateAnalyticsInsights","deloadPrediction","generateExerciseRecommendations","checkForOptimizations","volumeLandmarkOptimizations","performanceTrends","muscleData","optimizedLandmarks","rirHistory","estimateFatigueLevel","getRecentExercises","primary","weeksSinceOptimization","w","currentLandmarks","estimatedImprovement","calculateImprovementEstimate","staleExercises","detectStaleExercises","highFatigueMuscles","getHighFatigueMuscles","calculateVolumeProgressionRate","detectPerformanceDecline","generateRiskMitigationRecommendations","updatedAt","extractFatigueFromSession","triggerRecoveryRecommendations","immediate","shortTerm","longTerm","startsWith","baselineFatigue","recentInsight","recentSessions","recentWeeks","volumeChanges","volumeChange","totalSets","exerciseUsage","count","usageCount","mevImprovement","mavImprovement","mevChange","mavChange","estimatedVolumeIncrease","recentMetrics","AdvancedDataVisualizer","chartConfigs","getPerformanceChartConfig","getVolumeChartConfig","getFatigueChartConfig","getIntelligenceChartConfig","createTrainingDashboard","overview","generateOverviewMetrics","trends","generateTrendAnalysis","predictions","generatePredictiveAnalytics","generateActionableInsights","visualizations","generateChartData","generatePerformanceTrendChart","last12Weeks","tension","fill","yAxisID","getAdvancedChartOptions","generateVolumeHeatmap","Array","from","weekData","find","flat","config","getHeatmapConfig","generatePredictiveChart","calculateTrendLine","fatigueTrend","futureLabels","futurePerformance","getPredictiveChartOptions","generateMuscleComparisonRadar","mevPercentage","efficiency","getVolumeStatusScore","point","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","getRadarChartOptions","generateTrainingTimeline","events","title","description","metrics","avgPerformance","generateExecutiveSummary","trainingConsistency","calculatePerformanceTrend","volumeEfficiency","calculateVolumeEfficiency","recoveryStatus","calculateRecoveryStatus","nextActions","generateNextActions","keyInsights","generateKeyInsights","points","performances","scores","interaction","mode","intersect","text","position","y1","drawOnChartArea","actions","latest","avgVolume","WellnessRecoverySystem","wellnessMetrics","initializeWellnessTracking","recoveryProtocols","initializeRecoveryProtocols","sleep","quality","deepSleepPercentage","wakeups","bedtimeConsistency","stress","workStress","lifeStress","trainingStress","overallStress","stressManagementPractices","nutrition","hydration","proteinAdequacy","carbTiming","micronutrients","mealTiming","supplements","lifestyle","screenTime","sunlightExposure","socialConnection","natureExposure","workLifeBalance","physiological","restingHeartRate","heartRateVariability","bodyTemperature","bloodPressure","systolic","diastolic","bodyWeight","optimization","daily","acute","chronic","recovery","energy","activeRecovery","passiveRecovery","trackDailyWellness","dailyMetrics","wellnessData","recoveryScore","calculateRecoveryScore","readinessScore","calculateReadinessScore","generateWellnessRecommendations","factors","sleepScore","calculateSleepScore","stressScore","calculateStressScore","nutritionScore","calculateNutritionScore","lifestyleScore","calculateLifestyleScore","trainingHistory","getRecentTrainingLoad","getCurrentFatigueLevel","consecutiveHighDays","getBaselineHR","training","analyzeWellnessTrends","wellnessHistory","getWellnessHistory","analyzeSleepTrend","analyzeStressTrend","analyzeRecoveryTrend","readiness","analyzeReadinessTrend","correlations","analyzeWellnessCorrelations","generateWellnessReport","trainingImpact","analyzeTrainingWellnessImpact","keyMetrics","getKeyWellnessMetrics","alerts","generateWellnessAlerts","protocols","getPersonalizedProtocols","generateWellnessInsights","optimizeTrainingBasedOnWellness","plannedTraining","modifications","volumeMultiplier","intensityMultiplier","originalTraining","adjustedTraining","applyTrainingModifications","avgStress","avg","today","setDate","getDate","reverse","AdvancedPeriodizationSystem","periodizationModels","initializePeriodizationModels","planningTemplates","initializePlanningTemplates","adaptationAlgorithms","initializeAdaptationAlgorithms","linear","phases","intensityProgression","applications","undulating","conjugate","autoregulated","hypertrophy12Week","focus","intensityRange","strength16Week","powerbuilding20Week","volumeAdaptation","minIncrease","maxIncrease","fatigueThreshold","recoveryThreshold","intensityAdaptation","performanceThreshold","plateauThreshold","frequencyAdaptation","minFrequency","maxFrequency","recoveryFactor","volumeFactor","createLongTermPlan","userProfile","analyzeUserProfile","selectedModel","selectOptimalPeriodization","planStructure","generatePlanStructure","weeklyPlans","generateWeeklyPlans","progressionPlan","createProgressionPlan","model","startDate","estimatedCompletion","calculateCompletionDate","structure","adaptationTriggers","defineAdaptationTriggers","milestones","definePlanMilestones","contingencyPlans","createContingencyPlans","getHistoricalTrainingData","currentCapacity","assessCurrentCapacity","responsePatterns","analyzeResponsePatterns","determineExperienceLevel","capacity","preferences","analyzeTrainingPreferences","limitingFactors","identifyLimitingFactors","adaptationRate","calculateAdaptationRate","profile","variabilityTolerance","selectedKey","phase","weekPlan","generateWeekPlan","weekInPhase","absoluteWeek","weekProgression","plan","progressionFactor","adjustedLandmarks","adjustLandmarksForPhase","targetSets","calculateTargetSets","selectPhaseExercises","loadProgression","calculateLoadProgression","recoveryRequirements","calculateRecoveryRequirements","createVolumeProgression","createIntensityProgression","exerciseProgression","createExerciseProgression","deloadTriggers","defineDeloadTriggers","adaptationChecks","scheduleAdaptationChecks","autoAdjustmentRules","defineAutoAdjustmentRules","adaptPlanBasedOnPerformance","currentPlan","adaptations","volumeAdjustment","intensityAdjustment","exerciseModifications","phaseModifications","analyzePerformanceTrend","fatigueStatus","assessFatigueStatus","wellnessImpact","assessWellnessImpact","significance","applyPlanAdaptations","generateIntelligentDeload","currentStatus","deloadIntensity","calculateDeloadIntensity","deloadDuration","calculateDeloadDuration","deloadActivities","selectDeloadActivities","determineDeloadType","activities","volumeReduction","calculateVolumeReduction","intensityReduction","calculateIntensityReduction","focusAreas","identifyDeloadFocusAreas","returnCriteria","defineReturnCriteria","monitoring","defineDeloadMonitoring","createPeakingProtocol","competition","weeksOut","peakingPhases","definePeakingPhases","tapering","createTaperingPlan","competitionPrep","createCompetitionPrep","timeline","createPeakingTimeline","keyWorkouts","scheduleKeyWorkouts","recoveryProtocol","createPeakingRecoveryProtocol","nutritionGuidance","createPeakingNutritionPlan","mentalPreparation","createMentalPrepPlan","totalWeeks","calculateProgressionRate","muscleDistribution","analyzeMuscleDistribution","assessRecoveryCapacity","adaptationPotential","assessAdaptationPotential","baseTarget","completion","DataExportManager","exportFormats","compressionEnabled","encryptionEnabled","dateRange","compress","exportData","gatherExportData","exportAsJSON","exportAsCSV","exportAsExcel","metadata","exportDate","appVersion","exportType","wellness","serializeTrainingState","gatherUserPreferences","gatherSessionHistory","gatherFeedbackData","gatherAnalyticsData","gatherWellnessData","calculateDataPoints","deloadWeeks","getCurrentPhase","stateHistory","getStateHistory","isWithinDateRange","feedbackData","feedbackId","volumeOptimizations","deloadPredictions","plateauAnalyses","performanceMetrics","analyticsData","theme","units","notifications","autoProgression","jsonString","blob","Blob","getDateString","downloadBlob","csvData","convertToCSV","csv","results","overall","importData","file","overwrite","merge","fileContent","readFile","endsWith","parseCSV","processImportData","imported","warnings","errors","hasData","importTrainingState","mergeTrainingState","importSessionHistory","importFeedback","importWellness","importAnalytics","backupData","compressedData","cleanOldBackups","checkDate","start","endDate","end","url","URL","createObjectURL","revokeObjectURL","Promise","reject","reader","FileReader","onload","onerror","readAsText","toDelete","stateData","setSets","UserFeedbackManager","feedbackCategories","privacyMode","initializeFeedbackSystem","createFeedbackWidget","setupUsageTracking","schedulePeriodicFeedback","widget","setupFeedbackEvents","querySelectorAll","star","dataset","setRating","opacity","currentRating","toggleFeedbackPanel","panel","closeFeedbackPanel","populateUsageContext","trackEvent","getUsageContext","deviceType","sessionCount","getStoredUsage","currentBlock","getDeviceType","lastActive","category","trim","showFeedbackMessage","generateFeedbackId","userAgent","navigator","processFeedback","resetFeedbackForm","localKey","updateFeedbackAnalytics","stored","getFeedbackAnalytics","categories","totalRating","lastFeedback","setupFeatureTracking","trackSessionStart","trackSessionEnd","trackableButtons","buttonId","button","trackFeatureUsage","sectionName","feature","featureCount","lastFeatureUsed","lastActivity","storeUsage","sessionStartTime","totalSessionTime","eventData","getSessionId","getStoredEvents","splice","lastFeedbackRequest","daysSinceLastRequest","getTime","showFeedbackPrompt","laterReminder","totalTimeSpent","getMostUsedFeature","categoryBreakdown","totalEvents","recentEvents","eventTypes","getEventTypeBreakdown","generateInsights","width","innerWidth","features","selectedIndex","feedbackCSS","head","PerformanceManager","loadTimes","renderTimes","memoryUsage","userInteractions","observers","Map","isMonitoring","optimizationEnabled","thresholds","loadTime","renderTime","memoryLimit","fpsTarget","interactionDelay","setupPerformanceObservers","setupMemoryMonitoring","setupUserInteractionTracking","setupErrorTracking","optimizeInitialLoad","observer","PerformanceObserver","list","getEntries","processPerformanceEntry","observe","entryTypes","IntersectionObserver","isIntersecting","optimizeElementVisibility","rootMargin","setupLazyLoading","MutationObserver","mutations","optimizeDOMChanges","childList","subtree","attributes","attributeFilter","entryType","handleNavigationTiming","handleResourceTiming","handleUserTiming","handlePaintTiming","timing","loadEventEnd","navigationStart","domContentLoaded","domContentLoadedEventEnd","firstPaint","networkTime","responseEnd","requestStart","reportPerformanceIssue","updatePerformanceDashboard","suggestResourceOptimization","optimizeChartLoading","setInterval","used","usedJSHeapSize","total","totalJSHeapSize","limit","jsHeapSizeLimit","handleMemoryPressure","shift","interactionEvents","eventType","delay","tagName","reportInteractionDelay","passive","line","lineno","column","colno","stack","deferNonCriticalScripts","preloadCriticalResources","optimizeImages","setupServiceWorker","scripts","script","src","defer","criticalResources","resource","rel","as","card","element","initializeCalculatorFeatures","loadAdvancedFeatures","calculator","loadAnalyticsFeatures","loadLiveMonitorFeatures","loadIntelligenceFeatures","then","initializeCharts","hasStyleChanges","hasContentChanges","mutation","attributeName","batchStyleUpdates","optimizeContentUpdates","styleUpdateScheduled","applyStyleOptimizations","gc","showMemoryWarning","issue","issues","currentTime","lastHour","recentLoadTimes","m","recentMemory","recentInteractions","recentErrors","calculateAverage","averageRenderTime","slowestLoad","calculatePercentile","averageUsage","slowInteractions","totalErrors","errorTypes","categorizeErrors","generateRecommendations","avgLoadTime","suggestion","currentMemory","images","img","hasAttribute","loading","serviceWorker","registration","catch","array","property","acc","percentile","sorted","oneHourAgo","defaults","animation","perfIndicator","readyState","root"],"version":3,"file":"ProgramDesignWorkspace.99e626fb.js.map"}