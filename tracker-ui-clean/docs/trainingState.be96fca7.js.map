{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,C,E,C,E,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,G,C,C,E,C,O,C,C,E,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,O,C,K,E,E,S,C,K,E,E,S,C,K,E,E,C,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,A,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,E,ACGC,EAAA,kD,iB,C,EAED,OAAM,EACJ,aAAc,CACZ,GAAI,EAAc,QAAQ,CACxB,OAAO,EAAc,QAAQ,AAI/B,CAAA,IAAI,CAAC,eAAe,CAAG,CACrB,MAAS,CAAE,GAAI,EAAG,IAAK,EAAG,IAAK,GAAI,IAAK,EAAG,EAC3C,KAAQ,CAAE,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,EAC3C,MAAS,CAAE,GAAI,EAAG,IAAK,GAAI,IAAK,GAAI,IAAK,EAAG,EAC5C,WAAc,CAAE,GAAI,EAAG,IAAK,EAAG,IAAK,GAAI,IAAK,EAAG,EAChD,UAAa,CAAE,GAAI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","sources":["<anon>","js/core/trainingState.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\r\n// [ module function, map of requires ]\r\n//\r\n// map of requires is short require name -> numeric require\r\n//\r\n// anything defined in a previous bundle is accessed via the\r\n// orig method which is the require for previous bundles\r\n\r\n(function (\r\n  modules,\r\n  entry,\r\n  mainEntry,\r\n  parcelRequireName,\r\n  externals,\r\n  distDir,\r\n  publicUrl,\r\n  devServer\r\n) {\r\n  /* eslint-disable no-undef */\r\n  var globalObject =\r\n    typeof globalThis !== 'undefined'\r\n      ? globalThis\r\n      : typeof self !== 'undefined'\r\n      ? self\r\n      : typeof window !== 'undefined'\r\n      ? window\r\n      : typeof global !== 'undefined'\r\n      ? global\r\n      : {};\r\n  /* eslint-enable no-undef */\r\n\r\n  // Save the require from previous bundle to this closure if any\r\n  var previousRequire =\r\n    typeof globalObject[parcelRequireName] === 'function' &&\r\n    globalObject[parcelRequireName];\r\n\r\n  var importMap = previousRequire.i || {};\r\n  var cache = previousRequire.cache || {};\r\n  // Do not use `require` to prevent Webpack from trying to bundle this call\r\n  var nodeRequire =\r\n    typeof module !== 'undefined' &&\r\n    typeof module.require === 'function' &&\r\n    module.require.bind(module);\r\n\r\n  function newRequire(name, jumped) {\r\n    if (!cache[name]) {\r\n      if (!modules[name]) {\r\n        if (externals[name]) {\r\n          return externals[name];\r\n        }\r\n        // if we cannot find the module within our internal map or\r\n        // cache jump to the current global require ie. the last bundle\r\n        // that was added to the page.\r\n        var currentRequire =\r\n          typeof globalObject[parcelRequireName] === 'function' &&\r\n          globalObject[parcelRequireName];\r\n        if (!jumped && currentRequire) {\r\n          return currentRequire(name, true);\r\n        }\r\n\r\n        // If there are other bundles on this page the require from the\r\n        // previous one is saved to 'previousRequire'. Repeat this as\r\n        // many times as there are bundles until the module is found or\r\n        // we exhaust the require chain.\r\n        if (previousRequire) {\r\n          return previousRequire(name, true);\r\n        }\r\n\r\n        // Try the node require function if it exists.\r\n        if (nodeRequire && typeof name === 'string') {\r\n          return nodeRequire(name);\r\n        }\r\n\r\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\r\n        err.code = 'MODULE_NOT_FOUND';\r\n        throw err;\r\n      }\r\n\r\n      localRequire.resolve = resolve;\r\n      localRequire.cache = {};\r\n\r\n      var module = (cache[name] = new newRequire.Module(name));\r\n\r\n      modules[name][0].call(\r\n        module.exports,\r\n        localRequire,\r\n        module,\r\n        module.exports,\r\n        globalObject\r\n      );\r\n    }\r\n\r\n    return cache[name].exports;\r\n\r\n    function localRequire(x) {\r\n      var res = localRequire.resolve(x);\r\n      return res === false ? {} : newRequire(res);\r\n    }\r\n\r\n    function resolve(x) {\r\n      var id = modules[name][1][x];\r\n      return id != null ? id : x;\r\n    }\r\n  }\r\n\r\n  function Module(moduleName) {\r\n    this.id = moduleName;\r\n    this.bundle = newRequire;\r\n    this.require = nodeRequire;\r\n    this.exports = {};\r\n  }\r\n\r\n  newRequire.isParcelRequire = true;\r\n  newRequire.Module = Module;\r\n  newRequire.modules = modules;\r\n  newRequire.cache = cache;\r\n  newRequire.parent = previousRequire;\r\n  newRequire.distDir = distDir;\r\n  newRequire.publicUrl = publicUrl;\r\n  newRequire.devServer = devServer;\r\n  newRequire.i = importMap;\r\n  newRequire.register = function (id, exports) {\r\n    modules[id] = [\r\n      function (require, module) {\r\n        module.exports = exports;\r\n      },\r\n      {},\r\n    ];\r\n  };\r\n\r\n  // Only insert newRequire.load when it is actually used.\r\n  // The code in this file is linted against ES5, so dynamic import is not allowed.\r\n  // INSERT_LOAD_HERE\r\n\r\n  Object.defineProperty(newRequire, 'root', {\r\n    get: function () {\r\n      return globalObject[parcelRequireName];\r\n    },\r\n  });\r\n\r\n  globalObject[parcelRequireName] = newRequire;\r\n\r\n  for (var i = 0; i < entry.length; i++) {\r\n    newRequire(entry[i]);\r\n  }\r\n\r\n  if (mainEntry) {\r\n    // Expose entry point to Node, AMD or browser globals\r\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\r\n    var mainExports = newRequire(mainEntry);\r\n\r\n    // CommonJS\r\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\r\n      module.exports = mainExports;\r\n\r\n      // RequireJS\r\n    } else if (typeof define === 'function' && define.amd) {\r\n      define(function () {\r\n        return mainExports;\r\n      });\r\n    }\r\n  }\r\n})({\"e7afj\":[function(require,module,exports,__globalThis) {\n/**\r\n * TrainingState Singleton - Renaissance Periodization Implementation\r\n * Manages all training state including volume landmarks, meso progression, and deload logic\r\n */ var parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nparcelHelpers.defineInteropFlag(exports);\nclass TrainingState {\n    constructor(){\n        if (TrainingState.instance) return TrainingState.instance;\n        // Core RP Volume Landmarks (defaults from RP literature)\n        this.volumeLandmarks = {\n            'Chest': {\n                MV: 4,\n                MEV: 8,\n                MAV: 16,\n                MRV: 22\n            },\n            'Back': {\n                MV: 6,\n                MEV: 10,\n                MAV: 20,\n                MRV: 25\n            },\n            'Quads': {\n                MV: 6,\n                MEV: 10,\n                MAV: 20,\n                MRV: 25\n            },\n            'Hamstrings': {\n                MV: 4,\n                MEV: 6,\n                MAV: 16,\n                MRV: 20\n            },\n            'Shoulders': {\n                MV: 4,\n                MEV: 8,\n                MAV: 16,\n                MRV: 20\n            },\n            'Biceps': {\n                MV: 4,\n                MEV: 6,\n                MAV: 14,\n                MRV: 20\n            },\n            'Triceps': {\n                MV: 4,\n                MEV: 6,\n                MAV: 14,\n                MRV: 18\n            },\n            'Calves': {\n                MV: 6,\n                MEV: 8,\n                MAV: 16,\n                MRV: 22\n            },\n            'Abs': {\n                MV: 0,\n                MEV: 6,\n                MAV: 16,\n                MRV: 25\n            },\n            'Forearms': {\n                MV: 2,\n                MEV: 4,\n                MAV: 10,\n                MRV: 16\n            },\n            'Neck': {\n                MV: 0,\n                MEV: 2,\n                MAV: 8,\n                MRV: 12\n            },\n            'Traps': {\n                MV: 2,\n                MEV: 4,\n                MAV: 12,\n                MRV: 16\n            }\n        };\n        // Training progression state\n        this.weekNo = 1;\n        this.mesoLen = 4;\n        this.blockNo = 1;\n        this.deloadPhase = false;\n        this.resensitizationPhase = false;\n        // Current week data\n        this.currentWeekSets = {};\n        this.lastWeekSets = {};\n        // Baseline strength tracking for fatigue detection\n        this.baselineStrength = {};\n        // Initialize current week sets at MEV and baseline strength\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n            this.lastWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n            this.baselineStrength[muscle] = 100; // Default baseline load (kg)\n        });\n        // Performance tracking for deload detection\n        this.consecutiveMRVWeeks = 0;\n        this.recoverySessionsThisWeek = 0;\n        this.totalMusclesNeedingRecovery = 0;\n        TrainingState.instance = this;\n        this.loadState();\n    }\n    // Calculate target RIR based on meso progression\n    getTargetRIR() {\n        const startRIR = 3.0;\n        const endRIR = 0.5;\n        const progressionRate = (startRIR - endRIR) / (this.mesoLen - 1);\n        const targetRIR = startRIR - progressionRate * (this.weekNo - 1);\n        return Math.max(endRIR, Math.min(startRIR, targetRIR));\n    }\n    // Get volume status for a muscle\n    getVolumeStatus(muscle, sets = null) {\n        const currentSets = sets !== null ? sets : this.currentWeekSets[muscle];\n        const landmarks = this.volumeLandmarks[muscle];\n        if (currentSets < landmarks.MV) return 'under-minimum';\n        if (currentSets < landmarks.MEV) return 'maintenance';\n        if (currentSets < landmarks.MAV) return 'optimal';\n        if (currentSets < landmarks.MRV) return 'high';\n        return 'maximum';\n    }\n    // Get volume zone color for charting\n    getVolumeColor(muscle, sets = null) {\n        const status = this.getVolumeStatus(muscle, sets);\n        const colors = {\n            'under-minimum': '#ff4444',\n            'maintenance': '#ffaa00',\n            'optimal': '#44ff44',\n            'high': '#ffff44',\n            'maximum': '#ff4444' // Red\n        };\n        return colors[status];\n    }\n    // Update weekly sets for a muscle\n    updateWeeklySets(muscle, sets) {\n        this.currentWeekSets[muscle] = Math.max(0, sets);\n        this.saveState();\n    }\n    // Add sets to a muscle\n    addSets(muscle, additionalSets) {\n        this.currentWeekSets[muscle] += additionalSets;\n        this.currentWeekSets[muscle] = Math.max(0, this.currentWeekSets[muscle]);\n        this.saveState();\n    }\n    // Check if deload is needed\n    shouldDeload() {\n        // Check 1: Consecutive weeks at MRV\n        if (this.consecutiveMRVWeeks >= 2) return true;\n        // Check 2: Most muscles need recovery\n        const totalMuscles = Object.keys(this.volumeLandmarks).length;\n        if (this.totalMusclesNeedingRecovery >= Math.ceil(totalMuscles / 2)) return true;\n        // Check 3: Enhanced fatigue detection - if ≥1 major muscle hit MRV via fatigue this week\n        const majorMuscles = [\n            'Chest',\n            'Back',\n            'Quads',\n            'Shoulders'\n        ];\n        const fatigueBasedMRV = majorMuscles.some((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV && this.totalMusclesNeedingRecovery > 0);\n        if (fatigueBasedMRV) return true;\n        // Check 4: End of meso\n        if (this.weekNo >= this.mesoLen) return true;\n        return false;\n    }\n    // Check if resensitization is needed (every 3-6 mesos)\n    shouldResensitize() {\n        return this.blockNo % 4 === 0; // Every 4 blocks (adjustable)\n    }\n    // Start deload phase\n    startDeload() {\n        this.deloadPhase = true;\n        // Reduce all sets to 50% of MEV\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            const deloadSets = Math.round(this.volumeLandmarks[muscle].MEV * 0.5);\n            this.currentWeekSets[muscle] = deloadSets;\n        });\n        this.saveState();\n    }\n    // Start resensitization phase\n    startResensitization() {\n        this.resensitizationPhase = true;\n        // Set all muscles to MV\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MV;\n        });\n        this.saveState();\n    }\n    // Progress to next week\n    nextWeek() {\n        // Store last week's data\n        this.lastWeekSets = {\n            ...this.currentWeekSets\n        };\n        // Check for MRV breach\n        const mrvBreaches = Object.keys(this.volumeLandmarks).filter((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV);\n        if (mrvBreaches.length > 0) this.consecutiveMRVWeeks++;\n        else this.consecutiveMRVWeeks = 0;\n        // Progress week\n        this.weekNo++;\n        // Check for meso completion\n        if (this.weekNo > this.mesoLen) {\n            this.weekNo = 1;\n            this.blockNo++;\n            this.consecutiveMRVWeeks = 0;\n        }\n        // Reset weekly counters\n        this.recoverySessionsThisWeek = 0;\n        this.totalMusclesNeedingRecovery = 0;\n        this.saveState();\n    }\n    // Reset week (for testing/corrections)\n    resetWeek() {\n        Object.keys(this.volumeLandmarks).forEach((muscle)=>{\n            this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n        });\n        this.saveState();\n    }\n    // Auto-progression methods\n    // Mark muscle as hitting MRV for deload tracking\n    hitMRV(muscle) {\n        this.totalMusclesNeedingRecovery++;\n        // Check if this muscle has been at MRV for consecutive weeks\n        const atMRV = this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV;\n        if (atMRV) this.consecutiveMRVWeeks++;\n        this.saveState();\n    }\n    // Get current weekly sets for a muscle\n    getWeeklySets(muscle) {\n        return this.currentWeekSets[muscle] || this.volumeLandmarks[muscle].MEV;\n    }\n    // Initialize muscle at MEV (for new week or reset)\n    initializeMuscleAtMEV(muscle) {\n        this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\n        this.saveState();\n    }\n    // Check if most muscles are at MRV (deload trigger)\n    mostMusclesAtMRV() {\n        const muscles = Object.keys(this.volumeLandmarks);\n        const mrvCount = muscles.filter((muscle)=>this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV).length;\n        return mrvCount >= Math.ceil(muscles.length * 0.5);\n    }\n    // Set baseline strength for a muscle (typically week 1 top set)\n    setBaselineStrength(muscle, load) {\n        this.baselineStrength[muscle] = load;\n        this.saveState();\n    }\n    // Check for rep strength drop (fatigue indicator)\n    repStrengthDrop(muscle, lastLoad) {\n        const baseline = this.baselineStrength[muscle];\n        if (!baseline || !lastLoad) return false;\n        // Consider significant drop if last load < 97% of baseline\n        const strengthDropThreshold = 0.97;\n        return lastLoad < baseline * strengthDropThreshold;\n    }\n    // Update volume landmarks for a muscle\n    updateVolumeLandmarks(muscle, landmarks) {\n        this.volumeLandmarks[muscle] = {\n            ...this.volumeLandmarks[muscle],\n            ...landmarks\n        };\n        this.saveState();\n    }\n    // Calculate recovery volume\n    getRecoveryVolume(muscle, hasIllness = false) {\n        const landmarks = this.volumeLandmarks[muscle];\n        const midpoint = Math.round((landmarks.MEV + landmarks.MRV) / 2);\n        const adjustment = hasIllness ? 2 : 1;\n        const recoveryVolume = midpoint - adjustment;\n        return Math.max(recoveryVolume, Math.ceil(landmarks.MEV * 0.5));\n    }\n    // Save state to localStorage\n    saveState() {\n        const state = {\n            volumeLandmarks: this.volumeLandmarks,\n            weekNo: this.weekNo,\n            mesoLen: this.mesoLen,\n            blockNo: this.blockNo,\n            deloadPhase: this.deloadPhase,\n            resensitizationPhase: this.resensitizationPhase,\n            currentWeekSets: this.currentWeekSets,\n            lastWeekSets: this.lastWeekSets,\n            consecutiveMRVWeeks: this.consecutiveMRVWeeks,\n            recoverySessionsThisWeek: this.recoverySessionsThisWeek,\n            totalMusclesNeedingRecovery: this.totalMusclesNeedingRecovery\n        };\n        localStorage.setItem('rp-training-state', JSON.stringify(state));\n    }\n    // Load state from localStorage\n    loadState() {\n        const saved = localStorage.getItem('rp-training-state');\n        if (saved) try {\n            const state = JSON.parse(saved);\n            Object.assign(this, state);\n        } catch (e) {\n            console.warn('Failed to load training state, using defaults');\n        }\n    }\n    // Migrate legacy localStorage data\n    migrateLegacyData() {\n        const muscles = Object.keys(this.volumeLandmarks);\n        let hasLegacyData = false;\n        muscles.forEach((muscle)=>{\n            // Check for old format keys\n            const oldKey = `week-1-${muscle}`;\n            const oldValue = localStorage.getItem(oldKey);\n            if (oldValue) {\n                this.currentWeekSets[muscle] = parseInt(oldValue, 10);\n                localStorage.removeItem(oldKey);\n                hasLegacyData = true;\n            }\n            // Migrate MEV/MRV settings\n            const mevKey = `${muscle}-MEV`;\n            const mrvKey = `${muscle}-MRV`;\n            const mevValue = localStorage.getItem(mevKey);\n            const mrvValue = localStorage.getItem(mrvKey);\n            if (mevValue || mrvValue) {\n                this.volumeLandmarks[muscle] = {\n                    ...this.volumeLandmarks[muscle],\n                    MEV: mevValue ? parseInt(mevValue, 10) : this.volumeLandmarks[muscle].MEV,\n                    MRV: mrvValue ? parseInt(mrvValue, 10) : this.volumeLandmarks[muscle].MRV\n                };\n                if (mevValue) localStorage.removeItem(mevKey);\n                if (mrvValue) localStorage.removeItem(mrvKey);\n                hasLegacyData = true;\n            }\n        });\n        if (hasLegacyData) {\n            this.saveState();\n            console.log('Legacy data migrated to new RP training state');\n        }\n    }\n    // Get current state summary\n    getStateSummary() {\n        return {\n            week: this.weekNo,\n            meso: this.mesoLen,\n            block: this.blockNo,\n            targetRIR: this.getTargetRIR(),\n            deloadRecommended: this.shouldDeload(),\n            resensitizationRecommended: this.shouldResensitize(),\n            currentPhase: this.deloadPhase ? 'deload' : this.resensitizationPhase ? 'resensitization' : 'accumulation'\n        };\n    }\n}\n// Export singleton instance\nconst trainingState = new TrainingState();\nexports.default = trainingState;\n// Also make available globally for legacy compatibility\nif (typeof window !== 'undefined') window.trainingState = trainingState;\n\n},{\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"k3151\":[function(require,module,exports,__globalThis) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, '__esModule', {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === 'default' || key === '__esModule' || Object.prototype.hasOwnProperty.call(dest, key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"e7afj\"], \"e7afj\", \"parcelRequire66c8\", {})\n\n//# sourceMappingURL=trainingState.be96fca7.js.map\n","/**\r\n * TrainingState Singleton - Renaissance Periodization Implementation\r\n * Manages all training state including volume landmarks, meso progression, and deload logic\r\n */\r\n\r\nclass TrainingState {\r\n  constructor() {\r\n    if (TrainingState.instance) {\r\n      return TrainingState.instance;\r\n    }\r\n\r\n    // Core RP Volume Landmarks (defaults from RP literature)\r\n    this.volumeLandmarks = {\r\n      'Chest': { MV: 4, MEV: 8, MAV: 16, MRV: 22 },\r\n      'Back': { MV: 6, MEV: 10, MAV: 20, MRV: 25 },\r\n      'Quads': { MV: 6, MEV: 10, MAV: 20, MRV: 25 },\r\n      'Hamstrings': { MV: 4, MEV: 6, MAV: 16, MRV: 20 },\r\n      'Shoulders': { MV: 4, MEV: 8, MAV: 16, MRV: 20 },\r\n      'Biceps': { MV: 4, MEV: 6, MAV: 14, MRV: 20 },\r\n      'Triceps': { MV: 4, MEV: 6, MAV: 14, MRV: 18 },\r\n      'Calves': { MV: 6, MEV: 8, MAV: 16, MRV: 22 },\r\n      'Abs': { MV: 0, MEV: 6, MAV: 16, MRV: 25 },\r\n      'Forearms': { MV: 2, MEV: 4, MAV: 10, MRV: 16 },\r\n      'Neck': { MV: 0, MEV: 2, MAV: 8, MRV: 12 },\r\n      'Traps': { MV: 2, MEV: 4, MAV: 12, MRV: 16 }\r\n    };\r\n\r\n    // Training progression state\r\n    this.weekNo = 1;\r\n    this.mesoLen = 4;\r\n    this.blockNo = 1;\r\n    this.deloadPhase = false;\r\n    this.resensitizationPhase = false;\r\n\r\n    // Current week data\r\n    this.currentWeekSets = {};\r\n    this.lastWeekSets = {};\r\n    \r\n    // Baseline strength tracking for fatigue detection\r\n    this.baselineStrength = {};\r\n    \r\n    // Initialize current week sets at MEV and baseline strength\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n      this.lastWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n      this.baselineStrength[muscle] = 100; // Default baseline load (kg)\r\n    });\r\n\r\n    // Performance tracking for deload detection\r\n    this.consecutiveMRVWeeks = 0;\r\n    this.recoverySessionsThisWeek = 0;\r\n    this.totalMusclesNeedingRecovery = 0;\r\n\r\n    TrainingState.instance = this;\r\n    this.loadState();\r\n  }\r\n  // Calculate target RIR based on meso progression\r\n  getTargetRIR() {\r\n    const startRIR = 3.0;\r\n    const endRIR = 0.5;\r\n    const progressionRate = (startRIR - endRIR) / (this.mesoLen - 1);\r\n    const targetRIR = startRIR - (progressionRate * (this.weekNo - 1));\r\n    return Math.max(endRIR, Math.min(startRIR, targetRIR));\r\n  }\r\n\r\n  // Get volume status for a muscle\r\n  getVolumeStatus(muscle, sets = null) {\r\n    const currentSets = sets !== null ? sets : this.currentWeekSets[muscle];\r\n    const landmarks = this.volumeLandmarks[muscle];\r\n    \r\n    if (currentSets < landmarks.MV) return 'under-minimum';\r\n    if (currentSets < landmarks.MEV) return 'maintenance';\r\n    if (currentSets < landmarks.MAV) return 'optimal';\r\n    if (currentSets < landmarks.MRV) return 'high';\r\n    return 'maximum';\r\n  }\r\n\r\n  // Get volume zone color for charting\r\n  getVolumeColor(muscle, sets = null) {\r\n    const status = this.getVolumeStatus(muscle, sets);\r\n    const colors = {\r\n      'under-minimum': '#ff4444',  // Red\r\n      'maintenance': '#ffaa00',    // Orange\r\n      'optimal': '#44ff44',        // Green\r\n      'high': '#ffff44',           // Yellow\r\n      'maximum': '#ff4444'         // Red\r\n    };\r\n    return colors[status];\r\n  }\r\n\r\n  // Update weekly sets for a muscle\r\n  updateWeeklySets(muscle, sets) {\r\n    this.currentWeekSets[muscle] = Math.max(0, sets);\r\n    this.saveState();\r\n  }\r\n\r\n  // Add sets to a muscle\r\n  addSets(muscle, additionalSets) {\r\n    this.currentWeekSets[muscle] += additionalSets;\r\n    this.currentWeekSets[muscle] = Math.max(0, this.currentWeekSets[muscle]);\r\n    this.saveState();\r\n  }\r\n  // Check if deload is needed\r\n  shouldDeload() {\r\n    // Check 1: Consecutive weeks at MRV\r\n    if (this.consecutiveMRVWeeks >= 2) return true;\r\n    \r\n    // Check 2: Most muscles need recovery\r\n    const totalMuscles = Object.keys(this.volumeLandmarks).length;\r\n    if (this.totalMusclesNeedingRecovery >= Math.ceil(totalMuscles / 2)) return true;\r\n    \r\n    // Check 3: Enhanced fatigue detection - if ≥1 major muscle hit MRV via fatigue this week\r\n    const majorMuscles = ['Chest', 'Back', 'Quads', 'Shoulders'];\r\n    const fatigueBasedMRV = majorMuscles.some(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV && \r\n      this.totalMusclesNeedingRecovery > 0\r\n    );\r\n    if (fatigueBasedMRV) return true;\r\n    \r\n    // Check 4: End of meso\r\n    if (this.weekNo >= this.mesoLen) return true;\r\n    \r\n    return false;\r\n  }\r\n\r\n  // Check if resensitization is needed (every 3-6 mesos)\r\n  shouldResensitize() {\r\n    return this.blockNo % 4 === 0; // Every 4 blocks (adjustable)\r\n  }\r\n\r\n  // Start deload phase\r\n  startDeload() {\r\n    this.deloadPhase = true;\r\n    // Reduce all sets to 50% of MEV\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      const deloadSets = Math.round(this.volumeLandmarks[muscle].MEV * 0.5);\r\n      this.currentWeekSets[muscle] = deloadSets;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Start resensitization phase\r\n  startResensitization() {\r\n    this.resensitizationPhase = true;\r\n    // Set all muscles to MV\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MV;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Progress to next week\r\n  nextWeek() {\r\n    // Store last week's data\r\n    this.lastWeekSets = { ...this.currentWeekSets };\r\n    \r\n    // Check for MRV breach\r\n    const mrvBreaches = Object.keys(this.volumeLandmarks).filter(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV\r\n    );\r\n    \r\n    if (mrvBreaches.length > 0) {\r\n      this.consecutiveMRVWeeks++;\r\n    } else {\r\n      this.consecutiveMRVWeeks = 0;\r\n    }\r\n\r\n    // Progress week\r\n    this.weekNo++;\r\n    \r\n    // Check for meso completion\r\n    if (this.weekNo > this.mesoLen) {\r\n      this.weekNo = 1;\r\n      this.blockNo++;\r\n      this.consecutiveMRVWeeks = 0;\r\n    }\r\n\r\n    // Reset weekly counters\r\n    this.recoverySessionsThisWeek = 0;\r\n    this.totalMusclesNeedingRecovery = 0;\r\n\r\n    this.saveState();\r\n  }\r\n\r\n  // Reset week (for testing/corrections)\r\n  resetWeek() {\r\n    Object.keys(this.volumeLandmarks).forEach(muscle => {\r\n      this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n    });\r\n    this.saveState();\r\n  }\r\n\r\n  // Auto-progression methods\r\n  \r\n  // Mark muscle as hitting MRV for deload tracking\r\n  hitMRV(muscle) {\r\n    this.totalMusclesNeedingRecovery++;\r\n    // Check if this muscle has been at MRV for consecutive weeks\r\n    const atMRV = this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV;\r\n    if (atMRV) {\r\n      this.consecutiveMRVWeeks++;\r\n    }\r\n    this.saveState();\r\n  }\r\n\r\n  // Get current weekly sets for a muscle\r\n  getWeeklySets(muscle) {\r\n    return this.currentWeekSets[muscle] || this.volumeLandmarks[muscle].MEV;\r\n  }\r\n\r\n  // Initialize muscle at MEV (for new week or reset)\r\n  initializeMuscleAtMEV(muscle) {\r\n    this.currentWeekSets[muscle] = this.volumeLandmarks[muscle].MEV;\r\n    this.saveState();\r\n  }\r\n\r\n  // Check if most muscles are at MRV (deload trigger)\r\n  mostMusclesAtMRV() {\r\n    const muscles = Object.keys(this.volumeLandmarks);\r\n    const mrvCount = muscles.filter(muscle => \r\n      this.currentWeekSets[muscle] >= this.volumeLandmarks[muscle].MRV\r\n    ).length;\r\n    return mrvCount >= Math.ceil(muscles.length * 0.5);\r\n  }\r\n\r\n  // Set baseline strength for a muscle (typically week 1 top set)\r\n  setBaselineStrength(muscle, load) {\r\n    this.baselineStrength[muscle] = load;\r\n    this.saveState();\r\n  }\r\n\r\n  // Check for rep strength drop (fatigue indicator)\r\n  repStrengthDrop(muscle, lastLoad) {\r\n    const baseline = this.baselineStrength[muscle];\r\n    if (!baseline || !lastLoad) return false;\r\n    \r\n    // Consider significant drop if last load < 97% of baseline\r\n    const strengthDropThreshold = 0.97;\r\n    return lastLoad < (baseline * strengthDropThreshold);\r\n  }\r\n\r\n  // Update volume landmarks for a muscle\r\n  updateVolumeLandmarks(muscle, landmarks) {\r\n    this.volumeLandmarks[muscle] = { ...this.volumeLandmarks[muscle], ...landmarks };\r\n    this.saveState();\r\n  }\r\n\r\n  // Calculate recovery volume\r\n  getRecoveryVolume(muscle, hasIllness = false) {\r\n    const landmarks = this.volumeLandmarks[muscle];\r\n    const midpoint = Math.round((landmarks.MEV + landmarks.MRV) / 2);\r\n    const adjustment = hasIllness ? 2 : 1;\r\n    const recoveryVolume = midpoint - adjustment;\r\n    return Math.max(recoveryVolume, Math.ceil(landmarks.MEV * 0.5));\r\n  }\r\n\r\n  // Save state to localStorage\r\n  saveState() {\r\n    const state = {\r\n      volumeLandmarks: this.volumeLandmarks,\r\n      weekNo: this.weekNo,\r\n      mesoLen: this.mesoLen,\r\n      blockNo: this.blockNo,\r\n      deloadPhase: this.deloadPhase,\r\n      resensitizationPhase: this.resensitizationPhase,\r\n      currentWeekSets: this.currentWeekSets,\r\n      lastWeekSets: this.lastWeekSets,\r\n      consecutiveMRVWeeks: this.consecutiveMRVWeeks,\r\n      recoverySessionsThisWeek: this.recoverySessionsThisWeek,\r\n      totalMusclesNeedingRecovery: this.totalMusclesNeedingRecovery\r\n    };\r\n    \r\n    localStorage.setItem('rp-training-state', JSON.stringify(state));\r\n  }\r\n\r\n  // Load state from localStorage\r\n  loadState() {\r\n    const saved = localStorage.getItem('rp-training-state');\r\n    if (saved) {\r\n      try {\r\n        const state = JSON.parse(saved);\r\n        Object.assign(this, state);\r\n      } catch (e) {\r\n        console.warn('Failed to load training state, using defaults');\r\n      }\r\n    }\r\n  }\r\n\r\n  // Migrate legacy localStorage data\r\n  migrateLegacyData() {\r\n    const muscles = Object.keys(this.volumeLandmarks);\r\n    let hasLegacyData = false;\r\n\r\n    muscles.forEach(muscle => {\r\n      // Check for old format keys\r\n      const oldKey = `week-1-${muscle}`;\r\n      const oldValue = localStorage.getItem(oldKey);\r\n      \r\n      if (oldValue) {\r\n        this.currentWeekSets[muscle] = parseInt(oldValue, 10);\r\n        localStorage.removeItem(oldKey);\r\n        hasLegacyData = true;\r\n      }\r\n\r\n      // Migrate MEV/MRV settings\r\n      const mevKey = `${muscle}-MEV`;\r\n      const mrvKey = `${muscle}-MRV`;\r\n      const mevValue = localStorage.getItem(mevKey);\r\n      const mrvValue = localStorage.getItem(mrvKey);\r\n\r\n      if (mevValue || mrvValue) {\r\n        this.volumeLandmarks[muscle] = {\r\n          ...this.volumeLandmarks[muscle],\r\n          MEV: mevValue ? parseInt(mevValue, 10) : this.volumeLandmarks[muscle].MEV,\r\n          MRV: mrvValue ? parseInt(mrvValue, 10) : this.volumeLandmarks[muscle].MRV\r\n        };\r\n        if (mevValue) localStorage.removeItem(mevKey);\r\n        if (mrvValue) localStorage.removeItem(mrvKey);\r\n        hasLegacyData = true;\r\n      }\r\n    });\r\n\r\n    if (hasLegacyData) {\r\n      this.saveState();\r\n      console.log('Legacy data migrated to new RP training state');\r\n    }\r\n  }\r\n\r\n  // Get current state summary\r\n  getStateSummary() {\r\n    return {\r\n      week: this.weekNo,\r\n      meso: this.mesoLen,\r\n      block: this.blockNo,\r\n      targetRIR: this.getTargetRIR(),\r\n      deloadRecommended: this.shouldDeload(),\r\n      resensitizationRecommended: this.shouldResensitize(),\r\n      currentPhase: this.deloadPhase ? 'deload' : \r\n                   this.resensitizationPhase ? 'resensitization' : 'accumulation'\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst trainingState = new TrainingState();\r\nexport default trainingState;\r\n\r\n// Also make available globally for legacy compatibility\r\nif (typeof window !== 'undefined') {\r\n  window.trainingState = trainingState;\r\n}\r\n","exports.interopDefault = function (a) {\r\n  return a && a.__esModule ? a : {default: a};\r\n};\r\n\r\nexports.defineInteropFlag = function (a) {\r\n  Object.defineProperty(a, '__esModule', {value: true});\r\n};\r\n\r\nexports.exportAll = function (source, dest) {\r\n  Object.keys(source).forEach(function (key) {\r\n    if (\r\n      key === 'default' ||\r\n      key === '__esModule' ||\r\n      Object.prototype.hasOwnProperty.call(dest, key)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    Object.defineProperty(dest, key, {\r\n      enumerable: true,\r\n      get: function () {\r\n        return source[key];\r\n      },\r\n    });\r\n  });\r\n\r\n  return dest;\r\n};\r\n\r\nexports.export = function (dest, destName, get) {\r\n  Object.defineProperty(dest, destName, {\r\n    enumerable: true,\r\n    get: get,\r\n  });\r\n};\r\n"],"names":["modules","entry","mainEntry","parcelRequireName","externals","distDir","publicUrl","devServer","globalObject","globalThis","self","window","global","previousRequire","importMap","i","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","length","mainExports","define","amd","__globalThis","parcelHelpers","defineInteropFlag","TrainingState","instance","volumeLandmarks","MV","MEV","MAV","MRV","weekNo","mesoLen","blockNo","deloadPhase","resensitizationPhase","currentWeekSets","lastWeekSets","baselineStrength","keys","forEach","muscle","consecutiveMRVWeeks","recoverySessionsThisWeek","totalMusclesNeedingRecovery","loadState","getTargetRIR","Math","max","min","startRIR","progressionRate","getVolumeStatus","sets","currentSets","landmarks","getVolumeColor","colors","updateWeeklySets","saveState","addSets","additionalSets","shouldDeload","totalMuscles","ceil","majorMuscles","some","shouldResensitize","startDeload","deloadSets","round","startResensitization","nextWeek","mrvBreaches","filter","resetWeek","hitMRV","atMRV","getWeeklySets","initializeMuscleAtMEV","mostMusclesAtMRV","muscles","mrvCount","setBaselineStrength","load","repStrengthDrop","lastLoad","baseline","updateVolumeLandmarks","getRecoveryVolume","hasIllness","midpoint","state","localStorage","setItem","JSON","stringify","saved","getItem","parse","assign","e","console","warn","migrateLegacyData","hasLegacyData","oldKey","oldValue","parseInt","removeItem","mevKey","mrvKey","mevValue","mrvValue","log","getStateSummary","week","meso","block","targetRIR","deloadRecommended","resensitizationRecommended","currentPhase","trainingState","default","interopDefault","a","__esModule","value","exportAll","source","dest","key","prototype","hasOwnProperty","enumerable","export","destName"],"version":3,"file":"trainingState.be96fca7.js.map"}