{"version":3,"file":"pr-DK0kyKE6.js","sources":["../../src/lib/fiveThreeOne/history.js","../../src/lib/fiveThreeOne/pr.js"],"sourcesContent":["// src/lib/fiveThreeOne/history.js\r\nimport * as storage from '../storage.js';\r\n\r\nconst HIST_KEY = 'fiveThreeOne_history_v1';\r\n\r\nexport function getHistory() {\r\n    try { return storage.get(HIST_KEY) || []; } catch (e) { return []; }\r\n}\r\nexport function clearHistory() {\r\n    try { storage.remove(HIST_KEY); } catch (e) { /* ignore */ }\r\n}\r\nexport function addSession(entry) {\r\n    const list = getHistory();\r\n    list.push(entry);\r\n    try { storage.set(HIST_KEY, list); } catch (e) { /* ignore */ }\r\n    return list;\r\n}\r\n\r\nexport function estimate1RM(weight, reps) {\r\n    const w = Number(weight || 0);\r\n    const r = Number(reps || 0);\r\n    if (w <= 0 || r <= 0) return 0;\r\n    return +(w * r * 0.0333 + w).toFixed(1);\r\n}\r\n","// src/lib/fiveThreeOne/pr.js\r\nimport { getHistory } from './history';\r\nimport { e1RM as calcE1RM } from './math.js';\r\n\r\n// Normalize lift label for grouping\r\nexport function liftKey(s) {\r\n    return (s?.liftLabel || s?.lift || '').toString().trim() || 'Unknown';\r\n}\r\n\r\n// Find AMRAP (or best) set from a logged session\r\nexport function getAmrapFromSession(session) {\r\n    const sets = session?.mainSets || [];\r\n    if (!sets.length) return null;\r\n    // Prefer explicitly flagged amrap or last set\r\n    const withFlag = sets.find(s => s.amrap);\r\n    const candidate = withFlag || sets[sets.length - 1];\r\n    const reps = Number(candidate?.loggedReps ?? 0);\r\n    const weight = Number(candidate?.weight ?? 0);\r\n    if (!reps || !weight) return null;\r\n    const e1RM = +(calcE1RM(weight, reps)).toFixed(1);\r\n    return { weight, reps, e1RM };\r\n}\r\n\r\n// Best e1RM per lift across all sessions\r\nexport function getBestE1RMPerLift(history = getHistory()) {\r\n    const best = {};\r\n    for (const s of history) {\r\n        const k = liftKey(s);\r\n        const amrap = getAmrapFromSession(s);\r\n        const score = amrap?.e1RM ?? Number(s?.e1RM ?? 0);\r\n        if (!score) continue;\r\n        if (!best[k] || score > best[k].e1RM) {\r\n            best[k] = {\r\n                e1RM: score,\r\n                when: s.when,\r\n                day: s.day,\r\n                weight: amrap?.weight ?? null,\r\n                reps: amrap?.reps ?? null,\r\n            };\r\n        }\r\n    }\r\n    return best;\r\n}\r\n\r\n// Rep-records per lift, grouped by AMRAP weight -> best reps\r\nexport function getRepRecords(history = getHistory()) {\r\n    const byLift = {};\r\n    for (const s of history) {\r\n        const k = liftKey(s);\r\n        const amrap = getAmrapFromSession(s);\r\n        if (!amrap) continue;\r\n        const w = Math.round(amrap.weight); // round for stable keys\r\n        byLift[k] ||= {};\r\n        const prev = byLift[k][w];\r\n        if (!prev || amrap.reps > prev.reps) {\r\n            byLift[k][w] = { reps: amrap.reps, when: s.when, e1RM: amrap.e1RM };\r\n        }\r\n    }\r\n    return byLift;\r\n}\r\n\r\n// Determine if a session set a new e1RM PR for its lift\r\nexport function isE1RMPR(session, history = getHistory()) {\r\n    const k = liftKey(session);\r\n    const amrap = getAmrapFromSession(session);\r\n    const score = amrap?.e1RM ?? Number(session?.e1RM ?? 0);\r\n    if (!score) return false;\r\n    const best = getBestE1RMPerLift(history);\r\n    return !best[k] || score > best[k].e1RM;\r\n}\r\n"],"names":["HIST_KEY","getHistory","storage.get","clearHistory","storage.remove","addSession","entry","list","storage.set","estimate1RM","weight","reps","w","r","liftKey","s","getAmrapFromSession","session","sets","candidate","e1RM","calcE1RM","getBestE1RMPerLift","history","best","k","amrap","score","getRepRecords","byLift","prev"],"mappings":"qGAGA,MAAMA,EAAW,0BAEV,SAASC,GAAa,CACzB,GAAI,CAAE,OAAOC,EAAYF,CAAQ,GAAK,CAAA,CAAI,MAAY,CAAE,MAAO,CAAA,CAAI,CACvE,CACO,SAASG,GAAe,CAC3B,GAAI,CAAEC,EAAeJ,CAAQ,CAAG,MAAY,CAAe,CAC/D,CACO,SAASK,EAAWC,EAAO,CAC9B,MAAMC,EAAON,IACbM,EAAK,KAAKD,CAAK,EACf,GAAI,CAAEE,EAAYR,EAAUO,CAAI,CAAG,MAAY,CAAe,CAC9D,OAAOA,CACX,CAEO,SAASE,EAAYC,EAAQC,EAAM,CACtC,MAAMC,EAAI,OAAOF,GAAU,CAAC,EACtBG,EAAI,OAAOF,GAAQ,CAAC,EAC1B,OAAIC,GAAK,GAAKC,GAAK,EAAU,EACtB,EAAED,EAAIC,EAAI,MAASD,GAAG,QAAQ,CAAC,CAC1C,CClBO,SAASE,EAAQC,EAAG,CACvB,QAAQA,GAAA,YAAAA,EAAG,aAAaA,GAAA,YAAAA,EAAG,OAAQ,IAAI,SAAQ,EAAG,KAAI,GAAM,SAChE,CAGO,SAASC,EAAoBC,EAAS,CACzC,MAAMC,GAAOD,GAAA,YAAAA,EAAS,WAAY,GAClC,GAAI,CAACC,EAAK,OAAQ,OAAO,KAGzB,MAAMC,EADWD,EAAK,KAAKH,GAAKA,EAAE,KAAK,GACTG,EAAKA,EAAK,OAAS,CAAC,EAC5CP,EAAO,QAAOQ,GAAA,YAAAA,EAAW,aAAc,CAAC,EACxCT,EAAS,QAAOS,GAAA,YAAAA,EAAW,SAAU,CAAC,EAC5C,GAAI,CAACR,GAAQ,CAACD,EAAQ,OAAO,KAC7B,MAAMU,EAAO,CAAEC,EAASX,EAAQC,CAAI,EAAG,QAAQ,CAAC,EAChD,MAAO,CAAE,OAAAD,EAAQ,KAAAC,EAAI,KAAES,EAC3B,CAGO,SAASE,EAAmBC,EAAUtB,IAAc,CACvD,MAAMuB,EAAO,CAAA,EACb,UAAWT,KAAKQ,EAAS,CACrB,MAAME,EAAIX,EAAQC,CAAC,EACbW,EAAQV,EAAoBD,CAAC,EAC7BY,GAAQD,GAAA,YAAAA,EAAO,OAAQ,QAAOX,GAAA,YAAAA,EAAG,OAAQ,CAAC,EAC3CY,IACD,CAACH,EAAKC,CAAC,GAAKE,EAAQH,EAAKC,CAAC,EAAE,QAC5BD,EAAKC,CAAC,EAAI,CACN,KAAME,EACN,KAAMZ,EAAE,KACR,IAAKA,EAAE,IACP,QAAQW,GAAA,YAAAA,EAAO,SAAU,KACzB,MAAMA,GAAA,YAAAA,EAAO,OAAQ,IACrC,EAEI,CACA,OAAOF,CACX,CAGO,SAASI,EAAcL,EAAUtB,IAAc,CAClD,MAAM4B,EAAS,CAAA,EACf,UAAWd,KAAKQ,EAAS,CACrB,MAAME,EAAIX,EAAQC,CAAC,EACbW,EAAQV,EAAoBD,CAAC,EACnC,GAAI,CAACW,EAAO,SACZ,MAAMd,EAAI,KAAK,MAAMc,EAAM,MAAM,EACjCG,EAAAJ,KAAAI,EAAAJ,GAAc,IACd,MAAMK,EAAOD,EAAOJ,CAAC,EAAEb,CAAC,GACpB,CAACkB,GAAQJ,EAAM,KAAOI,EAAK,QAC3BD,EAAOJ,CAAC,EAAEb,CAAC,EAAI,CAAE,KAAMc,EAAM,KAAM,KAAMX,EAAE,KAAM,KAAMW,EAAM,IAAI,EAEzE,CACA,OAAOG,CACX"}