{"version":3,"file":"conditioningPlanner-Dt_WoorF.js","sources":["../../src/lib/fiveThreeOne/conditioningPlanner.js"],"sourcesContent":["// src/lib/fiveThreeOne/conditioningPlanner.js\r\nimport { CONDITIONING_PLACEMENT, DAYS, MODALITIES } from './conditioningLibrary.js';\r\n\r\n/**\r\n * scheduleFromState: try to read user lift days (Mon..Sun â†’ liftKey)\r\n * Expected format in state.schedule or state.week: \r\n *   { Mon:'press', Tue:'deadlift', Thu:'bench', Fri:'squat' } (examples)\r\n */\r\nexport function deriveLiftDayMap(state) {\r\n    // Try several likely shapes the app may hold\r\n    const sched = state?.schedule?.days || state?.week || {};\r\n    const map = {};\r\n\r\n    // Normalize keys to Mon..Sun if possible\r\n    if (Array.isArray(sched)) {\r\n        // Our app uses an array of days with .lift; assume Mon/Tue/Thu/Fri order when frequency 4\r\n        const defaultDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\r\n        let i = 0;\r\n        for (const d of sched) {\r\n            const dayName = defaultDays[i] || defaultDays[0];\r\n            if (d?.lift) map[dayName] = d.lift;\r\n            i++;\r\n        }\r\n    } else {\r\n        for (const k of Object.keys(sched || {})) {\r\n            const key = k.slice(0, 3).toLowerCase();\r\n            const day = DAYS.find(d => d.slice(0, 3).toLowerCase() === key);\r\n            if (day) map[day] = sched[k];\r\n        }\r\n    }\r\n\r\n    // Default to 4-day Press/DL/Bench/Squat (Mon/Tue/Thu/Fri)\r\n    if (Object.keys(map).length === 0) {\r\n        map.Mon = 'press';\r\n        map.Tue = 'deadlift';\r\n        map.Thu = 'bench';\r\n        map.Fri = 'squat';\r\n    }\r\n    return map;\r\n}\r\n\r\n/**\r\n * Build a conditioning plan for the week\r\n * @param {*} state full wizard state (needs schedule + template context)\r\n * @param {*} options conditioning options (frequency, placement, modalities)\r\n * @returns [{ day:'Tue', mode:'hiit'|'liss', modality:string, prescription:{}, notes:string }]\r\n */\r\nexport function buildConditioningPlan(state, options) {\r\n    const out = [];\r\n    const liftDays = deriveLiftDayMap(state);\r\n\r\n    const freq = Math.max(0, Number(options?.frequency ?? 2));\r\n    const hiitCount = Math.min(freq, Math.max(0, Number(options?.hiitPerWeek ?? freq)));\r\n    const lissCount = Math.max(0, Math.min(freq - hiitCount, Number(options?.lissPerWeek ?? (freq - hiitCount))));\r\n    const place = options?.placement || CONDITIONING_PLACEMENT.AFTER_LIFTS;\r\n\r\n    // helpers\r\n    const isLiftDay = d => !!liftDays[d];\r\n    const isLowerDay = d => ['squat', 'deadlift'].includes(liftDays[d] || '');\r\n    const hiitMods = (options?.hiitModalities || []).filter(k => MODALITIES[k]?.mode === 'hiit');\r\n    const lissMods = (options?.lissModalities || []).filter(k => MODALITIES[k]?.mode === 'liss');\r\n\r\n    const pickMod = (arr, idx) => (arr.length ? arr[idx % arr.length] : null);\r\n\r\n    // Candidate days by placement policy\r\n    const afterLiftOrder = DAYS.filter(d => isLiftDay(d)); // attach post-session\r\n    const offDayOrder = DAYS.filter(d => !isLiftDay(d));   // place on non-lift days\r\n\r\n    const targets = place === CONDITIONING_PLACEMENT.AFTER_LIFTS\r\n        ? afterLiftOrder\r\n        : place === CONDITIONING_PLACEMENT.OFF_DAYS\r\n            ? offDayOrder\r\n            : // mixed: try off-days first, then remaining lift days\r\n            [...offDayOrder, ...afterLiftOrder];\r\n\r\n    // Assign HIIT sessions first (prefer after lower body or off-days not adjacent to lower)\r\n    let assigned = 0;\r\n    for (let i = 0; i < targets.length && assigned < hiitCount; i++) {\r\n        const d = targets[i];\r\n\r\n        // If this is BEFORE a lower day, skip to avoid interference\r\n        const nextIdx = (DAYS.indexOf(d) + 1) % DAYS.length;\r\n        const nextDay = DAYS[nextIdx];\r\n        const avoid = isLowerDay(nextDay);\r\n\r\n        if (avoid && place !== CONDITIONING_PLACEMENT.AFTER_LIFTS) continue;\r\n\r\n        const modKey = pickMod(hiitMods, assigned) || 'hill_sprint';\r\n        const mod = MODALITIES[modKey];\r\n        out.push({\r\n            day: d,\r\n            mode: 'hiit',\r\n            modality: modKey,\r\n            prescription: { ...mod.default },\r\n            notes: isLiftDay(d) ? `After ${liftDays[d]} session` : 'Standalone session'\r\n        });\r\n        assigned++;\r\n    }\r\n\r\n    // Assign LISS sessions next\r\n    let lissAssigned = 0;\r\n    for (let i = 0; i < targets.length && lissAssigned < lissCount; i++) {\r\n        const d = targets[i];\r\n\r\n        // Skip days that already got a session\r\n        if (out.some(s => s.day === d)) continue;\r\n\r\n        const modKey = pickMod(lissMods, lissAssigned) || 'walk';\r\n        const mod = MODALITIES[modKey];\r\n        out.push({\r\n            day: d,\r\n            mode: 'liss',\r\n            modality: modKey,\r\n            prescription: { ...mod.default },\r\n            notes: isLiftDay(d) ? `After ${liftDays[d]} session (easy)` : 'Standalone easy session'\r\n        });\r\n        lissAssigned++;\r\n    }\r\n\r\n    // Sort by weekday order\r\n    out.sort((a, b) => DAYS.indexOf(a.day) - DAYS.indexOf(b.day));\r\n    return out.slice(0, freq);\r\n}\r\n\r\n/**\r\n * planConditioningFromState: unified accessor that returns a normalized weekly conditioning plan\r\n * regardless of whether the wizard is using the new Step6 (conditioning.options + weeklyPlan)\r\n * shape or the earlier simple shape (sessionsPerWeek, hiitPerWeek, modalities{..}).\r\n * Falls back to auto-generation when only options are present. Returns [] if no sessions requested.\r\n */\r\n// Internal mapper: convert arbitrary user-entered labels to canonical modality keys\r\nfunction mapToCanonicalModality(label, fallbackMode) {\r\n    if (MODALITIES[label]) return label;\r\n    const lower = String(label).toLowerCase();\r\n    if (lower.includes('prowler')) return 'prowler_push';\r\n    if (lower.includes('hill')) return 'hill_sprint';\r\n    if (lower.includes('sled')) return 'sled_drag';\r\n    if (lower.includes('row') && fallbackMode === 'hiit') return 'row_interval';\r\n    if (lower.includes('bike') && fallbackMode === 'hiit') return 'bike_interval';\r\n    if (lower.includes('walk')) return 'walk';\r\n    if (lower.includes('swim')) return 'swim';\r\n    if (lower.includes('bike')) return 'easy_bike';\r\n    if (lower.includes('row')) return 'easy_row';\r\n    return fallbackMode === 'hiit' ? 'hill_sprint' : 'walk';\r\n}\r\n\r\nexport function normalizeConditioningModalities(modalitiesObj = {}) {\r\n    return {\r\n        hiit: (modalitiesObj.hiit || []).map(m => mapToCanonicalModality(m, 'hiit')),\r\n        liss: (modalitiesObj.liss || []).map(m => mapToCanonicalModality(m, 'liss'))\r\n    };\r\n}\r\n\r\nexport function planConditioningFromState(state) {\r\n    const cond = state?.conditioning || {};\r\n\r\n    // Case 1: Explicit weeklyPlan authored by user (Step6 UI). Trust it and normalize.\r\n    if (Array.isArray(cond.weeklyPlan) && cond.weeklyPlan.length) {\r\n        return cond.weeklyPlan.map(s => ({\r\n            day: s.day,\r\n            mode: s.mode,\r\n            modality: mapToCanonicalModality(s.modality, s.mode),\r\n            prescription: { ...(s.prescription || {}) },\r\n            notes: s.notes || (s.mode === 'hiit' ? 'After lift' : 'Easy session')\r\n        }));\r\n    }\r\n\r\n    // Collect option style config (Step6) or legacy flat fields.\r\n    const opts = cond.options || cond; // legacy cond placed fields at root\r\n    const frequency = Number(opts.frequency ?? cond.sessionsPerWeek ?? 0) || 0;\r\n    if (!frequency) return [];\r\n    const hiitPerWeek = Number(opts.hiitPerWeek ?? cond.hiitPerWeek ?? frequency);\r\n    const lissPerWeek = Number(opts.lissPerWeek ?? Math.max(0, frequency - hiitPerWeek));\r\n    const placement = opts.placement || CONDITIONING_PLACEMENT.AFTER_LIFTS;\r\n\r\n    const hiitModalities = (opts.hiitModalities || cond.modalities?.hiit || []).map(m => mapToCanonicalModality(m, 'hiit'));\r\n    const lissModalities = (opts.lissModalities || cond.modalities?.liss || []).map(m => mapToCanonicalModality(m, 'liss'));\r\n\r\n    try {\r\n        return buildConditioningPlan(state, {\r\n            frequency,\r\n            hiitPerWeek,\r\n            lissPerWeek,\r\n            placement,\r\n            hiitModalities,\r\n            lissModalities\r\n        });\r\n    } catch (e) {\r\n        console.warn('planConditioningFromState failed', e);\r\n        return [];\r\n    }\r\n}\r\n\r\n// Export mapping function for external consumers (e.g., export builders) to canonicalize stored legacy modality labels\r\nexport function toCanonicalModalityKey(label, modeHint) {\r\n    return mapToCanonicalModality(label, modeHint);\r\n}\r\n"],"names":["deriveLiftDayMap","state","sched","_a","map","defaultDays","i","d","dayName","k","key","day","DAYS","buildConditioningPlan","options","out","liftDays","freq","hiitCount","lissCount","place","CONDITIONING_PLACEMENT","isLiftDay","isLowerDay","hiitMods","MODALITIES","lissMods","pickMod","arr","idx","afterLiftOrder","offDayOrder","targets","assigned","nextIdx","nextDay","modKey","mod","lissAssigned","s","a","b","mapToCanonicalModality","label","fallbackMode","lower","normalizeConditioningModalities","modalitiesObj","m","planConditioningFromState","cond","opts","frequency","hiitPerWeek","lissPerWeek","placement","hiitModalities","lissModalities","_b","e"],"mappings":"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"}