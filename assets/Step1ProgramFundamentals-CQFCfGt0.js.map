{"version":3,"file":"Step1ProgramFundamentals-CQFCfGt0.js","sources":["../../src/components/program/steps/Step1ProgramFundamentals.jsx"],"sourcesContent":["// src/components/program/steps/Step1ProgramFundamentals.jsx\r\nimport React, { useMemo } from 'react';\r\nimport { Info, AlertTriangle, CheckCircle, Calculator, Wand2, Sliders, Ruler } from 'lucide-react';\r\nimport StepStatusPill from './_shared/StepStatusPill.jsx';\r\nimport { STEP_IDS } from './_registry/stepRegistry.js';\r\nimport { estimate1RM, roundToIncrement } from '../../../lib/fiveThreeOne/compute531.js';\r\n\r\nconst LIFT_ORDER = ['press', 'deadlift', 'bench', 'squat'];\r\nconst LIFT_LABEL = { press: 'Overhead Press', bench: 'Bench Press', deadlift: 'Deadlift', squat: 'Back Squat' };\r\n\r\nfunction numOrNull(v) {\r\n    const n = Number(v);\r\n    return Number.isFinite(n) ? n : null;\r\n}\r\n\r\nexport default function Step1ProgramFundamentals({ data, updateData }) {\r\n    const state = data || {};\r\n\r\n    // ----- GLOBAL CONTROLS -----\r\n    const units = state.units ?? 'lb';\r\n    const rounding = state.rounding || { increment: units === 'kg' ? 2.5 : 5, mode: 'nearest' };\r\n    const tmPercentGlobal = state.tmPercent ?? 90;\r\n\r\n    const lifts = state.lifts || {\r\n        squat: { oneRM: null, tm: null, tmPercent: 90 },\r\n        bench: { oneRM: null, tm: null, tmPercent: 90 },\r\n        deadlift: { oneRM: null, tm: null, tmPercent: 90 },\r\n        press: { oneRM: null, tm: null, tmPercent: 90 },\r\n    };\r\n    const enabled = state.coreLiftsEnabled || { squat: true, bench: true, deadlift: true, press: true };\r\n\r\n    const setGlobal = (patch) => updateData({ ...state, ...patch });\r\n\r\n    const setRounding = (patch) => {\r\n        const next = { ...(state.rounding || {}), ...patch };\r\n        setGlobal({ rounding: next });\r\n    };\r\n\r\n    const setLift = (lift, patch) => {\r\n        const next = { ...(lifts[lift] || {}), ...patch };\r\n        updateData({ ...state, lifts: { ...lifts, [lift]: next } });\r\n    };\r\n\r\n    const toggleLift = (lift, on) => {\r\n        updateData({ ...state, coreLiftsEnabled: { ...enabled, [lift]: on } });\r\n    };\r\n\r\n    const applyTMPercentToAll = (pct) => {\r\n        const next = { ...lifts };\r\n        for (const k of Object.keys(next)) {\r\n            next[k] = { ...(next[k] || {}), tmPercent: pct };\r\n        }\r\n        updateData({ ...state, tmPercent: pct, lifts: next });\r\n    };\r\n\r\n    const computeTM = (oneRM, tmPct, inc, mode) => {\r\n        if (!oneRM) return null;\r\n        const raw = oneRM * (tmPct / 100);\r\n        return roundToIncrement(raw, inc, mode);\r\n    };\r\n\r\n    const inferOneRM = (liftObj) => {\r\n        // Prefer explicit 1RM; if not present, compute from rep test if provided\r\n        if (numOrNull(liftObj.oneRM)) return numOrNull(liftObj.oneRM);\r\n        const w = numOrNull(liftObj.testWeight);\r\n        const r = numOrNull(liftObj.testReps);\r\n        if (w && r && r >= 1) return estimate1RM(w, r);\r\n        return null;\r\n    };\r\n\r\n    const calcAllTMs = () => {\r\n        const inc = rounding?.increment ?? (units === 'kg' ? 2.5 : 5);\r\n        const mode = rounding?.mode ?? 'nearest';\r\n        const next = { ...lifts };\r\n        for (const k of Object.keys(next)) {\r\n            if (!enabled[k]) continue;\r\n            const lo = next[k] || {};\r\n            const tmPct = numOrNull(lo.tmPercent) ?? tmPercentGlobal ?? 90;\r\n            const one = inferOneRM(lo);\r\n            const tm = computeTM(one, tmPct, inc, mode);\r\n            next[k] = { ...lo, oneRM: one, tm };\r\n        }\r\n        updateData({ ...state, lifts: next });\r\n    };\r\n\r\n    // Auto choose rounding increment when switching units if user never set it.\r\n    const onUnitsChange = (val) => {\r\n        const wantsKg = val === 'kg';\r\n        const autoInc = wantsKg ? 2.5 : 5;\r\n        const currentInc = state.rounding?.increment;\r\n        const newRounding = currentInc ? state.rounding : { increment: autoInc, mode: 'nearest' };\r\n        updateData({ ...state, units: val, rounding: newRounding });\r\n    };\r\n\r\n    const warmupText = 'Warm‑up: 40/50/60% TM × 5/5/3 (Wendler standard)';\r\n\r\n    const completionHint = useMemo(() => {\r\n        const missing = [];\r\n        for (const k of LIFT_ORDER) {\r\n            if (!enabled[k]) continue;\r\n            const L = lifts[k] || {};\r\n            if (!(numOrNull(L.tm) || numOrNull(L.oneRM) || (numOrNull(L.testWeight) && numOrNull(L.testReps)))) {\r\n                missing.push(LIFT_LABEL[k]);\r\n            }\r\n        }\r\n        return missing;\r\n    }, [lifts, enabled]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            {/* Header */}\r\n            <div className=\"flex items-start justify-between\">\r\n                <div>\r\n                    <h3 className=\"text-xl font-semibold text-white mb-1\">Step 1: Program Fundamentals</h3>\r\n                    <p className=\"text-gray-400 text-sm\">\r\n                        Set units, rounding, and enter either 1RM or a rep test for each lift. The calculator will suggest Training Max (TM).\r\n                    </p>\r\n                </div>\r\n                <StepStatusPill stepId={STEP_IDS.PROGRAM_FUNDAMENTALS} data={state} />\r\n            </div>\r\n\r\n            {/* Info box */}\r\n            <div className=\"bg-blue-900/20 border border-blue-600 p-4 rounded-lg\">\r\n                <div className=\"flex items-start gap-3\">\r\n                    <Info className=\"w-5 h-5 text-blue-300 mt-0.5\" />\r\n                    <div className=\"text-blue-100 text-sm\">\r\n                        <div className=\"font-medium mb-1\">Wendler Rules</div>\r\n                        <ul className=\"list-disc ml-5 space-y-1\">\r\n                            <li>Calculate all work sets from the <b>Training Max (TM)</b>, not your true 1RM.</li>\r\n                            <li>Standard TM is <b>90%</b> of 1RM (or e1RM from a rep test). Conservative: 85%.</li>\r\n                            <li>{warmupText} before main sets.</li>\r\n                            <li>Start a little light. If you can’t get ≥5 on Week‑1 top set, your TM is too high.</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Global controls */}\r\n            <div className=\"bg-gray-900/60 border border-gray-700 rounded-lg p-4\">\r\n                <div className=\"flex items-center justify-between mb-3\">\r\n                    <div className=\"flex items-center gap-2 text-white font-medium\">\r\n                        <Sliders className=\"w-5 h-5\" /> Global Settings\r\n                    </div>\r\n                    <button\r\n                        onClick={() => applyTMPercentToAll(tmPercentGlobal)}\r\n                        className=\"inline-flex items-center gap-2 text-sm px-3 py-1 border border-red-500 rounded hover:bg-red-600/10\"\r\n                        title=\"Apply this TM% to all lifts\"\r\n                    >\r\n                        <Wand2 className=\"w-4 h-4\" />\r\n                        Apply TM% to all\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\r\n                    {/* Units */}\r\n                    <div className=\"flex flex-col\">\r\n                        <label className=\"text-sm text-gray-300 mb-1\">Units</label>\r\n                        <select\r\n                            value={units}\r\n                            onChange={(e) => onUnitsChange(e.target.value)}\r\n                            className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                        >\r\n                            <option value=\"lb\">Pounds (lb)</option>\r\n                            <option value=\"kg\">Kilograms (kg)</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Rounding increment */}\r\n                    <div className=\"flex flex-col\">\r\n                        <label className=\"text-sm text-gray-300 mb-1\">Rounding Increment</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            step=\"0.5\"\r\n                            min=\"0.5\"\r\n                            value={rounding?.increment ?? (units === 'kg' ? 2.5 : 5)}\r\n                            onChange={(e) => setRounding({ increment: numOrNull(e.target.value) || (units === 'kg' ? 2.5 : 5) })}\r\n                            className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                        />\r\n                        <span className=\"text-xs text-gray-500 mt-1\">\r\n                            Typical: 5 lb or 2.5 kg\r\n                        </span>\r\n                    </div>\r\n\r\n                    {/* Rounding mode */}\r\n                    <div className=\"flex flex-col\">\r\n                        <label className=\"text-sm text-gray-300 mb-1\">Rounding Mode</label>\r\n                        <select\r\n                            value={rounding?.mode || 'nearest'}\r\n                            onChange={(e) => setRounding({ mode: e.target.value })}\r\n                            className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                        >\r\n                            <option value=\"nearest\">Nearest</option>\r\n                            <option value=\"ceiling\">Ceiling</option>\r\n                            <option value=\"floor\">Floor</option>\r\n                        </select>\r\n                    </div>\r\n\r\n                    {/* Global TM% */}\r\n                    <div className=\"flex flex-col\">\r\n                        <label className=\"text-sm text-gray-300 mb-1\">Global TM %</label>\r\n                        <input\r\n                            type=\"number\"\r\n                            min=\"80\"\r\n                            max=\"95\"\r\n                            value={tmPercentGlobal}\r\n                            onChange={(e) => setGlobal({ tmPercent: Math.max(80, Math.min(95, Number(e.target.value) || 90)) })}\r\n                            className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                        />\r\n                        <span className=\"text-xs text-gray-500 mt-1\">Wendler default: 90%</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {/* Lift cards */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                {LIFT_ORDER.map((lift) => {\r\n                    const L = lifts[lift] || {};\r\n                    const on = enabled[lift] ?? true;\r\n                    const tmPct = numOrNull(L.tmPercent) ?? tmPercentGlobal ?? 90;\r\n\r\n                    const oneRM = inferOneRM(L);\r\n                    const inc = rounding?.increment ?? (units === 'kg' ? 2.5 : 5);\r\n                    const mode = rounding?.mode ?? 'nearest';\r\n                    const suggestedTM = oneRM ? roundToIncrement(oneRM * (tmPct / 100), inc, mode) : null;\r\n\r\n                    return (\r\n                        <div key={lift} className=\"bg-gray-900/60 border border-gray-700 rounded-lg p-4\">\r\n                            <div className=\"flex items-center justify-between mb-2\">\r\n                                <div className=\"text-white font-medium\">{LIFT_LABEL[lift]}</div>\r\n                                <label className=\"text-sm text-gray-300 flex items-center gap-2\">\r\n                                    <input type=\"checkbox\" checked={!!on} onChange={(e) => toggleLift(lift, e.target.checked)} />\r\n                                    Enable\r\n                                </label>\r\n                            </div>\r\n\r\n                            {!on ? (\r\n                                <div className=\"text-gray-500 text-sm\">Lift disabled for this program.</div>\r\n                            ) : (\r\n                                <>\r\n                                    <div className=\"grid grid-cols-2 gap-3\">\r\n                                        {/* 1RM direct */}\r\n                                        <div className=\"flex flex-col\">\r\n                                            <label className=\"text-sm text-gray-300 mb-1\">1RM ({units})</label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                step=\"1\"\r\n                                                min=\"0\"\r\n                                                value={L.oneRM ?? ''}\r\n                                                onChange={(e) => setLift(lift, { oneRM: numOrNull(e.target.value) })}\r\n                                                className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                                            />\r\n                                            <span className=\"text-xs text-gray-500 mt-1\">Leave blank if using a rep test.</span>\r\n                                        </div>\r\n\r\n                                        {/* Rep test */}\r\n                                        <div className=\"flex flex-col\">\r\n                                            <label className=\"text-sm text-gray-300 mb-1\">Rep Test (Weight × Reps)</label>\r\n                                            <div className=\"grid grid-cols-2 gap-2\">\r\n                                                <input\r\n                                                    type=\"number\"\r\n                                                    placeholder=\"Weight\"\r\n                                                    value={L.testWeight ?? ''}\r\n                                                    onChange={(e) => setLift(lift, { testWeight: numOrNull(e.target.value) })}\r\n                                                    className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                                                />\r\n                                                <input\r\n                                                    type=\"number\"\r\n                                                    placeholder=\"Reps\"\r\n                                                    value={L.testReps ?? ''}\r\n                                                    onChange={(e) => setLift(lift, { testReps: numOrNull(e.target.value) })}\r\n                                                    className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                                                />\r\n                                            </div>\r\n                                            <span className=\"text-xs text-gray-500 mt-1\">\r\n                                                e1RM = weight × reps × 0.0333 + weight\r\n                                            </span>\r\n                                        </div>\r\n\r\n                                        {/* TM% override */}\r\n                                        <div className=\"flex flex-col\">\r\n                                            <label className=\"text-sm text-gray-300 mb-1\">TM % (this lift)</label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                min=\"80\"\r\n                                                max=\"95\"\r\n                                                value={tmPct}\r\n                                                onChange={(e) => setLift(lift, { tmPercent: Math.max(80, Math.min(95, Number(e.target.value) || tmPct)) })}\r\n                                                className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                                            />\r\n                                            <span className=\"text-xs text-gray-500 mt-1\">Default comes from Global TM% above.</span>\r\n                                        </div>\r\n\r\n                                        {/* TM (computed or manual override) */}\r\n                                        <div className=\"flex flex-col\">\r\n                                            <label className=\"text-sm text-gray-300 mb-1\">Training Max (TM)</label>\r\n                                            <input\r\n                                                type=\"number\"\r\n                                                step=\"1\"\r\n                                                min=\"0\"\r\n                                                value={L.tm ?? ''}\r\n                                                onChange={(e) => setLift(lift, { tm: numOrNull(e.target.value) })}\r\n                                                className=\"bg-gray-800 border border-gray-600 text-white rounded px-2 py-1\"\r\n                                            />\r\n                                            <span className=\"text-xs text-gray-500 mt-1\">You can override the computed TM here.</span>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Calculated preview */}\r\n                                    <div className=\"mt-3 grid grid-cols-3 gap-3 text-sm\">\r\n                                        <div className=\"bg-gray-800/60 border border-gray-700 rounded p-2\">\r\n                                            <div className=\"text-gray-400 text-xs\">e1RM (computed)</div>\r\n                                            <div className=\"text-white font-medium\">{oneRM ? `${Math.round(oneRM)} ${units}` : '—'}</div>\r\n                                        </div>\r\n                                        <div className=\"bg-gray-800/60 border border-gray-700 rounded p-2\">\r\n                                            <div className=\"text-gray-400 text-xs\">Suggested TM</div>\r\n                                            <div className=\"text-white font-medium\">{suggestedTM ? `${suggestedTM} ${units}` : '—'}</div>\r\n                                        </div>\r\n                                        <div className=\"bg-gray-800/60 border border-gray-700 rounded p-2\">\r\n                                            <div className=\"text-gray-400 text-xs\">Current TM</div>\r\n                                            <div className=\"text-white font-medium\">{L.tm ? `${L.tm} ${units}` : '—'}</div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Actions */}\r\n                                    <div className=\"mt-3 flex flex-wrap gap-2\">\r\n                                        <button\r\n                                            onClick={() => {\r\n                                                const one = inferOneRM(L);\r\n                                                const tm = computeTM(one, tmPct, inc, mode);\r\n                                                setLift(lift, { oneRM: one, tm });\r\n                                            }}\r\n                                            className=\"inline-flex items-center gap-2 px-3 py-1 border border-blue-500 rounded hover:bg-blue-600/10\"\r\n                                        >\r\n                                            <Calculator className=\"w-4 h-4\" />\r\n                                            Set TM from 1RM/Rep Test\r\n                                        </button>\r\n                                        <button\r\n                                            onClick={() => setLift(lift, { oneRM: null, testWeight: null, testReps: null, tm: null })}\r\n                                            className=\"inline-flex items-center gap-2 px-3 py-1 border border-gray-600 rounded hover:bg-gray-600/10\"\r\n                                        >\r\n                                            Clear\r\n                                        </button>\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n\r\n            {/* Batch calculator + guidance */}\r\n            <div className=\"bg-gray-900/60 border border-gray-700 rounded p-4\">\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"flex items-center gap-2 text-white font-medium\">\r\n                        <Ruler className=\"w-5 h-5\" /> Batch Calculate\r\n                    </div>\r\n                    <button\r\n                        onClick={calcAllTMs}\r\n                        className=\"inline-flex items-center gap-2 px-3 py-1 border border-red-500 rounded hover:bg-red-600/10\"\r\n                    >\r\n                        <Calculator className=\"w-4 h-4\" />\r\n                        Calculate All TMs\r\n                    </button>\r\n                </div>\r\n                <div className=\"text-sm text-gray-300\">\r\n                    This uses each lift’s 1RM (or e1RM from your rep test) and the lift’s TM% (or global TM%) with your rounding rules.\r\n                </div>\r\n            </div>\r\n\r\n            {/* Small warning if lots missing */}\r\n            {completionHint.length > 0 && (\r\n                <div className=\"bg-yellow-900/20 border border-yellow-700 text-yellow-200 rounded p-3 text-sm\">\r\n                    <div className=\"flex items-start gap-2\">\r\n                        <AlertTriangle className=\"w-4 h-4 mt-0.5\" />\r\n                        <div>\r\n                            Enter 1RM or a rep test (and set TM) for: {completionHint.join(', ')}.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"names":["LIFT_ORDER","LIFT_LABEL","numOrNull","v","n","Step1ProgramFundamentals","data","updateData","state","units","rounding","tmPercentGlobal","lifts","enabled","setGlobal","patch","setRounding","next","setLift","lift","toggleLift","on","applyTMPercentToAll","pct","k","computeTM","oneRM","tmPct","inc","mode","raw","roundToIncrement","inferOneRM","liftObj","w","estimate1RM","calcAllTMs","lo","one","tm","onUnitsChange","val","autoInc","newRounding","_a","warmupText","completionHint","useMemo","missing","L","jsxs","jsx","StepStatusPill","STEP_IDS","Info","Sliders","Wand2","e","suggestedTM","Fragment","Calculator","Ruler","AlertTriangle"],"mappings":"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"}