{"version":3,"file":"Tracking-D6eftHWa.js","sources":["../../src/hooks/useWorkoutSessions.js","../../src/components/dashboard/MuscleCard.jsx","../../src/pages/Tracking.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { supabase } from '../lib/api/supabaseClient';\r\nimport { useTrainingState } from '../context/TrainingStateContext.jsx';\r\n\r\nexport function useWorkoutSessions() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const { state } = useTrainingState();\r\n\r\n  // Fetch all workout sessions for the current user\r\n  const fetchSessions = async (userId) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('workout_sessions')\r\n        .select(`\r\n          *,\r\n          workout_sets (\r\n            id,\r\n            exercise_name,\r\n            muscle_group,\r\n            weight,\r\n            reps,\r\n            rir,\r\n            completed_at,\r\n            set_number\r\n          )\r\n        `)\r\n        .eq('user_id', userId)\r\n        .order('started_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(data || []);\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error fetching workout sessions:', err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create a new workout session\r\n  const createSession = async (sessionData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('workout_sessions')\r\n        .insert([{\r\n          user_id: sessionData.userId,\r\n          session_name: sessionData.sessionName,\r\n          mesocycle_week: sessionData.mesocycleWeek || state.currentMesocycle.currentWeek,\r\n          planned_exercises: sessionData.plannedExercises || [],\r\n          started_at: new Date().toISOString(),\r\n          status: 'active'\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => [data, ...prev]);\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error creating workout session:', err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update an existing workout session\r\n  const updateSession = async (sessionId, updates) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('workout_sessions')\r\n        .update(updates)\r\n        .eq('id', sessionId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => prev.map(session =>\r\n        session.id === sessionId ? { ...session, ...data } : session\r\n      ));\r\n\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error updating workout session:', err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Finish a workout session\r\n  const finishSession = async (sessionId, completedData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('workout_sessions')\r\n        .update({\r\n          status: 'completed',\r\n          completed_at: new Date().toISOString(),\r\n          total_volume: completedData.totalVolume,\r\n          total_sets: completedData.totalSets,\r\n          duration_minutes: completedData.durationMinutes,\r\n          notes: completedData.notes || ''\r\n        })\r\n        .eq('id', sessionId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => prev.map(session =>\r\n        session.id === sessionId ? { ...session, ...data } : session\r\n      ));\r\n\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error finishing workout session:', err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete a workout session\r\n  const deleteSession = async (sessionId) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Delete associated sets first\r\n      await supabase\r\n        .from('workout_sets')\r\n        .delete()\r\n        .eq('session_id', sessionId);\r\n\r\n      // Delete the session\r\n      const { error } = await supabase\r\n        .from('workout_sessions')\r\n        .delete()\r\n        .eq('id', sessionId);\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error deleting workout session:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Log a set within a session\r\n  const logSet = async (sessionId, setData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('workout_sets')\r\n        .insert([{\r\n          session_id: sessionId,\r\n          exercise_name: setData.exerciseName,\r\n          muscle_group: setData.muscleGroup,\r\n          weight: setData.weight,\r\n          reps: setData.reps,\r\n          rir: setData.rir,\r\n          set_number: setData.setNumber,\r\n          completed_at: new Date().toISOString(),\r\n          notes: setData.notes || ''\r\n        }])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Update the session with the new set\r\n      setSessions(prev => prev.map(session => {\r\n        if (session.id === sessionId) {\r\n          return {\r\n            ...session,\r\n            workout_sets: [...(session.workout_sets || []), data]\r\n          };\r\n        }\r\n        return session;\r\n      }));\r\n\r\n      return data;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error logging set:', err);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Undo the last set in a session\r\n  const undoLastSet = async (sessionId) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Find the most recent set for this session\r\n      const { data: lastSet, error: fetchError } = await supabase\r\n        .from('workout_sets')\r\n        .select('id')\r\n        .eq('session_id', sessionId)\r\n        .order('completed_at', { ascending: false })\r\n        .limit(1)\r\n        .single();\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      // Delete the last set\r\n      const { error: deleteError } = await supabase\r\n        .from('workout_sets')\r\n        .delete()\r\n        .eq('id', lastSet.id);\r\n\r\n      if (deleteError) throw deleteError;\r\n\r\n      // Update local state\r\n      setSessions(prev => prev.map(session => {\r\n        if (session.id === sessionId) {\r\n          return {\r\n            ...session,\r\n            workout_sets: session.workout_sets?.filter(set => set.id !== lastSet.id) || []\r\n          };\r\n        }\r\n        return session;\r\n      }));\r\n\r\n      return true;\r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error undoing last set:', err);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Get session statistics\r\n  const getSessionStats = (sessionId) => {\r\n    const session = sessions.find(s => s.id === sessionId);\r\n    if (!session || !session.workout_sets) return null;\r\n\r\n    const sets = session.workout_sets;\r\n    const totalVolume = sets.reduce((sum, set) => sum + (set.weight * set.reps), 0);\r\n    const totalSets = sets.length;\r\n    const exerciseCount = new Set(sets.map(set => set.exercise_name)).size;\r\n    const avgRIR = sets.length > 0 ? sets.reduce((sum, set) => sum + set.rir, 0) / sets.length : 0;\r\n\r\n    return {\r\n      totalVolume,\r\n      totalSets,\r\n      exerciseCount,\r\n      avgRIR: Math.round(avgRIR * 10) / 10,\r\n      muscleGroups: [...new Set(sets.map(set => set.muscle_group))]\r\n    };\r\n  };\r\n\r\n  // Get weekly volume by muscle group\r\n  const getWeeklyVolume = (weekNumber) => {\r\n    const weekSessions = sessions.filter(session =>\r\n      session.mesocycle_week === weekNumber && session.status === 'completed'\r\n    );\r\n\r\n    const volumeByMuscle = {};\r\n\r\n    weekSessions.forEach(session => {\r\n      session.workout_sets?.forEach(set => {\r\n        const muscle = set.muscle_group;\r\n        const volume = set.weight * set.reps;\r\n        volumeByMuscle[muscle] = (volumeByMuscle[muscle] || 0) + volume;\r\n      });\r\n    });\r\n\r\n    return volumeByMuscle;\r\n  };\r\n\r\n  return {\r\n    sessions,\r\n    loading,\r\n    error,\r\n    fetchSessions,\r\n    createSession,\r\n    updateSession,\r\n    finishSession,\r\n    deleteSession,\r\n    logSet,\r\n    undoLastSet,\r\n    getSessionStats,\r\n    getWeeklyVolume\r\n  };\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nconst MuscleCard = ({ \r\n  muscle,\r\n  sets,\r\n  MEV,\r\n  MAV,\r\n  MRV\r\n}) => {\r\n  const [currentValue, setCurrentValue] = useState(sets);\r\n\r\n  // Determine status based on volume\r\n  const getStatus = () => {\r\n    if (currentValue < MEV) return 'low';\r\n    if (currentValue <= MAV) return 'optimal';\r\n    if (currentValue <= MRV) return 'high';\r\n    return 'maximum';\r\n  };\r\n\r\n  const status = getStatus();\r\n  \r\n  // Get border and badge colors based on status\r\n  const _getBorderColor = () => {\r\n    switch (status) {\r\n      case 'optimal': return '#22c55e';\r\n      case 'high': return '#eab308';\r\n      case 'low':\r\n      case 'maximum':\r\n      default: return '#dc2626';\r\n    }\r\n  };\r\n\r\n  const getSliderColor = (value) => {\r\n    if (value < MEV) return '#dc2626'; // Red - below MEV\r\n    if (value > MRV) return '#dc2626'; // Red - above MRV\r\n    return '#22c55e'; // Green - optimal range\r\n  };\r\n\r\n  const getSliderBackground = () => {\r\n    // Create gradient that spans the full range (0 to max)\r\n    const maxRange = Math.max(MRV * 1.5, 30); // Allow 50% beyond MRV\r\n    const mevPercent = (MEV / maxRange) * 100;\r\n    const mavPercent = (MAV / maxRange) * 100;\r\n    const mrvPercent = (MRV / maxRange) * 100;\r\n    \r\n    return `linear-gradient(to right, \r\n      #dc2626 0%, \r\n      #dc2626 ${mevPercent}%, \r\n      #eab308 ${mevPercent}%, \r\n      #22c55e ${mavPercent}%, \r\n      #eab308 ${mrvPercent}%, \r\n      #dc2626 ${mrvPercent}%, \r\n      #dc2626 100%)`;\r\n  };\r\n\r\n  const maxRange = Math.max(MRV * 1.5, 30);\r\n  const sliderColor = getSliderColor(currentValue);  return (\r\n    <div style={{\r\n      backgroundColor: '#1f2937',\r\n      border: `2px solid ${sliderColor}`,\r\n      borderRadius: '0.75rem',\r\n      padding: '1.5rem',\r\n      transition: 'all 0.3s ease',\r\n      boxShadow: `0 4px 12px rgba(${sliderColor === '#22c55e' ? '34, 197, 94' : '220, 38, 38'}, 0.3)`\r\n    }}>\r\n      {/* Header Row */}\r\n      <div style={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '1rem'\r\n      }}>\r\n        <span style={{\r\n          color: '#ffffff',\r\n          fontWeight: 'bold',\r\n          fontSize: '1.125rem',\r\n          textTransform: 'uppercase'\r\n        }}>{muscle}</span>\r\n        <span style={{\r\n          color: sliderColor,\r\n          fontSize: '1rem',\r\n          fontWeight: 'bold',\r\n          textShadow: `0 0 8px ${sliderColor}`\r\n        }}>Current: {currentValue} sets</span>\r\n      </div>\r\n\r\n      {/* Slider */}\r\n      <div style={{ position: 'relative' }}>\r\n        <input \r\n          type=\"range\" \r\n          min={0} \r\n          max={maxRange} \r\n          value={currentValue}\r\n          style={{\r\n            width: '100%',\r\n            height: '12px',\r\n            background: getSliderBackground(),\r\n            borderRadius: '6px',\r\n            appearance: 'none',\r\n            cursor: 'pointer',\r\n            outline: 'none'\r\n          }}\r\n          onChange={(e) => {\r\n            setCurrentValue(parseInt(e.target.value));\r\n          }}\r\n        />\r\n        \r\n        {/* Landmark Labels */}\r\n        <div style={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          fontSize: '0.75rem',\r\n          marginTop: '0.75rem',\r\n          fontWeight: '600'\r\n        }}>\r\n          <span style={{ \r\n            color: '#eab308', \r\n            fontWeight: 'bold',\r\n            textShadow: '0 0 4px #eab308'\r\n          }}>MEV: {MEV}</span>\r\n          <span style={{ \r\n            color: currentValue >= MEV && currentValue <= MRV ? '#22c55e' : '#dc2626', \r\n            fontWeight: 'bold',\r\n            textTransform: 'uppercase',\r\n            textShadow: `0 0 4px ${currentValue >= MEV && currentValue <= MRV ? '#22c55e' : '#dc2626'}`\r\n          }}>\r\n            {currentValue >= MEV && currentValue <= MRV ? 'OPTIMAL RANGE' : 'OUT OF RANGE'}\r\n          </span>\r\n          <span style={{ \r\n            color: '#dc2626', \r\n            fontWeight: 'bold',\r\n            textShadow: '0 0 4px #dc2626'\r\n          }}>MRV: {MRV}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MuscleCard;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useWorkoutSessions } from \"../hooks/useWorkoutSessions\";\r\nimport Drawer from \"../components/Drawer\";\r\nimport SimpleVolumeChart from \"../components/dashboard/SimpleVolumeChart\";\r\nimport TrainingStatusCard from \"../components/dashboard/TrainingStatusCard\";\r\nimport MuscleCard from \"../components/dashboard/MuscleCard\";\r\nimport { TrainingStateProvider } from \"../context/TrainingStateContext.jsx\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport Breadcrumb from \"../components/navigation/Breadcrumb\";\r\nimport SectionDivider from \"../components/ui/SectionDivider\";\r\nimport FloatingActionButton from \"../components/ui/FloatingActionButton\";\r\nimport LoadingSkeleton, { TrackingLoading } from \"../components/ui/LoadingSkeleton\";\r\nimport { ChartBarIcon, PlayIcon, PlusIcon } from '@heroicons/react/24/outline';\r\nimport \"../components/dashboard/DashboardLayout.css\";\r\n\r\nexport default function Tracking() {\r\n  const _sessions = useWorkoutSessions();\r\n  const [_selected, _setSelected] = useState(null);\r\n  const [_isLoading, setIsLoading] = useState(true);\r\n\r\n  // Simulate loading state\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => setIsLoading(false), 800);\r\n    return () => clearTimeout(timer);\r\n  }, []);// Complete muscle data - matches PowerHouse legacy order and includes all muscle groups\r\n  const muscleData = [\r\n    { muscle: 'Chest', sets: 12, MEV: 8, MAV: 18, MRV: 22 },\r\n    { muscle: 'Back', sets: 16, MEV: 10, MAV: 20, MRV: 25 },\r\n    { muscle: 'Quads', sets: 20, MEV: 10, MAV: 20, MRV: 25 },\r\n    { muscle: 'Glutes', sets: 14, MEV: 8, MAV: 12, MRV: 16 },\r\n    { muscle: 'Hamstrings', sets: 12, MEV: 8, MAV: 16, MRV: 20 },\r\n    { muscle: 'Shoulders', sets: 10, MEV: 6, MAV: 16, MRV: 20 },\r\n    { muscle: 'Biceps', sets: 8, MEV: 6, MAV: 12, MRV: 16 },\r\n    { muscle: 'Triceps', sets: 10, MEV: 6, MAV: 14, MRV: 18 },\r\n    { muscle: 'Calves', sets: 6, MEV: 8, MAV: 16, MRV: 20 },\r\n    { muscle: 'Abs', sets: 6, MEV: 4, MAV: 6, MRV: 16 },\r\n    { muscle: 'Forearms', sets: 4, MEV: 4, MAV: 4, MRV: 12 },\r\n    { muscle: 'Neck', sets: 3, MEV: 2, MAV: 3, MRV: 8 },\r\n    { muscle: 'Traps', sets: 4, MEV: 4, MAV: 4, MRV: 12 }\r\n  ];\r\n  // Sample data for the volume chart - matches the legacy PowerHouse muscle order and landmarks  \r\n  const volumeChartData = {\r\n    'Chest': 14,\r\n    'Back': 16,\r\n    'Quads': 12,\r\n    'Glutes': 8,\r\n    'Hamstrings': 10,\r\n    'Shoulders': 12,\r\n    'Biceps': 8,\r\n    'Triceps': 10,\r\n    'Calves': 12,\r\n    'Abs': 10,\r\n    'Forearms': 6,\r\n    'Neck': 4,\r\n    'Traps': 8,\r\n    mev: {\r\n      'Chest': 6, 'Back': 10, 'Quads': 10, 'Glutes': 2, 'Hamstrings': 6,\r\n      'Shoulders': 8, 'Biceps': 6, 'Triceps': 6, 'Calves': 8, 'Abs': 6,\r\n      'Forearms': 4, 'Neck': 2, 'Traps': 4\r\n    },\r\n    mrv: {\r\n      'Chest': 22, 'Back': 25, 'Quads': 20, 'Glutes': 25, 'Hamstrings': 20,\r\n      'Shoulders': 20, 'Biceps': 20, 'Triceps': 18, 'Calves': 22, 'Abs': 25,\r\n      'Forearms': 16, 'Neck': 12, 'Traps': 16\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <TrainingStateProvider>        <div className=\"space-y-8 max-w-7xl\">\r\n        {/* Training Status Card */}\r\n        <TrainingStatusCard />\r\n\r\n        {/* Weekly Volume Tracker Chart */}\r\n        <SimpleVolumeChart data={volumeChartData} />\r\n\r\n        {/* Muscle Volume Cards Grid */}\r\n        <div className=\"card-powerhouse\">\r\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">💪 Muscle Volume Tracking</h2>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4\">\r\n            {muscleData.map((muscle, index) => (\r\n              <MuscleCard\r\n                key={index}\r\n                muscle={muscle.muscle}\r\n                sets={muscle.sets}\r\n                MEV={muscle.MEV}\r\n                MAV={muscle.MAV}\r\n                MRV={muscle.MRV}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </TrainingStateProvider>\r\n    </ErrorBoundary>\r\n  );\r\n}\r\n"],"names":["useWorkoutSessions","sessions","setSessions","useState","loading","setLoading","error","setError","state","useTrainingState","userId","data","supabase","err","sessionData","prev","sessionId","updates","session","completedData","setData","lastSet","fetchError","deleteError","_a","set","s","sets","totalVolume","sum","totalSets","exerciseCount","avgRIR","weekNumber","weekSessions","volumeByMuscle","muscle","volume","MuscleCard","MEV","MAV","MRV","currentValue","setCurrentValue","getSliderColor","value","getSliderBackground","maxRange","mevPercent","mavPercent","mrvPercent","sliderColor","jsxs","jsx","e","Tracking","_selected","_setSelected","_isLoading","setIsLoading","useEffect","timer","muscleData","volumeChartData","ErrorBoundary","TrainingStateProvider","TrainingStatusCard","SimpleVolumeChart","index"],"mappings":"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"}